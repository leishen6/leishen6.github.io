<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDEA中Debug调试的高级武功秘籍助你快速追踪BUG</title>
      <link href="/2021/04/02/IDEA_Debug/"/>
      <url>/2021/04/02/IDEA_Debug/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210324140911.jpg" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">Java 中各种 IDE 的 Debug 功能，都是通过 Java 提供的 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/index.html" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">Java Platform Debugger Architecture (JPDA)</a> 来实现的。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">借助 Debug 功能，可以很方便的调试程序，快速的模拟 / 找到程序中的错误。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Interllij Idea 的 Debug 功能上说虽然看起来和 Eclipse 差不多，但是在使用体验上，还是要比 Eclipse 好了不少。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Debug 中，最常用的莫过于下一步，下一个断点（Breakpoint），查看运行中的值几个操作；但是除了这些 IDE 还提供了一些 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>“高级”<span>」</span></strong> 的功能，可以帮助我们更方便的进行调试；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">下面就介绍几种高级的并且也很有用的调试技巧。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">Java8 Streams Debug：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Stream 作为 Java 8 的一大亮点，它和 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">IntStream.iterate(<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>,&nbsp;n&nbsp;-&gt;&nbsp;n&nbsp;+&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.skip(<span class="hljs-number" style="color: #986801; line-height: 26px;">100</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.limit(<span class="hljs-number" style="color: #986801; line-height: 26px;">100</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.filter(PrimeFinder::isPrime)<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//检查是否是素数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.forEach(System.out::println);<br><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">上面这段代码，就是一个 streams 的常见用法，对集合排序并转换取值；IDEA 也提供了分析 streams 过程的功能：（注意：IDEA中安装了 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Java Stream Debugger<span>」</span></strong> 插件才支持此功能）</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401171647.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401171651.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401171657.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">修改程序执行流程：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">在 Debug 调试的过程中，一般情况下，让程序正常执行即可。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">但是某些情况下，需要动态的修改执行流程，此时如果通过修改代码再重新调试的方式还是太不方便了，好在 Idea 提供了一些动态修改程序执行流程的功能，可以让我们很灵活的进行调试。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>1、返回上一个栈帧 / 删除当前栈帧 /“逆向运行”（Drop frame）：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当我们在 Debug 时出现手抖等情况，提前或按错了下一步，导致错过了断点。此时可以通过 Idea 提供的 Drop Frame 功能，来返回到上一个栈帧：</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame)[插图] 用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">每一个方法从调用直至执行完成的过程，就对应着一个个栈帧在虚拟机栈中入栈到出栈的过程。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">其实不光是 Java，其他编程语言的方法执行模型，也是一个栈结构，方法的执行对应着一次 push/pop 的操作；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">比如下面这段代码，当执行过一次方法后，栈帧上有两个方法：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401174505.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401174511.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此时，点击 Drop Frame 按钮后，会删除栈顶上的数据，回到调用 log 方法前的位置：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401174515.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>注意：Drop Frame 虽然好用，但是可能在 Drop Frame 之后发生一些不可逆的问题，比如 IO 类的操作，或已修改的共享变量是无法回滚的，因为这个操作只是删除栈顶的栈帧，并不是真正的 “逆向运行”<span>」</span></strong></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>2、强制方法返回（Force Return）：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当一个方法比较长，或者 Step Info 到一个不太重要的方法想跳过该方法时，可以通过 Force Return 功能来强制结束该方法：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401174837.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>注意：Force Return 和 Step Out 不一样，Step Out 是跳出当前步骤，还是会执行方法中的代码；而 Force Return 是直接强制结束方法， 跳过该方法后的所有代码直接返回。比如下面这段代码，当使用 Force Return 后，evaluate 方法中的 println 并不会执行<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当要强制返回的方法有返回值时（非 void），force return 还需要指定一个返回值：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401174841.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>3、触发异常：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当调用的方法可能抛出异常，调用者需要处理异常时，可以直接让方法抛出异常而不用修改代码；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">下面是一段伪代码，模拟发送请求，超时自动重试：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401181104.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当方法执行至 sendPacket 时，可以执行 Throw Exception 操作，提前结束方法并抛出指定的异常：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401181111.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401181116.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">调用者收到异常后，就可以执行 catch 中的重试逻辑了，这样以来就不用通过修改程序等操作来模拟异常，非常的方便。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>4、计算表达式：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">计算表达式：指的是在调试时，可以将已经在调试中得到的结果，通过计算表达式进行动态处理，而不用去修改代码重新再调试；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>下面举个例子描述下具体操作步骤：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">编写的测试伪代码：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401181409.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">然后在调试的 <em style="font-style: normal; color: #3594F7; font-weight: bold;">variables</em> 区域右击鼠标，点击 <em style="font-style: normal; color: #3594F7; font-weight: bold;">evaluate expression</em>：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401181412.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">然后出现计算表达式框：注意 getString( )方法是已经在代码中写好了的，并且 方法参数 bytes 是上面调试的代码得出的数据，最后点击 <em style="font-style: normal; color: #3594F7; font-weight: bold;">evaluate</em> 执行表达式就会得到结果</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210401181415.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">Debug 运行中的 JVM 进程（Attach to Process）：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">当应用程序无法在 Idea 中运行，又想 Debug 这个运行中的程序时，可以通过 Attach to Process 功能，该功能可以 Debug 做到调试运行中的程序，当然前提是，保证这个正在运行的 JVM 进程代码和 Idea 中的代码一致；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402092622.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">这种场景其实挺常见的，比如你要调试 springboot executable jar 时，或者调试 tomcat 源码等独立部署运行的进程，通过 Attach to Process 就非常方便了，可以做到用 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Idea 之外的环境 + Idea 中的代码<span>」</span></strong> 进行 Debug 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">这种功能其实在 C/C++ GDB 下也有，Debug 正在运行的程序而已，Intellij Clion 也是支持的。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">远程调试（Remote Debug）：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">远程调试是 JVM 提供的功能，和上面的 Attach to Process 类似，只是这个进程从本地变成远程了。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">比如我们的程序在本地没有问题，在服务器上却有问题；比如本地是 MacOs，服务器是 Centos，环境的不同导致出现某些 Bug，此时就可以通过 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>远程调试功能<span>」</span></strong> 来调试。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果要启用远程调试，需要在远程 JVM 进程的启动脚本中添加以下参数：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">-Xdebug&nbsp;-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005<br><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>suspend 参数<span>」</span></strong> 表示，JVM 进程是否已 “挂起” 模式启动，如果以 “挂起” 模式启动，JVM 进程会一直阻塞不继续执行，直到远程调试器连接到该进程为止；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">这个参数非常有用，比如我们的问题是在 JVM 启动期间发生的（比如 Spring 的加载 / 初始化流程），就需要将 suspend 设置为 y，这样 JVM 进程就会等待 Ide 中的远程调试连接完成才会继续运行。否则远程的 JVM 已经运行了一段时间了，Ide 的 Debugger 才连接，早已经错过了断点的时机。</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402093802.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">然后配置好 Host/Port，点击 Apply 保存即可：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402093805.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">最后，先启动远程的 JVM 进程，然后在 Idea 中已 Debug 来运行刚才配置的 Configuration 即可：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402093810.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><em style="font-style: normal; color: #3594F7; font-weight: bold;">小提示</em> ：远程调试下，由于有网络的开销，反应会比较慢，而且会导致远程程序的暂停，使用时请找一个没有人使用的环境。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">多线程下的调试：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">多线程程序是比较难写的，确切的说是很难调试，一个不小心就会因为线程安全的问题引起各种 Bug，并且这些 Bug 还可能很难复现。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">由于操作系统的线程调度是我们无法控制的，所以多线程程序的错误有很大的随机性，一旦出现问题很难找到；我们的程序可能在 99.99% 的情况下都是正常的，但是最后的 0.01% 也很可能造成严重的错误。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">线程安全的最常见问题就是 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>竞争条件<span>」</span></strong> ，当某些数据被多个线程同时修改时，就可能会发生线程安全问题。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">比如下面这个流程，正常情况下程序没问题：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094112.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当出现了竞争问题，单个线程的 read 和 write 操作之间，调度了其他线程，此时数据就会出错：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094115.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">下面是一段示例代码，虽然共享数据 a 是一个 synchronizedList，但是它并不能保证 addIfAbsent 是个原子操作，因为 contains 和 add 是两个 synchronized 方法，两个方法的执行间隙间还是有可能被其他线程修改：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.ArrayList;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.Collections;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.List;<br><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">ConcurrencyTest</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;List&nbsp;a&nbsp;=&nbsp;Collections.synchronizedList(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">main</span><span class="hljs-params" style="line-height: 26px;">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread&nbsp;t&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Thread(()&nbsp;-&gt;&nbsp;addIfAbsent(<span class="hljs-number" style="color: #986801; line-height: 26px;">17</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.start();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addIfAbsent(<span class="hljs-number" style="color: #986801; line-height: 26px;">17</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.join();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">addIfAbsent</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;x)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(!a.contains(x))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.add(x);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果对这段代码进行 Debug 时，一个 Step Over（ 下一步）之后，这个下一步操作的作用域是 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>整个进程<span>」</span></strong> ，而不是当前线程。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">也就是说，Debug 下一步之后，很可能被其他线程插入并执行了修改，这个共享数据 a 一样不安全，很可能出现重复添加元素 17 的问题；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但是上述问题只是可能出现，实际调试时很难复现。但是好在 Idea 的 Debug 可以将挂起粒度设置为线程，而不是整个进程：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094607.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Suspend 设置为 Thread 后，如下图所示，将断点打在 a.add 这一行，然后以 Debug 模式运行程序后，主线程和新建的线程都会挂在 addIfAbsent 方法中，我们可以在 Idea 中的 Debug 面板中切换线程：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094611.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此时，Main 线程和子线程都已经调用了 contains 方法，并都返回 false，挂起在 a.add 这一行，都准备将 17 添加到 a 中：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094614.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">执行下一步后，Main 线程成功的将 17 添加到集合中：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094618.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此时切换到 Thread-0 线程，还是挂在 a.add(x) 这一行，但是集合 a 中已经有元素 17 了，但时 Thread-0 线程还是会继续 add，add 之后集合 a 就出现了重复元素 17，导致程序出现了 bug：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094622.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210402094625.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">从上面的例子可以看出，在调试多线程程序的过程中，利用 Idea Debug 的 Suspend 功能，可以很方便的模拟多线程竞争的问题，这对于编写或调试多线程程序实在太方便了。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索 <em style="font-style: normal; color: #3594F7; font-weight: bold;">【木子雷】</em> 公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://img-blog.csdnimg.cn/img_convert/40b479dcea1ad14415027a0888256c3d.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">参考资料：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">①、<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/index.html" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">Java Platform Debugger Architecture (JPDA) ｜ Oracle Docs</a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">②、<a href="https://docs.oracle.com/cd/E26576_01/doc.312/e24930/debugging-apps.htm#GSDVG00004" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">Debugging Applications | Oracle Docs</a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">③、<a href="https://www.jetbrains.com/help/idea/debugging-code.html" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">Debug code - Help | IntelliJ IDEA</a></p></section>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql中必须知道的至关重要的三种日志</title>
      <link href="/2021/03/26/MySql_Log/"/>
      <url>/2021/03/26/MySql_Log/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210324140919.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">MySql 中有三种 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>log<span>」</span></strong> 是十分中要的，因为MySql之所以能支持 事务（实现持久化、回滚等）、数据库崩溃恢复、主从复制等，都是基于这三种日志的。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>至关重要的三种log：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">binlog 二进制日志</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">redo log 重做日志</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">undo log 回滚日志</section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>本文主线：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">简要介绍三种日志</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">MySql事务处理中三种日志承担的角色</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">简要介绍三种日志：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>1、binlog 二进制日志：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">binlog 二进制日志（归档日志），这个日志是由MySql的 <em style="font-style: normal; color: #3594F7; font-weight: bold;">server层</em> 进行维护的；不管当前MySql使用的是什么存储引擎，binlog归档日志都是支持的；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">对MySql的server层不清楚的大大们可以参考此文章：<a href="https://juejin.cn/post/6897388295060684807#comment" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">查询SQL的执行流程</a></p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>作用：<span>」</span></strong></p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">用于复制，在主从复制中，从库利用主库上的binlog进行重播，实现主从同步。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">数据恢复，用于数据库的基于时间点的还原。</section></li></ul><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210324194518.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>内容：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">逻辑格式的日志，binlog是用于记录所有数据库表结构和表数据变更的二进制日志，比如insert、update、delete、create、truncate等等操作，不会记录select、show操作，因为它们没有对数据本身发生改变。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>常见格式：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210324193620.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">MySql的binlog的默认格式是使用 STATEMENT；需要记住的是使用此格式时，如果将事务隔离级别设置为 RC读已提交 时，在进行主从复制的时候会存在bug，导致复制后主从数据不一致；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">具体存在什么样的bug可以参考此文章：<a href="https://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484435&amp;idx=1&amp;sn=3022b0aa715a3e1e79788d6d5fbbbf67&amp;chksm=96f6667aa181ef6c324d328639839e8a0b0ada541787a97067952e21d77e7bf6c13cc0386966&amp;scene=21#wechat_redirect" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">互联网项目中mysql应该选什么事务隔离级别 </a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>注意：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">binlog二进制日志文件在默认情况下并没有启动，需要手动进行开启的；有人可能会质疑，开启此日志文件的话，对数据库的性能会产生什么样的影响？</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">质疑是对的，确实开启此日志文件会影响到数据库的性能，但是这个影响是十分有限的，根据MySql的官网手册了解到，开启此日志会使性能下降1%左右，这个损失大体上是可以接受的。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>2、redo log 重做日志：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">redo log重做日志，这个日志是由MySql的 <em style="font-style: normal; color: #3594F7; font-weight: bold;">innodb存储引擎</em> 提供维护的，此日志文件只存在于innodb存储引擎下；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>作用：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">确保事务的 <em style="font-style: normal; color: #3594F7; font-weight: bold;">持久性</em> 。redo日志记录事务执行后的状态，用来恢复未写入data file的已成功事务更新的数据。防止在发生故障的时间点，尚有脏页未写入磁盘，在重启mysql服务的时候，根据redo log进行重做，从而达到事务的持久性这一特性。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">各位大大，如果上面这段话如果看的不是很明白，可以继续往下看看呀，通过下文中事务的例子可以很好理解；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>内容：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">物理格式的日志，记录的是物理数据页面的修改的信息，简单说就是记录着xxx页做了xxx修改；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">innodb 存储引擎提供了重做日志文件组（group），每个重做日志文件组包含着重做日志文件；默认是提供了一个重做日志文件组，文件组下包含两个大小相同的重做日志文件；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">innodb存储引擎的重做日志文件写入流程：先写重做日志文件1，当文件1被顺序写满时，会切换到重做日志文件2，再当重做日志文件2也被写满时，会再切换到重做日志文件1中，依次循环； 所以说重做日志文件是 <em style="font-style: normal; color: #3594F7; font-weight: bold;">循环覆盖写入的</em> 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">因为重做日志是循环覆盖写入的，所以不能使用其进行整个数据库的数据恢复，它只能保证数据库宕机时的事务的完整性数据；如果想要恢复全部数据的话，只能使用 binlog 二进制日志（归档日志）进行恢复。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：大家可以手动修改重做日志文件组下的文件数量，并可以指定每个重做日志文件的大小，通过下面的参数：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">innodb_log_file_size  指定重做日志文件的大小</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">innodb_log_files_in_group  重做日志文件组下的文件数量</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>扩展：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：重做日志文件的大小设置对于innodb存储引擎的性能有很大的影响。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">重做日志文件不能设置的太大，也不能设置的太小；如果设置的太大，在数据库意外宕机后进行恢复时会需要很长时间；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但是也不能设置的太小，因为设置的太小会导致一个事务的日志需要多次切换重做日志文件进行写入，那么在覆盖掉之前的重做日志时，需要将要被覆盖的重做日志对应在内存中的脏页进行写盘（刷盘）；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">因为不写盘的话，如果重做日志被覆盖掉了，然后数据库意外宕机了，那么之前没有写盘的数据将没法在数据库重启时进行恢复了，并且如果频繁的进行重做日志的覆盖的话，那么就会频繁的进行脏页刷盘，进而导致数据库性能的抖动。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">那重做日志应该设置多大呢？ 一般来说，redo log日志文件的全部大小，应该足够容纳服务器一个小时的活动内容。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果统计出一小时的重做日志写入量为 500M 的话，由于 redo log 日志文件默认有 2 个，所以需要设置 innodb_log_file_size=250M ；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：如果各位大大们对 <em style="font-style: normal; color: #3594F7; font-weight: bold;">脏页等名词</em> 不太清楚的话，可以通过《丁奇大佬 - MySQL实战45讲》、《mysql技术内幕 innodb存储引擎》进行学习了解呀。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>3、undo log 回滚日志：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">注意 undo log 回滚日志的写入是在事务开始执行前就已经开始了；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>作用：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">保证数据的原子性，保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>内容：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">逻辑格式的日志，在执行undo的时候，仅仅是将数据从逻辑上恢复至事务之前的状态，而不是从物理页面上操作实现的，这一点是不同于redo log的。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">比如说我们要insert一条数据，那么undo log就会生成一条对应的delete日志，并且与当前事务的txid（事务唯一标识）进行了关联，用于支持回滚和MVCC；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">像如果在一个事务中执行了多个包含update、insert、delete的语句时，由于事务具备原子性，如果其中一个语句执行失败，那么之前执行成功的语句要就要被回滚撤销掉，此时就会根据当前事务txid在undo log中查找到保存的日志进行执行回滚；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：写入undo log 的这个操作也是需要记录到redo log重做日志中的；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">为什么也要记录到redo log中呢？ 举个场景，当事务在没执行完时mysql意外宕机了，那么在数据库重启后需要恢复事务，如果事务需要回滚，但是你在内存中保存的undo log还没有写入磁盘，在宕机时就丢失了，那么就会导致无法回滚，就会出现数据不一致的问题；而如果记录到了redo log中，则可以根据redo log进行重做，然后根据重做的undo log进行回滚。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>扩展：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：为了提升数据库性能，mysql都是在内存的缓冲区中记录日志，然后根据策略再进行刷盘的（将缓冲区记录的日志写入到磁盘中进行保存）；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通过innodb存储引擎的架构图可以进行深入了解：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120205111.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果想深入学习，请参考此文章 <a href="https://www.seoxiehui.cn/article-152978-1.html" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">你居然还不知道Mysql存储引擎InnoDB分为内存架构、磁盘架构？</a></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">MySql事务处理中三种日志承担的角色：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">首先咱通过一个update语句的执行流程图展示出三种日志文件在事务处理中承担的角色！ SQL语句如下：</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;"><em style="font-style: normal; color: #3594F7; font-weight: bold;">update T set c=c+1 where ID=2;</em></p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210324185715.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>为什么流程图中没有undo log：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">在流程图中可以看到redo log、binglog，那怎么没有undo log 呀，因为 undo log在 <em style="font-style: normal; color: #3594F7; font-weight: bold;">事务开始执行前</em> 就已经开始写入了 。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>为什么上图事务中必须存在redo log 和 binlog呢：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">首先，上面介绍这两种日志时，已经说道了binlog 是mysql的server层维护的日志，主要用来做主从复制和数据备份恢复使用；而redo log是InnoDB存储引擎独有的日志，是用来实现crash-safe能力；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>crash-safe 是什么？<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">即在 InnoDB 存储引擎中，事务提交过程中任何阶段，MySQL突然奔溃，重启后都能保证事务的完整性，已提交的数据不会丢失，未提交完整的数据会自动进行回滚。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">为了实现crash-safe除了需要redo log外，还需要 undo log对未完整的事务进行回滚的；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">想要对crash-safe进行详细了解的大大们可以参考此文章：<a href="https://mp.weixin.qq.com/s/5i9wmJs4_Er7RaYfNnETyA" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">MySQL 的 crash-safe 原理解析</a></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>上图中处于prepare阶段、处于commit阶段是什么：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">其实这是mysql的内部XA事务！俗称日志的两阶段提交协议！看到这大家是不是有点模糊了，听说过分布式XA事务，怎么还有内部XA事务呀？</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">其实大家知道的分布式XA事务指的是mysql的外部XA事务；内部xa事务主要是mysql内部为了保证binlog与redo log之间数据的一致性而存在的，这也是由其架构决定的(binlog由mysql的server层提供支持，而redo log 则是由 innodb存储引擎层提供支持)；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">对mysql的架构不太熟悉的大大可以参考此文章：<a href="https://juejin.cn/post/6897388295060684807#comment" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">查询SQL的执行流程</a></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>binlog与redo log之间数据的一致性问题是什么：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">因为redo log 和 binlog 都是用来"恢复" 数据的，redo log是用来恢复事务，保证事务的完整性的，而 binlog 是可以用来进行整体数据恢复，或基于某个时间点进行恢复的，并且用于主从复制；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果在进行一个事务执行时，已经完成了 redo log重做日志的写入，但是还没有写入binlog，此时数据库意外宕机了，如果没有保障两个日志 <em style="font-style: normal; color: #3594F7; font-weight: bold;">逻辑上一致</em> 的话；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">那么在数据库重启时会根据redo log进行事务恢复，并将在事务中已经处理好但未写盘的数据进行恢复；但是由于binlog没有写入，所以会导致在使用binlog进行数据恢复时，或者是主从复制时，出现数据不一致的情况；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果保证了两个日志的逻辑一致的话，那么在使用redo log恢复事务时，会判断binlog是否也写入成功了，如果binlog也写入成功，那么才会进行事务恢复，否则将不进行事务恢复，会使用undo log 进行回滚的；</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>MySql内部XA事务是什么呢：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">内部XA事务就是将事务提交分为了两个阶段，prepare阶段和commit阶段！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">prepare：写入redo log，并将回滚段置为prepared状态，此时binlog不做操作。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">commit：innodb释放锁，释放回滚段，设置提交状态，写入binlog，然后存储引擎层提交。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>扩展：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">各位大大们，上图update的语句执行流程中，写入redo log重做日志，写入binglog二进制日志，其实都只是 <em style="font-style: normal; color: #3594F7; font-weight: bold;">先</em> 写入到日志缓冲区中，后面还会涉及到日志缓冲区中数据写入到具体磁盘中的日志文件中；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">那何时才会将缓冲区的日志数据写入到磁盘中？这是由mysql中的几个配置参数控制的；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>缓冲区的日志写入到磁盘中的流程：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">在介绍配置参数前，咱们先了解下缓冲区的日志写入到磁盘中的流程是什么样：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210324191643.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">用户空间：是指用户程序运行的空间，例如mysql就运行在此空间内；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">内核空间：  内核空间是指操作系统内核运行的空间，是为了保证操作系统内核的能够安全稳定地运行而为内核专门开辟的空间；</p></section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">为什么需要内核空间呢？</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">主要是为了安全起见，不能让用户空间的程序直接去磁盘空间中读取数据，必须由经由内核空间通过DMA来获取；并且用户空间和内核空间两者之间是互相隔离的 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>redo log刷盘配置参数：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">innodb_flush_log_at_trx_commit 配置参数用来控制重做日志刷新到磁盘的策略。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">该参数的值存在三种：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">0：表示事务提交时不进行写入重做日志擦操作，MySql会使用其后台线程每一秒将日志缓冲区中的重做日志写入到 OS cache（磁盘缓存），同时立即调用 fsync 操作将 OS cache 中的重做日志写入到磁盘文件中（刷盘）；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">1：表示在事务提交时就会进行重做日志的写入操作，实时的将日志缓冲区中的重做日志写入到 OS cache（磁盘缓存），同时立即调用 fsync 操作将 OS cache 中的重做日志写入到磁盘文件中（刷盘）； <em style="font-style: normal; color: #3594F7; font-weight: bold;">此值为默认值</em>  ，因为当设置值为1时可以保证事务的ACID中的持久性；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">2：表示在事务提交时就会进行重做日志的写入操作，但是只是将日志缓冲区中的重做日志写入到 OS cache（磁盘缓存），不会立即调用 fsync 操作进行刷盘，MySQL后面会主动将OS cache中的重做日志数据每秒批量进行一次刷盘； 选择此值时，mysql的并发性最好，但是存在风险，当操作系统一旦宕机，会丢数据，但是如果MySql数据库宕机的话，则不会丢失数据，因为数据保存在了OS cache中；</p></section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>binlog 刷盘配置参数：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">sync_binlog  配置参数用来控制二进制日志刷新到磁盘的策略。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">该参数常用的三种值：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">0：表示在事务提交后，mysql会将日志缓冲区中的binlog数据写入到 OS cache（磁盘缓存），但并不会调用 fsync 操作进行刷盘，而是由操作系统自己控制它的缓存的刷盘； <em style="font-style: normal; color: #3594F7; font-weight: bold;">此值为默认值</em>  。</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">1：表示在事务提交时就会进行binlog的写入操作，实时的将日志缓冲区中的重做日志写入到 OS cache（磁盘缓存），同时立即调用 fsync 操作将 OS cache 中的重做日志写入到磁盘文件中（刷盘）；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">N：表示每次进行提交后都只是将日志缓冲区中的binlog数据写入到 OS cache（磁盘缓存），在进行N次事务提交以后，Mysql将执行一次fsync操作指令将OS cache中的binlog数据批量刷新到磁盘中； <em style="font-style: normal; color: #3594F7; font-weight: bold;">注意 N 代表的是数值；</em></p></section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>一道经典的面试题：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">面试官：你有遇到过数据库宕机重启，事务丢失的情况么?</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">我们：其实这道题就是redo log、binlog的刷盘时机，上面已经聊了这两种日志的全部刷盘时机了，大家可以两两结合进行回答就好了；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">也可以直接参考此文中提供的答案进行回答：<a href="https://mp.weixin.qq.com/s/iqNfNAc4i_1JIEGuxRds5w" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">面试官:谈谈你对mysql事务的认识? </a></p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">各位大大们，MySql中至关重要的三种日志就介绍到此啦；由于本人水品有限，如有问题请留言讨论呀！</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索 <em style="font-style: normal; color: #3594F7; font-weight: bold;">【木子雷】</em> 公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://img-blog.csdnimg.cn/img_convert/40b479dcea1ad14415027a0888256c3d.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文带你了解MySql并发事务中的数据库锁、隔离级别、MVCC</title>
      <link href="/2021/03/05/mysql_mvcc_lock/"/>
      <url>/2021/03/05/mysql_mvcc_lock/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303203449.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">最近同事开发时遇到了一个事务阻塞的问题，通过网上查询发现关于MySQL事务、锁这一块的资料都比较絮乱，让人看的云里雾里，所以借着这个机会，刚好也对这一块内容做一个总结梳理，希望能比较全面去写一下MySQL的并发事务处理。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>本文主线：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">简述事务的特性与隔离级别</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">聊聊MySql中各种类型的锁</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">然后再聊聊MVCC是个什么东东</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">接着再聊聊数据库锁的触发及升级，以及死锁</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">最后说下出现锁问题时的常见排查命令</p></section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">简述事务的特性与隔离级别：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">在讲锁之前，必须要先聊聊 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>事务的特性与隔离级别<span>」</span></strong> ，因为锁机制的存在是为了保证事务对应隔离级别下的特性。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>事务具有以下几个特性：<span>」</span></strong><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202525.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>说完特性，再聊聊MySql中的几种事务隔离级别：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202531.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>RU 读未提交：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">顾名思义，在这种隔离级别下，当多个事务并行对同一数据进行操作时，会读取未提交的数据，也被称之为 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>脏读<span>」</span></strong> 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">这种隔离级别因为会出现脏读现象，所以在实际场景中很少用。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>RC 读提交：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">一个事务只能看见已经提交事务所做的改变。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但这种隔离级别会出现 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>不可重复读<span>」</span></strong> 现象，即在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>RR 可重复读：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">这是MySQL的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>默认事务隔离级别<span>」</span></strong> ，在这种隔离级别下，解决了RC存在的不可重复读问题，确保在同一事务中，会看到同样的数据行。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但可能会出现 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>幻读<span>」</span></strong> ，即当一个事务在执行读取操作，第一次查询数据总量后，另一个事务执行了新增数据的操作并提交后，这个时候第一个事务读取的数据总量和之前统计的不一样，就像产生幻觉一样。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>SERIALIZABLE 串行化：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此隔离级别是四种隔离级别中最高的级别，解决了 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>脏读、可重复读、幻读<span>」</span></strong> 的问题。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但是性能最差，它将事务的执行变为顺序执行，与其他三个隔离级别相比，在并行事务执行过程中，后一个事务的执行必须等待前一个事务结束。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">MySql中各种类型的锁：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>在MySQL中，按锁类型划分，有以下种类：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202534.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">提到锁到种类，需要提一下MySQL到存储引擎，MySQL常用引擎有 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>MyISAM和InnoDB<span>」</span></strong> ，而InnoDB是mysql默认的引擎。MyISAM是不支持行锁的，而InnoDB支持行锁和表锁。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>MyISAM 存储引擎下表锁：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">读锁会阻塞对同一张表的写操作，而写锁既会阻塞对同一张表的写操作，也会阻塞此表的读操作。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>排他锁、共享锁、意向锁 是什么东东？</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>排他锁：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通常我们在InnoDB存储引擎中对表执行一个更新操作，针对这一行数据会持有排他锁；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">持有排他锁时，不允许再在数据行上添加写锁与读锁，其他事务对此行数据的读、写操作都会被阻塞，只有当前事务提交了，锁释放了才允许其他事务进行读写，达到避免 <em style="font-style: normal; color: #3594F7; font-weight: bold;">脏读</em> 的效果。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>共享锁：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">主要是为了支持并发的读取数据而出现的，当一个事务持有某一数据行的共享锁时，允许其它事务可以再获取共享锁，但不允许其它事务在此基础上获取排他锁；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">也就是说，在持有共享锁时，多个事务可以同时读取当前数据，但是不允许任何事务同时对当前数据进行修改操作，阻塞添加排它锁。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>意向锁：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">首先需要明白一点，意向锁的作用是在 <em style="font-style: normal; color: #3594F7; font-weight: bold;">表上</em> 的，当一个事务需要获取共享锁或排他锁时，首先要获取对应的意向锁；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">为什么要这样做呢？举个例子，假设在事务A中，对某一行数据添加共享锁，这一行只能读，不能写；此时事务B申请获得表的写锁，假如加锁成功，那么事务B将能够对整个表的数据进行读写，与事务A冲突，这种操作肯定是不允许的呢；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">所以MySQL会在申请共享锁或者排他锁的时候，先获取对应的意向锁，也就是说，你要操作表中的某一行锁数据，先要看看整个表能不能被操作；意向锁的申请是由数据库完成的，不需要人为申请。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>Innodb 存储引擎下的行锁：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">上文对几种锁类型进行了简要分析，其实平时工作开发中接触到最多的还是行锁，行锁的实现有以下几种：</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;"><em style="font-style: normal; color: #3594F7; font-weight: bold;">注意：在Innodb 存储引擎中，行锁的实现是基于索引的</em></p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202538.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>Record Lock(记录锁)：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">它是会锁住索引记录，比如 update table where id = 1， id 是主键，然后在聚簇索引上对 id=1 的个索引记录进行加锁；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>Gap Lock(间隙锁)：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">实质上是对索引前后的间隙上锁，不对索引本身上锁,目的是为了防止幻读。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">当使用范围条件查询而不是等值条件检索数据，并请求排他锁、或共享锁时，对于该范围内不存在的记录，不允许其修改插入。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">举个例子：当表中只有一条id=101的记录，一个事务执行select * from user where user_id &gt; 100 for update；此时另一个事务执行插入一条id=102的数据是会阻塞的，必须等待第一个事务提交后才能完成。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">间隙锁是针对事务隔离级别为可重复读或以上级别的。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>Next-Key Lock：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Next-Key Lock 是 记录锁和间隙锁 的结合，会同时锁住记录与间隙。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">在innodb存储引擎中，如果没有通过 索引项 进行查询时：</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">①、在RR隔离级别下，会以Next-Key Lock的方式对数据行进行加锁，通过 行锁+间隙锁 实现了 "锁表" 的效果，但请记住这不是添加的表锁；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">②、而在 RU、RC 隔离级别下还是只会锁行记录，为什么呢？因为在innodb存储引擎下的四种事务隔离级别中都支持行锁，但是间隙锁只存在于RR、Serializable 两种隔离级别下。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">可以通过下面这篇文章了解为什么在RR隔离级别下会实现"锁表"的效果，而在RC隔离级别下只会锁行记录: <a href="https://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484435&amp;idx=1&amp;sn=3022b0aa715a3e1e79788d6d5fbbbf67&amp;chksm=96f6667aa181ef6c324d328639839e8a0b0ada541787a97067952e21d77e7bf6c13cc0386966&amp;scene=21#wechat_redirect" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">互联网项目中mysql应该选什么事务隔离级别</a></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">MVCC 是什么：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">锁机制可以控制并发操作，来保证一致性，但是系统开销会很大；在RC、RR的隔离级别下，MySQL的InnoDB存储引擎通过 <em style="font-style: normal; color: #3594F7; font-weight: bold;">MVCC (多版本并发控制)</em> 机制来解决幻读。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>使用MVCC时具体的体现是什么呢？<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">使事务在并发过程中，SELECT 操作不用加锁，读写不冲突从而提高性能。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>那么实现MVCC机制的原理是什么呢？<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">其原理是通过保存数据在某个时间点的快照来实现的；通过在每行记录后面保存隐藏列来存放事务ID，这样每一个事务，都会对应一个递增的事务ID。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">假设三个事务同时更新来同一行数据，那么就会对应三个数据版本，但实际上版本1、版本2并不是物理存在的，而是通过关联记录在undo log 回滚日志中，这样就可以通过undo log找回数据的历史版本，比如回滚的操作，会使用上一个版本的数据覆盖数据页上的数据。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>举例一个RR隔离级别下快照读的例子：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">开启事务A按条件A查询到两条数据，此时事务B再插入1条数据且满足条件A的数据，并提交事务；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此时事务A再按条件A进行查询，查询到的依然是两条数据，也就是说，事务A查询到的并不是当前最新的数据版本（三条数据），而是通过MVCC实现的历史快照版本；这也是可重复读的实现。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>介绍了完读操作，再举例一个RR隔离级别下 更新 写操作的例子：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：对数据修改的操作(update、insert、delete)都会读到已提交事务的最新数据，因为这就是 当前读。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">假设事务A执行一个更新语句，满足更新条件A（条件A字段无索引或者存在非唯一索引）的数据是2条，更新成功后不提交事务；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此时事务B插入一条新的满足条件A的数据时会被阻塞的，为什么呢？</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">因为这里在事务A更新时使用到了Next-Key Lock锁，它会使用行锁+间隙锁实现了"锁表"，所以后面事务B再进行插入数据时会被阻塞的；这也防止了幻读的出现。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">这里如果看的不是很明白的话，可以同时再参考下此文章，此文章详细分析了加锁情况：<a href="https://mp.weixin.qq.com/s/hcRy3pKaZw20YrNIgsPH8w" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">惊！史上最全的select加锁分析(Mysql)</a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意：</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">MVCC只在RC和RR两个隔离级别下支持；其他两个隔离级别和MVCC不兼容，因为 RU总是读取最新的数据行，而不是符合当前事务版本的数据行；而S ERIALIZABLE 则会对所有读取的行都加锁，是当前读，也是读取的最新数据。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">数据库锁的触发及升级，以及死锁：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>数据库锁的触发及升级：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202541.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202544.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>什么时候会出现DeadLock：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>什么是死锁呢?<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>举例说明：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">事务A获取 id=20的锁，事务B获取id=30的锁，然后，事务A试图获取id=30的锁，而该锁已经被事务B持有，所以事务A等待事务 B释放该锁，然后事务B又试图获取id =20 的锁这个锁被事务 A 占有，于是两个事务之间相互等待，这就会导致死锁。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">死锁的场景还有许多，归根结底，都是因为多个事务想要获取的锁互斥且获取的顺序不一致所造成。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>如何避免死锁呢？<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通常Record Lock引起的死锁问题开发时都会比较小心，但Gap Lock可能导致死锁的问题通常会被忽略，所以这一点要多加注意，另外就是建立合适的索引，如果没有索引,那么在操作数据时会锁住每一行，会增大死锁的概率。</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">出现锁问题时的常见排查命令：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210303202547.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>show open tabbles：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210305185219.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">SHOW OPEN TABLES where In_use &gt; 0：查看哪些表被锁了</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>show status like 'table%'：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210305185229.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">table_locks_waited：出现表级锁定争用发生等待的次数，此值高说明存在验证的表记锁争用情况</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">table_locks_immediate：表示立即释放表锁的次数</p></section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>show status like 'innodb_row_lock%'：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210305185257.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Innodb_row_lock_current_waits：当前正在等待锁定的数量</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Innodb_row_lock_time：系统启动到现在锁定总时间</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Innodb_row_lock_time_avg：每次等待话费的平均时间</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Innodb_row_lock_time_max：系统启动到现在等待最长一次所花时间</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Innodb_row_lock_waits：系统启动后到现在共等待次数</p></section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>information_schema：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">information_schema是MySQL专门记录性能信息的库，在5.7版本后默认打开。</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCKS： 查看当前InnoDB的锁的信息,会显示是什么锁类型,属于那个事务ID</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">SELECT * FROM INFORMATION_SCHEMA.INNODB_TRX： 查看InnoDB事务ID，会显示是什么操作和一些常规信息，例如是否在运行running,还是等待锁</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">SELECT * FROM INFORMATION_SCHEMA.INNODB_LOCK_WAITS：查看InnoDB锁的等待时间，和等待的是哪个事务ID的锁</p></section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索 <em style="font-style: normal; color: #3594F7; font-weight: bold;">【木子雷】</em> 公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://img-blog.csdnimg.cn/img_convert/40b479dcea1ad14415027a0888256c3d.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文让你了解如何快速、优雅的实现导出Excel</title>
      <link href="/2021/02/19/exportExcel/"/>
      <url>/2021/02/19/exportExcel/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210219171821.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">春节假期刚刚过去，大家是不是已经开始了搬砖生活啦，嘻嘻 o(∩_∩)o ，可我还在休假中呢 !</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">好啦，咱们言归正传，开始聊聊正文。做过后端管理系统的同学，大概率都会收到过实现 <strong style="font-weight: bold; color: black;">导出Excel</strong> 的功能需求，因为这个功能在后台管理系统中是个必备功能。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">那大家是怎么实现这个功能的呢？</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用Apache提供POI组件实现；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用现成的、简便的第三方工具库（避免重复造轮子）</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">Hutool 工具库中的Excel工具类</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">EasyExcel 阿里开源的基于Java的简单、省内存的读写Excel工具库</section></li></ul></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">接下来咱们来聊聊使用 Hutool、EasyExcel 工具库实现导出Excel。</strong></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">使用第三方库实现导出Excel</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">业界有句话：不重复造轮子。 使用工具类可以减少日常繁琐的编码，减少重复的编码时间，提高开发效率。 作为程序员，应该多善于利用工具减少代码冗余，美化自己的代码。</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">使用 Hutool 工具库实现导出Excel：</span><span class="suffix" style="display: none;"></span></h3><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">1、首先添加依赖</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">在pom.xml中添加上依赖：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--hutool&nbsp;导出&nbsp;Excel&nbsp;工具组件--&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>5.1.0<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--POI组件--&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>4.1.0<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上面除了引入了 hutool 依赖之外，还引入了 poi-ooxml 依赖，这个包会自动关联引入poi包，且可以很好的支持Office2007+的文档格式 。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">2、然后使用工具类实现导出Excel</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;cn.hutool.core.collection.CollUtil;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;cn.hutool.poi.excel.ExcelUtil;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;cn.hutool.poi.excel.ExcelWriter;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;cn.hutool.poi.excel.StyleSet;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;org.apache.poi.ss.usermodel.CellStyle;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;org.apache.poi.ss.usermodel.Font;<br><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.ArrayList;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.Date;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.LinkedHashMap;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.List;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.Map;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.excel<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;HutoolExcelUtils<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;使用&nbsp;Hutool&nbsp;中的工具类实现&nbsp;Excel的导出<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2021-02-18&nbsp;16:24<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Author</span>:&nbsp;[木子雷]&nbsp;公众号<br>&nbsp;**/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">HutoolExcelUtils</span>&nbsp;</span>{<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;导出Excel<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;args<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">main</span><span class="hljs-params" style="line-height: 26px;">(String[]&nbsp;args)</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Map&lt;String,&nbsp;Object&gt;&gt;&nbsp;rows&nbsp;=&nbsp;CollUtil.newArrayList(data());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExcelWriter&nbsp;writer&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;path&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"E:/QQPCmgr/Desktop/"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;excelName&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"Hutool"</span>&nbsp;+&nbsp;System.currentTimeMillis()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">".xlsx"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;通过工具类创建writer,固定的文件输出路径</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;ExcelUtil.getWriter(path&nbsp;+&nbsp;excelName);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;定义第一行合并单元格样式</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CellStyle&nbsp;headCellStyle&nbsp;=&nbsp;writer.getHeadCellStyle();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;设置内容字体</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Font&nbsp;font&nbsp;=&nbsp;writer.createFont();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;字体加粗</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font.setBold(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;字体颜色</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font.setColor(Font.COLOR_RED);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;headCellStyle.setFont(font);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;设置第&nbsp;0&nbsp;列的单元格的宽度，列数从零开始计算</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.setColumnWidth(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">20</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.setColumnWidth(<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">20</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.setColumnWidth(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">20</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;定义数据行的样式</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StyleSet&nbsp;style&nbsp;=&nbsp;writer.getStyleSet();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;设置单元格文本内容自动换行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style.setWrapText();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;合并单元格后的标题行（第一行），使用默认标题样式</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.merge(rows.get(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>).size()&nbsp;-&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"导出测试：TEST"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;一次性写出内容，使用默认样式，强制输出标题</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.write(rows,&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(writer&nbsp;!=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;记住关闭&nbsp;writer，释放内存</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;构造&nbsp;导出的数据<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;List&lt;Map&lt;String,&nbsp;Object&gt;&gt;&nbsp;data()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;导出的数据</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ArrayList&lt;Map&lt;String,&nbsp;Object&gt;&gt;&nbsp;rows&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList&lt;&gt;();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;i&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;&nbsp;i&nbsp;&lt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String,&nbsp;Object&gt;&nbsp;row&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;LinkedHashMap&lt;&gt;();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row.put(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"字符串标题"</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"字符串"</span>&nbsp;+&nbsp;i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row.put(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"日期标题"</span>,&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Date());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row.put(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"数字标题"</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0.56</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows.add(row);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;rows;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">记得修改代码中导出Excel的路径 path</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">导出Excel的样式是可以灵活变化的，可以自行进行设置</section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">3、导出Excel的样式如下</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210218213650.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">4、注意事项</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">在导出大数据量时，可能会出现内存溢出的问题，不要担心，Hutool也为我们提供了 <strong style="font-weight: bold; color: black;">BigExcelWriter</strong> 来避免大数据量输出时可能会出现的内存溢出问题。</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上面的例子中，只实现了部分的样式设置，Hutool还提供了许多其它的样式，大家可以自行去尝试；并且 Hutool 也支持写出到 <em style="font-style: italic; color: black;">Web客户端下载</em> 。</p></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><em style="font-style: italic; color: black;">官方文档地址：</em>  <a href="https://www.hutool.cn/docs/#/poi/%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: rgb(239, 112, 96); border-bottom: 1px solid rgb(239, 112, 96);">Hutool 操作 Excel</a></p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">使用 EasyExcel 工具库实现导出Excel：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">EasyExcel是一个基于Java的简单、省内存的读写Excel的 <strong style="font-weight: bold; color: black;">阿里开源</strong> 项目；正如它在GitHub中项目代码介绍的那样：一个快速、简单避免OOM的java处理Excel工具。</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">测试得知 <strong style="font-weight: bold; color: black;">64M内存1分钟内读取75M(46W行25列)的Excel</strong> ；除此之外还有 <em style="font-style: italic; color: black;">急速模式</em> 能更快，但是内存占用会在100M多一点 。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">1、首先添加依赖</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;&nbsp;阿里开源的&nbsp;excel&nbsp;工具类库&nbsp;--&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.2.6<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">注意：</strong> 此依赖不能和 <em style="font-style: italic; color: black;">poi-ooxml</em> 依赖在一起用，否则运行时会报 <em style="font-style: italic; color: black;">类找不到</em> 的异常。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">2、然后使用工具类实现导出Excel</span><span class="suffix" style="display: none;"></span></h4><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">①、导出的数据模版类：</span><span class="suffix" style="display: none;"></span></h5><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.ExcelIgnore;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.ExcelProperty;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.ColumnWidth;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.ContentFontStyle;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.ContentRowHeight;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.ContentStyle;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.HeadFontStyle;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.HeadRowHeight;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.annotation.write.style.HeadStyle;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;org.apache.poi.ss.usermodel.FillPatternType;<br><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.Date;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.excel<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;DemoData<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;&nbsp;使用&nbsp;EasyExcel&nbsp;导出数据时的数据模版<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2021-01-27&nbsp;17:46<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Author</span>:&nbsp;[木子雷]&nbsp;公众号<br>&nbsp;**/</span><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;标题行&nbsp;背景设置成红色&nbsp;IndexedColors.RED.getIndex()</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@HeadStyle</span>(fillPatternType&nbsp;=&nbsp;FillPatternType.SOLID_FOREGROUND,&nbsp;fillForegroundColor&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)<br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;标题行&nbsp;字体设置成20</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@HeadFontStyle</span>(fontHeightInPoints&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">20</span>)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ContentRowHeight</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">25</span>)<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;文本内容行的高度</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@HeadRowHeight</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">30</span>)<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;标题行的高度</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ColumnWidth</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">20</span>)<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;全局的列宽</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">DemoData</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;字符串的列内容&nbsp;背景设置成天蓝&nbsp;IndexedColors.SKY_BLUE.getIndex()</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ContentStyle</span>(fillPatternType&nbsp;=&nbsp;FillPatternType.SOLID_FOREGROUND,&nbsp;fillForegroundColor&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">40</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;字符串的列内容&nbsp;字体设置成20</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ContentFontStyle</span>(fontHeightInPoints&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">20</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ExcelProperty</span>({<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"导出测试：TEST"</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"字符串标题"</span>})<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;String&nbsp;string;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ColumnWidth</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">30</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ExcelProperty</span>({<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"导出测试：TEST"</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"日期标题"</span>})<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;Date&nbsp;date;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ExcelProperty</span>({<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"导出测试：TEST"</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"数字标题"</span>})<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;Double&nbsp;doubleData;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;忽略这个字段<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ExcelIgnore</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;String&nbsp;ignore;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getString</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;string;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setString</span><span class="hljs-params" style="line-height: 26px;">(String&nbsp;string)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.string&nbsp;=&nbsp;string;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Date&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getDate</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;date;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setDate</span><span class="hljs-params" style="line-height: 26px;">(Date&nbsp;date)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.date&nbsp;=&nbsp;date;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Double&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getDoubleData</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;doubleData;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setDoubleData</span><span class="hljs-params" style="line-height: 26px;">(Double&nbsp;doubleData)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.doubleData&nbsp;=&nbsp;doubleData;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getIgnore</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;ignore;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setIgnore</span><span class="hljs-params" style="line-height: 26px;">(String&nbsp;ignore)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.ignore&nbsp;=&nbsp;ignore;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">注意：</strong> 这个数据模版类中使用了大量的 <strong style="font-weight: bold; color: black;">自定义注解</strong> ，通过使用注解可以使代码变得更加的优雅、简洁 。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">关于项目中自定义注解的实际使用可以参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzk0NjE3NDQyOA==&amp;mid=2247483917&amp;idx=1&amp;sn=94cd9159db42e8033084f88cbd4a2dc5&amp;chksm=c30b62bef47ceba85e2e6b5e65d232746efc437a42ffa3821ed20c23b5d56f45863df76bf048&amp;token=1434981870&amp;lang=zh_CN#rd" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: rgb(239, 112, 96); border-bottom: 1px solid rgb(239, 112, 96);">自定义注解的魅力你到底懂不懂</a></p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">②、实现数据导出到Excel：</span><span class="suffix" style="display: none;"></span></h5><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.excel.EasyExcel;<br><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.ArrayList;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.Date;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.List;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.excel<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;EasyExcelUtils<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;阿里巴巴&nbsp;开源的&nbsp;&nbsp;easyexcel&nbsp;工具<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2021-01-20&nbsp;16:58<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Author</span>:&nbsp;[木子雷]&nbsp;公众号<br>&nbsp;**/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">EasyExcelUtils</span>&nbsp;</span>{<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">main</span><span class="hljs-params" style="line-height: 26px;">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;导出Excel的路径</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;path&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"E:/QQPCmgr/Desktop/"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;导出Excel路径&nbsp;+&nbsp;文件名称</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;filename&nbsp;=&nbsp;path&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"EasyExcel"</span>&nbsp;+&nbsp;System.currentTimeMillis()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">".xlsx"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;导出excel<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;filename：导出excel全路径<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;DemoData.class：导出excel时的&nbsp;数据模版<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;模板：指的是导出excel的sheet页<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;data()：构造的DemoData.class数据模版的数据集合&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EasyExcel.write(filename,&nbsp;DemoData<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>).<span class="hljs-title" style="color: #c18401; line-height: 26px;">sheet</span>("模板").<span class="hljs-title" style="color: #c18401; line-height: 26px;">doWrite</span>(<span class="hljs-title" style="color: #c18401; line-height: 26px;">data</span>())</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;构造&nbsp;导出的数据<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;List&lt;DemoData&gt;&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">data</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;DemoData&gt;&nbsp;list&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList&lt;DemoData&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;i&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;&nbsp;i&nbsp;&lt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DemoData&nbsp;data&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;DemoData();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.setString(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"字符串"</span>&nbsp;+&nbsp;i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.setDate(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Date());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.setDoubleData(<span class="hljs-number" style="color: #986801; line-height: 26px;">0.56</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.add(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;list;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">记得修改代码中导出Excel的路径 path</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">导出Excel的样式是可以灵活变化的，可以自行进行设置</section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">3、导出Excel的样式如下</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210218213645.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">4、EasyExcel 导出Excel扩展：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上面导出Excel的例子中，只实现了其中一部分功能，还有很多功能由于篇幅原因没法一一展示出来，在这就简单说下支持的其它功能：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">通过设置 只导出模版数据中的指定列数据</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">通过设置 将模版数据中的列数据导出到Excel中指定的列上</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">可以将导出的数据分多个批次导入到同一个Excel中，避免大数据量时的内存溢出问题</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">导出数据的自定义格式转换，例如：日志、数字的格式转换等</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">支持将图片导出到Excel中</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">支持根据已有的Excel模版样式 将数据导出Excel</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">支持单元格合并、表格方式导出、自动列宽、设置单元格下拉、超链接等、以及插入批注</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">除了上面的导出Excel功能之外，EasyExcel还支持 <strong style="font-weight: bold; color: black;">读取Excel数据、Web客户端的上传、下载等</strong> ；</p></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><em style="font-style: italic; color: black;">官方文档地址：</em> <a href="https://www.yuque.com/easyexcel/doc/easyexcel" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: rgb(239, 112, 96); border-bottom: 1px solid rgb(239, 112, 96);">阿里开源 EasyExcel</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><em style="font-style: italic; color: black;">项目代码地址：</em> <a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; font-weight: bold; color: rgb(239, 112, 96); border-bottom: 1px solid rgb(239, 112, 96);">alibaba/easyexcel</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">EasyExcel项目代码拉取下来后，可以直接去单元测试包下，查看已提供的功能测试使用方法：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210219160301.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">您可以微信搜索 <em style="font-style: italic; color: black;">【木子雷】</em> 公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://img-blog.csdnimg.cn/img_convert/40b479dcea1ad14415027a0888256c3d.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>不能错过的CAS+volatile实现同步代码块</title>
      <link href="/2021/01/19/cas_volatile_lock/"/>
      <url>/2021/01/19/cas_volatile_lock/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.35; color: #333; font-family: Optima-Regular, PingFangTC-light; letter-spacing: 1.5px;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210119132435.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;"><span class="prefix" style="display: none;"></span><span class="content" style="display: flex; color: #4CAF50; font-size: 20px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid #1b900d; background: #fff;"><span style="color: #74b56d; font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px; margin: 0px; color: black; line-height: 26px;">最近看到有人说可以使用 <strong style="color: #399003; font-weight: bold;"><span>「</span>CAS + volatile<span>」</span></strong> 实现同步代码块。</p><span style="float: right; color: #74b56d;">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">心想，确实是可以实现的呀！因为 AbstractQueuedSynchronizer（简称 AQS）内部就是通过 CAS + volatile（修饰同步标志位state） 实现的同步代码块。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">并且ReentrantLock就是基于AQS原理来实现同步代码块的；ReentrantLock源码学习和了解AQS原理可以参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzk0NjE3NDQyOA==&amp;mid=2247483947&amp;idx=1&amp;sn=49261a16b47ecc9e629e7655bb11f10b&amp;chksm=c30b6298f47ceb8eb6724c52b8c6767b43b0b6304acada3f3535e2c5efbef633c0639834f34c&amp;token=1605614249&amp;lang=zh_CN#rd" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #399003; font-weight: normal; border-bottom: 1px solid #399003;">带你探索ReentrantLock源码的快乐 </a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">今天，咱们就通过 CAS + volatile 实现一个 <strong style="color: #399003; font-weight: bold;"><span>「</span>迷你版的AQS<span>」</span></strong> ；通过这个迷你版的AQS可以使大家对AQS原理更加清晰。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">本文主线：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">CAS操作和volatile简述</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">CAS + volatile = 同步代码块（代码实现）</p></section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;"><span class="prefix" style="display: none;"></span><span class="content" style="display: flex; color: #4CAF50; font-size: 20px;">CAS操作和volatile简述：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">通过了解CAS操作和volatile来聊聊为什么使用它们实现同步代码块。</p><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>CAS操作：</span><span class="suffix" style="display: none;"></span></h3><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">CAS是什么？</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">CAS是compare and swap的缩写，从字面上理解就是比较并更新；主要是通过 <strong style="color: #399003; font-weight: bold;"><span>「</span>处理器的指令<span>」</span></strong> 来保证操作的原子性 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">CAS 操作包含三个操作数：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">内存位置（V）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">预期原值（A）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">更新值(B)</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">简单来说：从内存位置V上取到存储的值，将值和预期值A进行比较，如果值和预期值A的结果相等，那么我们就把新值B更新到内存位置V上，如果不相等，那么就重复上述操作直到成功为止。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">例如：JDK中的 unsafe 类中的 compareAndSwapInt 方法：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">unsafe.compareAndSwapInt(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>,&nbsp;stateOffset,&nbsp;expect,&nbsp;update);<br></code></pre><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">stateOffset 变量值在内存中存放的位置；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">expect 期望值；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">update 更新值；</section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">CAS的优点：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">CAS是一种无锁化编程，是一种非阻塞的轻量级的乐观锁；相比于synchronized阻塞式的重量级的悲观锁来说，性能会好很多 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">但是注意：synchronized关键字在不断的优化下（锁升级优化等），性能也变得十分的好。</p><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>volatile 关键字：</span><span class="suffix" style="display: none;"></span></h3><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">volatile是什么？</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">volatile是java虚拟机提供的一种轻量级同步机制。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">volatile的作用：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">可以保证被volatile修饰的变量的读写具有原子性，不保证复合操作（i++操作等）的原子性；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">禁止指令重排序；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">被volatile修饰的的变量修改后，可以马上被其它线程感知到，保证可见性；</p></section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid #1b900d; background: #fff;"><span style="color: #74b56d; font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px; margin: 0px; color: black; line-height: 26px;">通过了解CAS操作和volatile关键字后，才可以更加清晰的理解下面实现的同步代码的demo程序。</p><span style="float: right; color: #74b56d;">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;"><span class="prefix" style="display: none;"></span><span class="content" style="display: flex; color: #4CAF50; font-size: 20px;">CAS + volatile = 同步代码块</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">总述同步代码块的实现原理：</p><ol data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; list-style-type: decimal; font-size: 15px; color: #595959;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">使用 volatile 关键字修饰一个int类型的同步标志位state，初始值为0；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">加锁/释放锁时使用CAS操作对同步标志位state进行更新；<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">加锁成功，同步标志位值为 1，加锁状态；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 16px; font-weight: normal; color: #595959;">释放锁成功，同步标志位值为0，初始状态；</section></li></ul></section></li></ol><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>加锁实现：</span><span class="suffix" style="display: none;"></span></h3><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">加锁流程图：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210119100901.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">加锁代码：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">&nbsp;**<br>&nbsp;*&nbsp;加锁，非公平方式获取锁<br>&nbsp;*/<br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">lock</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">while</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;CAS操作更新同步标志位</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(compareAndSetState(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将独占锁的拥有者设置为当前线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclusiveOwnerThread&nbsp;=&nbsp;Thread.currentThread();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;lock&nbsp;success&nbsp;!&nbsp;set&nbsp;lock&nbsp;owner&nbsp;is&nbsp;current&nbsp;thread&nbsp;.&nbsp;&nbsp;"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"state："</span>&nbsp;+&nbsp;state);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;睡眠一小会，模拟更加好的效果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(<span class="hljs-number" style="color: #986801; line-height: 26px;">100</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;跳出循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">break</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;TODO&nbsp;如果同步标志位是1，并且锁的拥有者是当前线程的话，则可以设置重入，但本方法暂未实现</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>&nbsp;==&nbsp;state&nbsp;&amp;&amp;&nbsp;Thread.currentThread()&nbsp;==&nbsp;exclusiveOwnerThread)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;进行设置重入锁</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;lock&nbsp;fail&nbsp;!&nbsp;If&nbsp;the&nbsp;owner&nbsp;of&nbsp;the&nbsp;lock&nbsp;is&nbsp;the&nbsp;current&nbsp;thread,"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;the&nbsp;reentrant&nbsp;lock&nbsp;needs&nbsp;to&nbsp;be&nbsp;set；else&nbsp;Adds&nbsp;the&nbsp;current&nbsp;thread&nbsp;to&nbsp;the&nbsp;blocking&nbsp;queue&nbsp;."</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将线程阻塞，并将其放入阻塞列表</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parkThreadList.add(Thread.currentThread());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LockSupport.park(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;线程被唤醒后会执行此处，并且继续执行此&nbsp;while&nbsp;循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;The&nbsp;currently&nbsp;blocking&nbsp;thread&nbsp;is&nbsp;awakened&nbsp;!"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>锁释放实现：</span><span class="suffix" style="display: none;"></span></h3><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">释放锁流程图：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210119100907.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">释放锁代码：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;释放锁<br>&nbsp;*<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;*/</span><br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">unlock</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;判断锁的拥有者是否为当前线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(Thread.currentThread()&nbsp;!=&nbsp;exclusiveOwnerThread)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throw</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;IllegalMonitorStateException(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"Lock&nbsp;release&nbsp;failed&nbsp;!&nbsp;&nbsp;The&nbsp;owner&nbsp;of&nbsp;the&nbsp;lock&nbsp;is&nbsp;not&nbsp;"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"the&nbsp;current&nbsp;thread."</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将同步标志位设置为0，初始未加锁状态</span><br>&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将独占锁的拥有者设置为&nbsp;null</span><br>&nbsp;&nbsp;&nbsp;&nbsp;exclusiveOwnerThread&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;Release&nbsp;the&nbsp;lock&nbsp;successfully,&nbsp;and&nbsp;then&nbsp;wake&nbsp;up&nbsp;"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"the&nbsp;thread&nbsp;node&nbsp;in&nbsp;the&nbsp;blocking&nbsp;queue&nbsp;!&nbsp;&nbsp;state："</span>&nbsp;+&nbsp;state);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(parkThreadList.size()&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;从阻塞列表中获取阻塞的线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread&nbsp;thread&nbsp;=&nbsp;parkThreadList.get(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;唤醒阻塞的线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LockSupport.unpark(thread);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将唤醒的线程从阻塞列表中移除</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parkThreadList.remove(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>}<br><br></code></pre><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>完整代码如下：</span><span class="suffix" style="display: none;"></span></h3><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;sun.misc.Unsafe;<br><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.lang.reflect.Field;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.ArrayList;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.List;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.concurrent.locks.LockSupport;<br><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.thread6<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;AqsUtil<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;使用&nbsp;CAS&nbsp;+&nbsp;volatile&nbsp;同步标志位&nbsp;&nbsp;=&nbsp;&nbsp;实现&nbsp;迷你版AQS&nbsp;;<br>&nbsp;*&nbsp;&lt;p&gt;<br>&nbsp;*&nbsp;&lt;p&gt;<br>&nbsp;*&nbsp;注意：本类只简单实现了基本的非公平方式的独占锁的获取与释放;&nbsp;像重入锁、公平方式获取锁、共享锁等都暂未实现<br>&nbsp;*&nbsp;&lt;p/&gt;<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2021-01-15&nbsp;10:55<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Author</span>:&nbsp;[&nbsp;木子雷&nbsp;]&nbsp;公众号<br>&nbsp;**/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">AqsUtil</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;同步标志位<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">volatile</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;state&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;独占锁拥有者<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">transient</span>&nbsp;Thread&nbsp;exclusiveOwnerThread;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;JDK中的rt.jar中的Unsafe类提供了硬件级别的原子性操作<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Unsafe&nbsp;unsafe;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;存放阻塞线程的列表<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;List&lt;Thread&gt;&nbsp;parkThreadList&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList&lt;&gt;();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;同步标志位&nbsp;的“起始地址”偏移量<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">long</span>&nbsp;stateOffset;<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsafe&nbsp;=&nbsp;getUnsafe();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取&nbsp;同步标志位status&nbsp;的“起始地址”偏移量</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stateOffset&nbsp;=&nbsp;unsafe.objectFieldOffset(AqsUtil<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>.<span class="hljs-title" style="color: #c18401; line-height: 26px;">getDeclaredField</span>("<span class="hljs-title" style="color: #c18401; line-height: 26px;">state</span>"))</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(NoSuchFieldException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throw</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Error(e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;通过反射&nbsp;获取&nbsp;Unsafe&nbsp;对象<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;Unsafe&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getUnsafe</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Field&nbsp;field&nbsp;=&nbsp;Unsafe<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>.<span class="hljs-title" style="color: #c18401; line-height: 26px;">getDeclaredField</span>("<span class="hljs-title" style="color: #c18401; line-height: 26px;">theUnsafe</span>")</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;field.setAccessible(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;(Unsafe)&nbsp;field.get(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;加锁，非公平方式获取锁<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">lock</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">while</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(compareAndSetState(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将独占锁的拥有者设置为当前线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclusiveOwnerThread&nbsp;=&nbsp;Thread.currentThread();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;lock&nbsp;success&nbsp;!&nbsp;set&nbsp;lock&nbsp;owner&nbsp;is&nbsp;current&nbsp;thread&nbsp;.&nbsp;&nbsp;"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"state："</span>&nbsp;+&nbsp;state);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;睡眠一小会，模拟更加好的效果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(<span class="hljs-number" style="color: #986801; line-height: 26px;">100</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;跳出循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">break</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;TODO&nbsp;如果同步标志位是1，并且锁的拥有者是当前线程的话，则可以设置重入，但本方法暂未实现</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>&nbsp;==&nbsp;state&nbsp;&amp;&amp;&nbsp;Thread.currentThread()&nbsp;==&nbsp;exclusiveOwnerThread)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;进行设置重入锁</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;lock&nbsp;fail&nbsp;!&nbsp;If&nbsp;the&nbsp;owner&nbsp;of&nbsp;the&nbsp;lock&nbsp;is&nbsp;the&nbsp;current&nbsp;thread,"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;the&nbsp;reentrant&nbsp;lock&nbsp;needs&nbsp;to&nbsp;be&nbsp;set；else&nbsp;Adds&nbsp;the&nbsp;current&nbsp;thread&nbsp;to&nbsp;the&nbsp;blocking&nbsp;queue&nbsp;."</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将线程阻塞，并将其放入阻塞队列</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parkThreadList.add(Thread.currentThread());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LockSupport.park(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;线程被唤醒后会执行此处，并且继续执行此&nbsp;while&nbsp;循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;The&nbsp;currently&nbsp;blocking&nbsp;thread&nbsp;is&nbsp;awakened&nbsp;!"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;释放锁<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">unlock</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(Thread.currentThread()&nbsp;!=&nbsp;exclusiveOwnerThread)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throw</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;IllegalMonitorStateException(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"Lock&nbsp;release&nbsp;failed&nbsp;!&nbsp;&nbsp;The&nbsp;owner&nbsp;of&nbsp;the&nbsp;lock&nbsp;is&nbsp;not&nbsp;"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"the&nbsp;current&nbsp;thread."</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将同步标志位设置为0，初始未加锁状态</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将独占锁的拥有者设置为&nbsp;null</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exclusiveOwnerThread&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread()&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;&nbsp;Release&nbsp;the&nbsp;lock&nbsp;successfully,&nbsp;and&nbsp;then&nbsp;wake&nbsp;up&nbsp;"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"the&nbsp;thread&nbsp;node&nbsp;in&nbsp;the&nbsp;blocking&nbsp;queue&nbsp;!&nbsp;&nbsp;state："</span>&nbsp;+&nbsp;state);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(parkThreadList.size()&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;从阻塞列表中获取阻塞的线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread&nbsp;thread&nbsp;=&nbsp;parkThreadList.get(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;唤醒阻塞的线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LockSupport.unpark(thread);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将唤醒的线程从阻塞列表中移除</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parkThreadList.remove(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;使用CAS&nbsp;安全的更新&nbsp;同步标志位<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;expect<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;update<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">compareAndSetState</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;expect,&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;update)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;unsafe.compareAndSwapInt(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>,&nbsp;stateOffset,&nbsp;expect,&nbsp;update);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>测试运行：</span><span class="suffix" style="display: none;"></span></h3><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">测试代码：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.concurrent.ExecutorService;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.concurrent.Executors;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.thread6<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;SynCodeBlock<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;简单的测试<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2021-01-15&nbsp;10:26<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Author</span>:&nbsp;[&nbsp;木子雷&nbsp;]&nbsp;公众号<br>&nbsp;**/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">SynCodeBlock</span>&nbsp;</span>{<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">main</span><span class="hljs-params" style="line-height: 26px;">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;10&nbsp;个线程的固定线程池</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExecutorService&nbsp;logWorkerThreadPool&nbsp;=&nbsp;Executors.newFixedThreadPool(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AqsUtil&nbsp;aqsUtil&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;AqsUtil();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;i&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">while</span>&nbsp;(i&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logWorkerThreadPool.execute(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Runnable()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">run</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test(aqsUtil);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">test</span><span class="hljs-params" style="line-height: 26px;">(AqsUtil&nbsp;aqsUtil)</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;加锁</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aqsUtil.lock();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"正常的业务处理"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;释放锁</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aqsUtil.unlock();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">运行结果：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid #1b900d; background: #fff;"><span style="color: #74b56d; font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px; margin: 0px; color: black; line-height: 26px;">例如上面测试程序启动了10个线程同时执行同步代码块，可能此时只有线程 thread-2 获取到了锁，其余线程由于没有获取到锁被阻塞进入到了阻塞列表中；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px; margin: 0px; color: black; line-height: 26px;">当获取锁的线程释放了锁后，会唤醒阻塞列表中的线程，并且是按照进入列表的顺序被唤醒；此时被唤醒的线程会再次去尝试获取锁，如果此时有新线程同时尝试获取锁，那么此时也存在竞争了，这就是非公平方式抢占锁（不会按照申请锁的顺序获取锁）。</p><span style="float: right; color: #74b56d;">❞</span></blockquote><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/grass-green.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>扩展：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">上面的代码中没有实现线程自旋操作，下面看看该怎么实现呢？</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;"><strong style="color: #399003; font-weight: bold;"><span>「</span>首先说说为什么需要自旋操作：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">因为在某些场景下，同步资源的锁定时间很短，如果没有获取到锁的线程，为了这点时间就进行阻塞的话，就有些得不偿失了；因为进入阻塞时会进行线程上下文的切换，这个消耗是很大的；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">使线程进行自旋的话就很大可能会避免阻塞时的线程上下文切换的消耗；并且一般情况下都会设置一个线程自旋的次数，超过这个次数后，线程还未获取到锁的话，也要将其阻塞了，防止线程一直自旋下去白白浪费CPU资源。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;">代码如下：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210119100839.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #4CAF50;"><span class="prefix" style="display: none;"></span><span class="content" style="display: flex; color: #4CAF50; font-size: 20px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 20px; height: 10px; border-top-left-radius: 20px; border-top-right-radius: 20px; background: RGBA(76, 175, 80, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 16px; word-spacing: 2px;">您可以微信搜索 <strong style="color: #399003; font-weight: bold;"><span>「</span>木子雷<span>」</span></strong> 公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://img-blog.csdnimg.cn/img_convert/40b479dcea1ad14415027a0888256c3d.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一次对group by时间导致的慢查询的优化</title>
      <link href="/2021/01/04/group_by_time/"/>
      <url>/2021/01/04/group_by_time/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210103145348.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">最近在测试环境中点击一个图表展示页面时，半天才得到后台响应的数据进行页面渲染展示，后台的响应很慢，这样极大的降低了用户的体验；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">发现这个问题后马上进行了排查 ，通过排查发现是由一个查询很慢的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>group by<span>」</span></strong> 语句导致的；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>本文主线：<span>」</span></strong></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">①、简单描述下排查步骤；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">②、对 group by 查询慢进行优化；</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">简单描述下排查步骤：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">排查主要分为了两个步骤：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">后台接口的监控，看看哪个方法调用时耗时多</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">数据库开启慢查询日志，记录执行很慢的SQL</section></li></ul><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">推荐使用阿里开源的Java线上诊断工具 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Arthas<span>」</span></strong>  ，使用其 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>trace<span>」</span></strong> 命令统计方法调用链路上各个方法节点的耗时；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Arthas 工具的具体使用方法可参考： <a href="https://mp.weixin.qq.com/s?__biz=Mzk0NjE3NDQyOA==&amp;mid=2247483726&amp;idx=1&amp;sn=97f97c8ee49054b7705c66e35b1166a2&amp;chksm=c30b61fdf47ce8eb8290e01d116d4950ec197f3475c5d2aadeb714ff1430a91003fe16484145&amp;token=1746062809&amp;lang=zh_CN#rd" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">线上服务响应时间太长的排查心路</a>  ；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通过使用Arthas工具统计到一个进行数据库的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>group by查询<span>」</span></strong> 方法耗时很严重；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">为了进一步确定是这个查询SQL 很耗时，将MySql 的慢查询日志开启了，然后再次调用后台这个接口，发现慢查询日志中确实存在了这个SQL语句；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>SQL语句如下：<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">YEAR</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;t_test_log<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">GROUP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ORDER</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;createts&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DESC</span><br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">这个SQL语句是用来统计表中所有数据被创建时的年份；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">下面就来聊聊这个SQL为什么会比较慢，然后进行了怎样的优化；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">对 group by 查询慢进行优化：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">在优化group by查询的时候，一般会想到下面这两个名词，通过下面这两种索引扫描可以高效快速的完成group by操作：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">松散索引扫描（Loose Index Scan）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">紧凑索引扫描（Tight Index Scan）</section></li></ul><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">group by操作在没有合适的索引可用时，通常先扫描整个表提取数据并创建一个临时表，然后按照group by指定的列进行排序；在这个临时表里面，对于每一个group 分组的数据行来说是连续在一起的。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">完成排序之后，就可以得到所有的groups 分组，并可以执行聚集函数（aggregate function）。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">可以看到，在没有使用索引的时候，需要创建临时表和排序；那在执行计划的 Extra 额外信息中通常就会看到这些信息 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Using temporary; Using filesort<span>」</span></strong>  出现 。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>1、首先查看下SQL的执行计划：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">得到这个慢查询的SQL后，马上使用 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>explain<span>」</span></strong> 关键字分析其执行计划：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210102171855.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通过查看执行计划发现，这个SQL语句走的是 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>全表扫描<span>」</span></strong> ，并且通过扫描了大概 99974 行记录后才得到最终的结果集，并且执行过程中使用到了临时表和文件辅助排序；</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>2、SQL执行计划内容简述：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>查看执行计划时，主要看上图中花圈的那三项数据即可：<span>」</span></strong></p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">type：访问类型，这是sql查询优化中一个很重要的指标，结果值从好到坏依次是：</p><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210102173022.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Rows：数据行，根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Extra：额外信息，SQL执行时十分重要的额外信息，简单说几个常会出现的值：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">Using filesort ： 未利用到索引的默认排序，需要使用文件辅助进行排序，出现其说明SQL性能不好；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">Using temporary：使用临时表保存中间结果，常见于 group by ，出现其说明SQL性能不好；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">Using index： 说明可以直接在索引树上就能得到最终的值，避免了回表，出现其说明SQL性能很好；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">Using index for group-by：表示使用了 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>松散索引扫描<span>」</span></strong> ，出现其说明SQL性能很好；因为松散索引扫描只需要读取很少量的数据就可以完成group by操作，所以执行效率非常高；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">select tables optimized away： 在没有group by子句的情况下，基于索引优化 MIN/MAX 聚合函数操作，不必等到执行阶段在进行计算，查询执行计划生成的阶段即可完成优化，出现其说明SQL性能达到最优，往往配合 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>type访问类型的system<span>」</span></strong> 出现；</section></li></ul></section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>3、建立索引后再查看执行计划：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">上面通过查看执行计划得知，因为没有创建相应的索引，所以走的是全表扫描，性能最差；然后对 createts 字段创建索引；再查看其执行计划：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210102171900.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通过查看创建索引后的执行计划发现，此次查询走的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>索引全扫描<span>」</span></strong> ，此次虽然从全表扫描优化到了索引全扫描，但是还是需要通过扫描了大概 99974 行记录后才得到最终的结果集，性能并没有提升太多；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">并且发现 Extra 信息中还是存在  <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Using temporary; Using filesort<span>」</span></strong> ，说明没有使用到 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>松散索引扫描或紧凑索引扫描<span>」</span></strong> ；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">然后再次分析下SQL语句：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">YEAR</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;t_test_log<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">GROUP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ORDER</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;createts&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DESC</span><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">发现SQL中对索引字段 createts 做了 date_format 函数运算，所以才导致没使用上松散索引扫描或紧凑索引扫描；然后需要重写下SQL 。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>4、通过改写SQL进行优化：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">改写后的SQL如下：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;&nbsp;createts<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;&nbsp;t_test_log<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">GROUP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;&nbsp;&nbsp;createts<br>&nbsp;)&nbsp;t_test_log_1<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">GROUP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ORDER</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;createts&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DESC</span><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">改写完SQL后重新执行，发现查询速度快了非常多，性能上有了质的飞跃；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">然后又查看了下它的执行计划如下：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210102223002.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">查看上面那个嵌套查询SQL语句的执行计划，子查询部分的通过扫描大概52行记录就能得到结果集，相比于一开始需要扫描 99974 行 记录才能得到结果集，这个性能快了太多了；并且子查询的 Extra 信息中出现了 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Using index for group-by<span>」</span></strong> ，说明使用到了松散索引扫描，效率才提升了这么多；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">外查询对子查询（52行记录）的结果集再次进行分组排序，此时采用的是全表（全结果集）的查询， <strong style="color: #3594F7; font-weight: bold;"><span>「</span>如果结果集很大的话，效率不会很高<span>」</span></strong> ；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">所以，在使用此优化方案的SQL语句时，需要统计下子查询的结果集的大小，如果子查询结果集很大的话，就不建议使用此方案了，可以尝试使用下面的这种优化方案；</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>5、通过 改写SQL + 改写代码 进行优化：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">上面优化方案，只需改写SQL即可，无需对代码进行修改；本优化方案既要改写SQL，还要进行代码的修改；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">改写后的SQL如下： 这个SQL是查询出表中最小年份和最大年份</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">(<br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;t_test_log<br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ORDER</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;&nbsp;createts<br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">LIMIT</span>&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span><br>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">UNION</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ALL</span><br>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;&nbsp;t_test_log<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ORDER</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">BY</span><br>&nbsp;&nbsp;&nbsp;createts&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DESC</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">LIMIT</span>&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span><br>&nbsp;)<br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">查看下上面这个SQL语句的执行计划：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210102234623.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">上面这个SQL是利用索引的默认排序，直接获取排序后的第一条记录，只需要扫描一行记录（rows ：1）就能获取到最终的结果集；所以此SQL的性能是非常好的 。</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">但是需要记住，这个SQL查询出的结果集不是最终需要的数据，需要 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>写代码<span>」</span></strong> 计算出最终的结果集：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">得到的最大最小年份这两个值 一样：说明表中的数据都是属于一个年份的</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">得到的最大最小年份这两个值不一样：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">两个值相减得一：说明年份是挨着的两个年份，可以直接将结果集返回；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">两个值相减大于一：说明最小年份和最大年份之间还存在年份，通过计算得出中间年份</section></li></ul></section></li></ul><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但是注意，通过写代码计算出最终的年份，这种方式还是存在一个问题的，那就是确实表中根本没有中间年份的数据，但是通过计算却得出了；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">举例说明：假如通过SQL查询出了最小年份和最大年份是2018和2021，那么再通过代码计算出中间年份2019和2020，但是表中数据根本就不存在2019年份的数据，这是就会出现问题了；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>所以这种方案也需要根据自己具体的业务场景和实际的数据情况等分析是否需要采用 。<span>」</span></strong></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">扩展：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">在通过 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>改写SQL + 改写代码<span>」</span></strong> 进行优化时，改写的SQL不止上面那一种，还有一种查询效率也比较高的改写SQL；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">就是使用 min、max 聚合函数进行改写SQL，但是在使用聚合函数时，可以写出下面两种样式的SQL，到底哪种改写SQL效率是比较高呢，留个悬念，大家可以自行去分析尝试下哟！ <strong style="color: #3594F7; font-weight: bold;"><span>「</span>可以在评论区留下你的答案呀！<span>」</span></strong></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>第一种改写SQL方式：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">(<br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">min</span>(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>))&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;t_test_log<br>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">UNION</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ALL</span><br>&nbsp;&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">max</span>(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(createts,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>))&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;&nbsp;t_test_log<br>&nbsp;&nbsp;&nbsp;)<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>第二种改写SQL方式：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">(<br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(minyear,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">min</span>(createts)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;minyear<br>&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;&nbsp;&nbsp;t_test_log<br>&nbsp;&nbsp;)&nbsp;t_test_log_1<br>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">UNION</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ALL</span><br>&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">date_format</span>(maxyear,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'%Y'</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">years</span><br>&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;&nbsp;(<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">SELECT</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">max</span>(createts)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">AS</span>&nbsp;maxyear<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">FROM</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t_test_log<br>&nbsp;&nbsp;&nbsp;)&nbsp;t_test_log_2<br>&nbsp;&nbsp;&nbsp;)<br></code></pre><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索【木子雷】公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127105439.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不看后悔的项目中线程池实际应用</title>
      <link href="/2021/01/01/thread_pool_use/"/>
      <url>/2021/01/01/thread_pool_use/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229211029.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">最近在看线程池方面的内容，结合源码学习完其内部原理后，心想自己在项目中有实际使用过线程池吗？</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">想了想，确实在项目中很多地方使用到了线程池；下面来简单聊下最近在日志方面中多线程的应用：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">服务接口日志异步线程池化入库处理</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">定时任务中使用多线程进行日志清理</section></li></ul><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229093145.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>本文主线：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">①、线程池基本原理解读；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">②、线程池实际应用例子：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">线程池应用 Demo 项目结构描述</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">服务接口日志异步线程池化入库处理</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">定时任务中使用多线程进行日志清理</p></section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">线程池基本原理解读：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">啥也不说，先贴一张脑图，通过脑图对线程池快速的进行了解；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">除了看图外，也可以通过此文章<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">《ava线程池实现原理及其在美团业务中的实践》</a>进行线程池的了解；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229100001.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">线程池实际应用例子：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">下面就来聊聊最近在项目日志中线程池的应用；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>线程池应用Demo项目描述：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Demo 地址：https://github.com/leishen6/springboot_log</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">上面说的两种日志方面线程池应用已经写好了Demo，是一个 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>SpringBoot<span>」</span></strong> 项目，项目结构如下图：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201227215415.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>服务接口日志异步线程池化入库处理：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">后台服务接口项目中，经常需要对接口的请求报文和响应报文日志做入库保存；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">下面将通过对比 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>普通方式入库操作和线程池方式入库操作<span>」</span></strong> ，来说说为什么线程池式入库更加优雅；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>普通方式入库操作：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">普通入库就是直接进行完业务逻辑处理并构建好响应后同时将日志进行入数据库，入库成功后再将响应返回；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>流程图如下：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229192010.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">但是这样存在一个很大的弊端就是由于多了一次数据库操作（日志入库），进而可能会导致响应速度比较慢；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">下面就聊聊怎么通过线程池对日志入库进行优化，提升接口的响应速度；</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>线程池方式入库操作：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">线程池方式入库，可以将日志直接放入到队列中，然后就直接返回响应，最后使用线程池中的线程取出队列中的日志数据异步做入库操作；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>流程图如下：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229192013.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">使用线程池方式，处理请求的主线程可以将日志放入到队列后，直接将响应返回，然后再使用线程池中的线程取出队列中的日志数据异步的将其进行入库；由于减少了一次数据库操作，会极大的提升接口响应速度。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>下面来看看代码实现：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">1、上面说到的存放请求报文和响应报文日志的队列： <strong style="color: #3594F7; font-weight: bold;"><span>「</span>LinkedBlockingDeque<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;基于链表的双向阻塞队列，在队列的两端都可以插入和移除元素，是线程安全的，多线程并发下效率更高</span><br>BlockingQueue&lt;TestLogBean&gt;&nbsp;queue&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;LinkedBlockingDeque&lt;TestLogBean&gt;(MAX_QUEUE_SIZE);<br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">除了 LinkedBlockingDeque 阻塞队列外，还有一些其它经常会用到的阻塞队列，如下图：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229140859.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">2、项目中进行日志入库操作的线程池： <strong style="color: #3594F7; font-weight: bold;"><span>「</span>单线程的线程池 + 固定数线程的线程池<span>」</span></strong></p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">单线程的线程池：用来循环的监听队列中的日志数量以及决策什么时候将队列中的日志取出交由固定数线程的线程池做入库操作；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">固定数线程的线程池：主要用来进行日志的入库操作；</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>部分代码实现如下：<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;&nbsp;初始化<br>&nbsp;*/</span><br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">init</span><span class="hljs-params" style="line-height: 26px;">()</span></span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;基于链表的双向阻塞队列，在队列的两端都可以插入和移除元素，是线程安全的，多线程并发下效率更高</span><br>&nbsp;&nbsp;&nbsp;&nbsp;queue&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;LinkedBlockingDeque&lt;TestLogBean&gt;(MAX_QUEUE_SIZE);<br>&nbsp;&nbsp;&nbsp;&nbsp;lastExecuteTime&nbsp;=&nbsp;System.currentTimeMillis();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"LogPoolManager&nbsp;init&nbsp;successfully......"</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;logManagerThreadPool.execute(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Runnable()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">run</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">while</span>&nbsp;(run.get()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;线程休眠，具体时间根据项目的实际情况配置</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(SLEEP_TIME);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"log&nbsp;Manager&nbsp;Thread&nbsp;sleep&nbsp;fail&nbsp;"</span>,&nbsp;e);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;满足存放了10个日志&nbsp;&nbsp;或&nbsp;&nbsp;满足时间间隔已经大于设置的最大时间间隔时&nbsp;&nbsp;执行日志插入</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(logCount.get()&nbsp;&gt;=&nbsp;BATCH_SIZE&nbsp;||&nbsp;(System.currentTimeMillis()&nbsp;-&nbsp;lastExecuteTime)&nbsp;&gt;&nbsp;MAX_EXE_TiME)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(logCount.get()&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"begin&nbsp;drain&nbsp;log&nbsp;queue&nbsp;to&nbsp;database..."</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;TestLogBean&gt;&nbsp;list&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList&lt;TestLogBean&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;drainTo&nbsp;():&nbsp;一次性从BlockingQueue获取所有可用的数据对象（还可以指定获取数据的个数），<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;将取出的数据放入指定的list集合中<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.drainTo(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;任务队列&nbsp;中任务数量置为0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logCount.set(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;从线程池中取出线程执行日志插入</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logWorkerThreadPool.execute(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;InsertThread(testLogService,&nbsp;list));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"end&nbsp;drain&nbsp;log&nbsp;queue&nbsp;to&nbsp;database..."</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取当前执行的时间</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastExecuteTime&nbsp;=&nbsp;System.currentTimeMillis();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"LogPoolManager&nbsp;shutdown&nbsp;successfully"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;});<br>}<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">本项目中测试服务接口日志异步线程池化入库处理，项目启动后，在浏览器输入下面URL，并刷新页面即可：</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">http://127.0.0.1:8081/v1/api/log/test</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>定时任务中使用多线程进行日志清理：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">当日志表中的数据量过多，占用了太多的磁盘空间，导致磁盘不断的告警，此时需要对日志表进行瘦身；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">此时可以使用多线程将日志表中部分数据清理掉，释放磁盘空间；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">日志表中哪些数据需要清理掉呢？下面这个场景就可能会在需求中出现：</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">领导说需要保留日志表中最新一年的数据，就是从当前日期向前推365天；例如：今天2020-12-30，向前推365天的日期是2019-12-30，所以2019-12-30之前生成的日志都需要清理掉；</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">下面来看代码，由于需要尽可能保证程序的灵活性，所以需要将删除的表名，根据删除的字段等进行灵活的配置；配置参数如下图：  <strong style="color: #3594F7; font-weight: bold;"><span>「</span>application-cleanLog.properties<span>」</span></strong> 配置文件</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">## 线程池大小threads.pool.num=8<h2 id="需要进行清理的表"><a href="#需要进行清理的表" class="headerlink" title="需要进行清理的表"></a>需要进行清理的表</h2><p>log.clean.table=t_test_log</p><h2 id="清理时根据的字段"><a href="#清理时根据的字段" class="headerlink" title="清理时根据的字段"></a>清理时根据的字段</h2><p>log.clean.filed=createts</p><h2 id="每次清理的数据量大小"><a href="#每次清理的数据量大小" class="headerlink" title="每次清理的数据量大小"></a>每次清理的数据量大小</h2><p>log.clean.batchCount=1000</p><h2 id="每次定时清理时-循环清理的次数"><a href="#每次定时清理时-循环清理的次数" class="headerlink" title="每次定时清理时 循环清理的次数"></a>每次定时清理时 循环清理的次数</h2><p>log.clean.batchNum=6</p><h2 id="需保留据当前多少天的最新数据，其余的数据才可以被清理掉"><a href="#需保留据当前多少天的最新数据，其余的数据才可以被清理掉" class="headerlink" title="需保留据当前多少天的最新数据，其余的数据才可以被清理掉"></a>需保留据当前多少天的最新数据，其余的数据才可以被清理掉</h2><p>log.clean.dateNum=1<br></code></pre></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>注意：<span>」</span></strong></p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">线程池大小需要结合服务器硬件配置和实际的业务日志量大小进行合理配置；如果设置的过大，可能会占用过多的内存和频繁的进行上下文切换，从而可能导致效率变低；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">本项目中是根据日期字段进行数据清理的，如果表已经根据日期进行了分区，可以直接根据分区进行清理，分区清理速度更加快些，但是按分区进行删除本项目中暂未实现；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">每次清理的数据量大小：指的是进行一次 delete 时需要删除的数据量；建议不要设置的太大，因为删除的数据量太大的话，可能会导致锁表，从而影响表的正常查询、新增等操作；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">定时任务执行时循环清理的次数：指的是定时任务执行时进行几次 delete 操作；上面有说道 每次delete的数据量别设置太大，那么在总清理的数据量不变的情况下，就需要将清理的次数设置大些；</p><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>总清理的数据量 = 每次清理的数据量大小 * 清理的次数<span>」</span></strong></p></section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">多线程进行日志清理的流程图如下所示：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201229113216.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>下面来看看代码实现：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">部分代码实现如下所示：</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;&nbsp;多线程清理日志启动<br>&nbsp;*/</span><br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">cleanLogStart</span><span class="hljs-params" style="line-height: 26px;">()</span></span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;循环进行日志清理的次数</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;whileNum&nbsp;=&nbsp;props.getInt(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"log.clean.batchNum"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;LogCleanBean&nbsp;logClean&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">while</span>&nbsp;(whileNum&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>){<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;查询符合每次删除数据量的时间段</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;list&nbsp;=&nbsp;logCleanService.selectTime(logCleanBean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(list&nbsp;!=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;&amp;&amp;&nbsp;list.size()&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logClean&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;LogCleanBean();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logClean.setTableName(logCleanBean.getTableName());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logClean.setFieldName(logCleanBean.getFieldName());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取可以删除日志的最小生成时间</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logClean.setMinTime(list.get(list.size()-<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取可以删除日志的最大生成时间</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logClean.setMaxTime(list.get(<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logCleanBean.setMinTime(logClean.getMinTime());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;此次查询已经不满足设置的每次清理的数据量大小了，说明已经清理干净了</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(list.size()&nbsp;&lt;&nbsp;logCleanBean.getBatchCleanCount()){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whileNum&nbsp;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;清理次数进行递减</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--whileNum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;进行多线程处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cleanManagerThreadPool.execute(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;CleanThread(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.logCleanService,&nbsp;logClean));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>扩展：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">本项目中使用 delete 并且根据时间字段进行的数据删除，如果是 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>MySql 数据库<span>」</span></strong> 的话，则在删除数据后去查看磁盘空间的话，发现可用磁盘空间并没有增多，并且可用磁盘空间还有可能减少了呢，why  为什么？</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">因为在 InnoDB 存储引擎中，delete 其实并不会真的把数据删除，mysql 实际上只是给删除的数据打了个标记为已删除，因此 delete 删除表中的数据时，表文件在磁盘上所占空间不会变小，存储空间不会被释放，只是把删除的数据行设置为不可见。然未释放磁盘空间，但是下次插入数据的时候，仍然可以重用这部分空间（重用 → 覆盖）。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">并且由于在 delete 删除数据时，会记录 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>binlog日志<span>」</span></strong> 等，如果删除的数据中存在 Text和BLOB 等大字段，可能日志文件会变得额外的大，占用部分磁盘空间 ，这就会导致 free 磁盘空间的进一步减少；</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>解决方案：<span>」</span></strong></p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">如果删除的数据中不存在Text和BLOB 等大字段，可以直接不用管，直接覆盖使用，并且等待MySql 的自动清理操作即可，但是需要一定时间；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">可以在delete操作以后使用 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>optimize table table_name<span>」</span></strong> 会立刻释放磁盘空间。但是，由于optimize执行时会将表锁住，所以不要在高峰期使用，也不要经常使用；因为其会阻塞正常的查询、更新等操作的。</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">也可以使用 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>truncate 、drop<span>」</span></strong> 进行数据的删除，<strong style="color: #3594F7; font-weight: bold;"><span>「</span>快速释放磁盘空间<span>」</span></strong>；具体结合当前项目的实际情况进行选择 。</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">-- END --</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">本文中介绍了在日志处理场景中线程池的使用场景，除此之外，还有很多场景使用到了线程池，并且在很多框架中也使用到了线程池，大家也可以通过阅读框架源码学习线程池的使用方法。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索【木子雷】公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127105439.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排查压测问题引发的系统性能调优过程</title>
      <link href="/2020/12/14/performance_tuning/"/>
      <url>/2020/12/14/performance_tuning/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; color: black; padding: 0 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211233511.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">今天测试部门的小梦找到我，委屈巴巴的说我写的接口有问题，因为她对这个接口进行压力测试时，发现系统的吞吐量一直上不去，并且 <strong style="font-weight: bold; color: black;">应用服务器 （部署接口项目的服务器）</strong> 的CPU、内存等资源的使用率也一直很低，导致一直无法测试出这个接口的压力峰值。</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201210163829.gif" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">听小梦说完后，自己心想接口都测试了好几遍了，<strong style="font-weight: bold; color: black;">接口代码</strong> 绝对不可能有问题的，再说了，有问题也不能承认呀，看来得往别的地方上扯扯呀；然后我说道，接口应该是没问题的，可能是项目环境部署时有些参数没进行调优吧，例如：连接数大小设置、JVM参数设置、数据库参数优化等；</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201210164537.gif" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">然后我接着说道，项目是谁给你部署配置的呀，小梦说是小王部署的，然后今天小王也没来上班；我说道，小王没来上班呀，没事，让我来，我这bug绝缘体质，任何问题遇到我都会退避三舍的。</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201210164833.gif" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上面的情景，我相信大家都可能会遇到过的；接下来我们就通过这次排查压测问题来聊聊一个 <strong style="font-weight: bold; color: black;">单体系统</strong> 的性能优化应该考虑哪些点，以及对这些点该怎么进行调优 。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">本文主线如下图：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201212133509.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">项目部署环境：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">在进行这次压测问题排查前，先通过下图了解下 接口项目的情况、项目部署的环境、JMeter测试脚本 的配置情况；</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201210193433.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">上图中的接口项目、Redis、MySql  都是单机安装部署的 。</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;"><strong style="font-weight: bold; color: black;">注意：</strong> 再进行下文之前，我们还需要记住一个前提：本项目中的接口代码是不存在问题的，并且数据库查询SQL都是最优的，都是走索引查询的，本次压力测试问题不是由于代码导致的，而是由于各种参数未调优造成的；代码调优和SQL调优在编码阶段就已经完成了。</p></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">简单性能调优的点：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">在上文中的项目部署情况和测试脚本的配置情况下进行压力测试时，就出现了小梦说的系统吞吐量上不去，以及应用服务器（部署接口项目的服务器）的 CPU 等资源使用率都很低的情况；</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">查看 JMeter 测试时系统的吞吐量如下图：</strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201210193813.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">查看应用服务器（部署接口项目的服务器）的CPU使用率很低：</strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201210194603.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">按照测试脚本的50个并发以及接口中含有计算密集型操作（加解密和验签）的情况，CPU是不应该这么低的；哎！什么鬼嘛？</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120131302.gif" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">别急，下面我们就展开具体的排查过程，并在排查过程中逐步了解各个调优的点；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">排查过程就是按照文章开头中的 <strong style="font-weight: bold; color: black;">本文主线</strong> 图片中 <strong style="font-weight: bold; color: black;">简单性能调优的点</strong> 展开的 。</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">排查Tomcat连接器参数配置：</span><span class="suffix" style="display: none;"></span></h3><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">Tomcat 连接器参数配置只需要考虑以下几个方面：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">Connector使用哪种 protocol 协议</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">HTTP/1.1：默认值，使用的协议与Tomcat版本有关</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;"><strong style="font-weight: bold; color: black;">建议使用 NIO2</strong>：org.apache.coyote.http11.Http11Nio2Protocol</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">除了NIO2协议外，还有 BIO、NIO、APR 协议，可以自行去查阅资料；</p></section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">acceptCount：等待队列的长度；当等待队列中连接的个数达到acceptCount时，说明队列已满，再进来的请求一律被拒绝；默认值是100。</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">maxConnections：Tomcat 在任意时刻接收和处理的最大连接数；</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">当连接数达到最大值maxConnections后，Tomcat会继续接收连接，直到accept等待队列填满。</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">如果最大连接数设置为-1，则表示禁用maxconnections功能，表示不限制tomcat容器的连接数；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">最大连接数默认值与连接器使用的 protocol  协议有关：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">NIO的默认值是10000；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">APR/native的默认值是8192；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">BIO的默认值为maxThreads（如果配置了Executor，则默认值是Executor的maxThreads）；</section></li></ul></section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">maxThreads：每一次HTTP请求到达 Tomcat，都会创建一个线程来处理该请求，那么最大线程数决定了Tomcat 可以同时处理多少个请求。</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">maxThreads 默认200;</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">建议：maxThreads应该设置大些，以便能够充分利用CPU；当然，也不是越大越好，如果maxThreads过大，那么CPU会花费大量的时间用于线程的上下文切换，整体效率可能会降低；这需要根据自己项目的情况和服务器硬件配置情况配置合适的值即可；</section></li></ul></section></li></ul><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">下面就是本次压测时配置的Tomcat连接器参数：</span><span class="suffix" style="display: none;"></span></h5><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">Connector</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">port</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"8080"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">protocol</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"org.apache.coyote.http11.Http11Nio2Protocol"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">maxThreads</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"1000"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">maxConnections</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"2000"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">acceptCount</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"1000"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">connectionTimeout</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"20000"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">redirectPort</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"8443"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">enableLookups</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"false"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">maxPostSize</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"10485760"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">compression</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"on"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">disableUploadTimeout</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"true"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">compressionMinSize</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"2048"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">acceptorThreadCount</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"2"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">compressableMimeType</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"text/html,text/xml,text/css,text/javascript"</span>&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">URIEncoding</span>=<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"utf-8"</span>&nbsp;/&gt;</span><br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上面连接器中配置参数：的</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">连接器使用的 protocol 协议是 NIO2</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">最大线程数 maxThreads="1000"</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">最大连接数 maxConnections="2000"</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">等待队列大小 acceptCount="1000"</section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">根据上面连接器配置参数，和压测脚本配置的并发请求才50个，确定压测问题应该不是由于连接器参数造成的。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">其实在查看Tomcat配置文件 <strong style="font-weight: bold; color: black;">server.xml</strong> 中的连接器参数前，可以使用下面这个命令先直接统计出 JMeter与Tomcat建立的Http连接数： 注意 8080 指的是 Tomcat 端口号，使用前改成你的Tomcat配置的端口</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">netstat&nbsp;-pan&nbsp;|&nbsp;grep&nbsp;8080&nbsp;|&nbsp;wc&nbsp;-l<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">如果统计出的连接数与测试脚本中配置的并发数的话差不多一致的话，说明当前连接器是可以满足连接请求处理的，初步可以判断不是由于连接器参数造成的本次压测问题；然后再可以去查看配置文件中的参数进行确认下。</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201213002623.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">排查 JVM 参数配置：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">JVM参数配置，一般并发不高的系统只需要配置下Heap堆内存的大小即可，其余使用默认配置即可。</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">注意：JVM 参数配置比较复杂，这块的参数调优需要根据具体项目情况、服务器硬件配置等进行合理配置。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">查看当前压测的接口项目 JVM 配置参数：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">直接使用命令查看：</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">ps&nbsp;-ef&nbsp;|&nbsp;grep&nbsp;tomcat<br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">结果如下：</p><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211190048.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">也可以直接去 <strong style="font-weight: bold; color: black;">catalina.sh</strong> 配置文件中查看：</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">JAVA_OPTS="&nbsp;-server&nbsp;-Xms6000m&nbsp;-Xmx6000m&nbsp;"<br></code></pre></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">也可以直接通过 <strong style="font-weight: bold; color: black;">jmap</strong> 命令查看 JVM 的堆的配置信息：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：下面命令中的 <strong style="font-weight: bold; color: black;">129761</strong> 是tomcat的 pid 进程号；</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">jmap&nbsp;-heap&nbsp;129761<br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">结果如下：</p><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211190844.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">看到这，应该会有人问，为什么你的初始堆大小和最大堆大小（-Xms6000m -Xmx6000m）设置为一样呢？</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">因为如果虚拟机启动时设置的初始堆内存比较小，这个时候又需要初始化很多对象数据，那么虚拟机就必须不断地扩大堆内存，这样也会产生一些消耗的。</p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">排查下是否由于JVM参数配置的不合理导致：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用上面提到的 jmap 命令查看下当前堆内存的使用情况</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">jmap&nbsp;-heap&nbsp;129761<br></code></pre><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211191918.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">通过查看上面的堆内存的使用情况，发现还有很多空间使用呢，应该不是由于JVM参数不合理导致的压测问题；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">但是咱别着急，咱再查看下JVM中垃圾回收GC的情况；</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用命令 <strong style="font-weight: bold; color: black;">jstat</strong> 查看垃圾回收GC的情况：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：129761 为Tocamt的pid； 1000 表示间隔时间毫秒，10 表示输出10次GC情况</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">jstat&nbsp;-gc&nbsp;129761&nbsp;1000&nbsp;10<br></code></pre><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211192816.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">看了上面的GC情况，发现垃圾回收也没什么异常，FGC总共就3次，通过查看的堆使用情况和GC垃圾回收的情况可以确认压测的问题不是由于JVM的参数导致的。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">看来这次压测的问题挺棘手呀，到现在还没有确认出问题原因呢！难道我这bug绝缘体质由于 <strong style="font-weight: bold; color: black;">今天吃的比较多</strong>，导致失效了吗？ 皱眉  ing . . . . .</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201212152513.gif" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">看来还得接着排查，咱直接导出当前接口服务应用进程的 <strong style="font-weight: bold; color: black;">线程堆栈信息</strong> 看看吧。</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用命令jstack导出线程栈信息：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：129761 为Tomcat 的pid， /usr/local/test.log 为生成的线程堆栈文件 test.log 的存放地址</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">jstack&nbsp;129761&nbsp;&gt;&gt;&nbsp;/usr/local/test.log<br></code></pre></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">导出线程堆栈信息后，使用命令搜索出状态为 WAITING 的线程；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：找 State 为 <strong style="font-weight: bold; color: black;">WAITING</strong> 状态的线程；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">命令如下：test.log 文件为刚刚导出的 线程堆栈信息文件</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">cat&nbsp;test.log&nbsp;|&nbsp;grep&nbsp;-n20&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;WAITING&nbsp;"</span><br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">在命令执行后的搜索结果中发现了下图内容：</p><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211194936.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">注意：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">除了线程状态为 WAITING  的之外，还特别要注意 WAITING 状态线程的方法调用栈中存在项目业务代码的；</p></blockquote><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">上面图片中就展示了线程状态为 WAITING  等待的调用方法栈中有业务代码；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">业务代码是去Redis中查询数据，上图中第二个圈中的内容就是业务代码，并且这行代码上方是去Redis连接池中获取连接，由此确定是由于Redis连接获取不到，导致线程处于 WAITING 等待状态；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">由于接口服务系统中很多线程获取不到Redis连接导致阻塞，从而无法充分利用CPU；所以在压测时，服务器CPU的使用率也压不上去，CPU的使用率很低；</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">至此，终于排查出了一处问题地方，不容易呀，感觉排查问题比写代码困难多了！</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201212225813.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上面通过线程的堆栈信息排查出 Redis 连接不够用，应该是 Redis 连接池中的最大连接数配置的比较小，那接下来就确定下连接池的配置数据。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">排查连接池参数配置：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上文中，在线程的堆栈信息中排查出存在很多线程由于获取不到Redis连接导致处于等待阻塞状态；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">接下来，咱们就来具体统计下现在处于压测中的应用服务器（部署接口项目的服务器）与Redis建立的连接数，顺带一起再排查下项目中使用的MySql 的连接池配置是否也存在问题？</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用命令查看当前压测中的应用服务器与Redis建立的连接数</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：6379 为 redis的端口号</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">netstat&nbsp;-pan&nbsp;|&nbsp;grep&nbsp;6379&nbsp;|&nbsp;wc&nbsp;-l<br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">执行命令查询出与Redis建立的连接数为 10，这在测试脚本50个并发请求下是一定不够用的呀，应该是配置的Redis连接池的最大连接数比较小；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">然后通过看接口代码中的配置文件发现，确实Redis连接池中的最大连接数配置是 10 个；最后修改了最大连接数为 300 个；注意：这个最大连接数需要根据项目情况和测试计划来设置，不用设置的太大。</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">接着，使用命令顺带统计下当前处于压测中的应用服务器（部署接口项目的服务器）与MySql 建立的连接数</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意：3306 为MySql 的端口号</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">netstat&nbsp;-pan&nbsp;|&nbsp;grep&nbsp;3306&nbsp;|&nbsp;wc&nbsp;-l<br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">执行命令发现已经建立的MySql 连接数是 50，然后通过查看配置文件的连接池中最大的连接数为100，发现还没有达到最大连接数，说明 JDBC 连接够用，本次压测问题不是由于JDBC连接不够用导致的；并且在上文中查看线程的堆栈信息时，也没有发现调用 JDBC 操作的线程处于 WAITING 等待状态。</p></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">排查完了数据库连接池了，咱们就再排查下MySql 数据库是否进行了参数调优；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">如果MySql 数据库没有进行调优的话，那在压测时就会出现数据库的读写性能比较差，也就是项目中在进行 JDBC 增删改查操作时会比较慢，进而导致存在JDBC操作的线程执行慢，无法充分利用CPU的并发计算能力，所以也会导致应用服务器的CPU使用率比较低，最终压测时整个接口应用系统的吞吐量也很低 。</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201213003837.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">排查MySql 数据库调优配置：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">接下来咱排查下MySql 数据库是否进行了参数调优；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">排查前先聊一个由于之前MySql 数据库未进行优化，而导致的压测问题。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">MySql 数据库未调优，引发的压测问题 简述：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">之前压测时的场景还原：</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">在压测前所有该调优的地方都调了，就单独忘记对MySql 数据库进行调优了，最终导致对应用压测时，发现应用服务器（部署接口项目的服务器）的CPU的使用率一直浮动在60%左右，始终压不上去，即使加大压测时的并发请求数，发现还是不行；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">最终通过查看MySql 服务器的磁盘IO的情况和MySql 数据库进程的CPU、内存等使用率发现MySql 没有被优化，所以导致MySql 数据库的读写能力被限制，进而导致应用并发处理能力下降，从而导致应用服务器的CPU使用率一直升不上去。</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用命令统计下压测时 MySql 数据库所部署在的服务器的磁盘IO性能：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意： 1 指的是 间隔时间1秒， 5 指的是统计5次 IO 的情况；</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">iostat&nbsp;-xdk&nbsp;1&nbsp;5<br></code></pre></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">结果如下：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211222110.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">只需要注意图中圈起来的地方；await 指的是 磁盘读写时的等待时间，这个值越小越好；%util 指的是磁盘整体的负载情况，值越大说明磁盘负载快达到极限了。</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用命令查看MySql 进程的CPU、内存的使用率：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">注意： 14208 是MySql 的pid；</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">top&nbsp;-p&nbsp;14208<br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">结果如图：</p><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211223817.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">注意：</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">当时就是通过这两条命令统计出的数据，发现数据库服务器磁盘IO的负载一直处于90%，快达到极限了；但是MySql  进程的CPU、内存的使用率却很低；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">通过这两条数据可以初步确定MySql 没有进行优化；如果MySql 进行了调优，那么MySql 的进程在压测时的CPU、内存等使用率不可能这么低，并且磁盘 IO 的负载也不会达到了极限；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">得出初步结论后，然后去查看MySql 数据库的配置文件 my.cnf， 发现确实没有进行一些参数的优化，只是简单配置了最大连接数为 500；注意，MySql 数据库默认的最大连接数是 100 个；</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">最后在 my.cnf 配置文件中简单配置了下 innodb 存储引擎缓冲池大小 等；这里就不具体描述调优的参数了，因为调优参数都是需要根据项目情况、服务器硬件配置等综合考虑配置的；大家可以自行网上查阅MySql 数据库调优的相关资料；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">为什么配置下 <strong style="font-weight: bold; color: black;">innodb 存储引擎缓冲池大小</strong> 等参数就会极大的提升数据库的读写性能呢？</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">通过下面这张图片就会知道为什么了：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201214194828.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">通过上图可以了解到进行数据库读写时，首先都在对内存中的innodb存储引擎的缓冲池中的数据进行操作，如果缓冲池中不存在操作的数据，则需要进行磁盘IO将数据读取到内存中的，所以这样读写速度就会慢很多；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">所以如果缓冲池比较小的话，无法存放很多数据（数据页）的话，则需要进行很多次磁盘IO，那么数据库读写性能会比较差，所以需要对MySql 的存储引擎的缓存池等参数进行调优配置。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">配置好后，重启了MySql 数据库，然后重新进行压测，发现应用服务器（部署接口项目的服务器）的CPU使用率上去了，MySql 数据库进程的CPU、内存等使用率也升上去了，并且磁盘IO的负载也降下来了，最后整个应用系统的吞吐量也上去了，也支持更大的并发数了。</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">说完了上面之前遇到的一个压测小场景，咱们接着按照上面的排查步骤排查这次压测的问题，发现MySql 数据库已经进行了调优，磁盘IO的读写速度也是OK的，所以说本次压测问题与MySql 数据库参数配置无关。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">排查完了MySql 数据库后，咱接着排查下Linux服务器的参数是否进行过调优吧！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201213001130.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">排查Linux服务器参数配置：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">服务器参数调优这块目前了解的不多，只知道配置下服务器的 <strong style="font-weight: bold; color: black;">文件句柄数 fd</strong> ；建议将服务器的文件句柄数设置的大些；为什么设置大些呢？</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">因为主流操作系统的设计是将 TCP/UDP 连接采用与文件一样的方式去管理，<strong style="font-weight: bold; color: black;">即一个连接对应于一个文件描述符（文件句柄）</strong>；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">主流的 Linux 服务器默认所支持最大 文件句柄数 数量为 1024，当并发连接数很大时很容易因为 文件句柄数 不足而出现 <strong style="font-weight: bold; color: black;">“open too many files”</strong> 错误，导致新的连接无法建立。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">建议将 Linux 服务器所支持的最大句柄数调高数倍（具体与服务器的内存数量相关）。</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">使用命令查看当前服务器的文件句柄数：</p><pre class="custom" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; display: -webkit-box; -webkit-overflow-scrolling: touch; font-size: 14px; word-wrap: break-word; padding: 2px 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(239, 112, 96); padding-top: 15px; background: #fafafa; border-radius: 5px;">ulimit&nbsp;-a<br></code></pre><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">结果如图：</p><figure style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201211230611.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">上图中的文件句柄数是已经修改过的；设置文件句柄数可以设置临时值，也可以设置永久值，建议设置成永久值，因为临时值遇到一些情况会失效的。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">配置文件句柄数可以自行去网上查询，资料很多的，本文就不做过多描述了。</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">聊完服务器参数调优配置后，咱最后再聊聊 JMeter 测试工具在压测时有没有该注意的点！</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201213002533.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span class="prefix" style="display: none;"></span><span class="content">JMeter 分布式测试：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">这里主要聊聊 JMeter 分布式测试的内容；什么时候需要进行分布式测试，当你的单机 JMeter 服务器由于硬件配置限制无法构建出足够的并发压力时，这是就需要进行分布式部署测试了；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">怎么判断 单机的 JMeter 服务器 已经无法构建出足够的并发压力了呢？</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">通过查看 JMeter 测试服务器的CPU的使用率情况，当 JMeter 测试服务器的CPU使用率达到 90% 多时，此时就可以初步确认CPU无法在提供足够的计算能力来构建并发压力了；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">所以此时可以将单机的JMeter改为分布式JMeter进行测试，只有构建出足够的压力，才能将应用服务器（部署接口项目的服务器）的CPU、内存等资源的使用率压上去，从而测试出接口的压力峰值。</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">所以，当单机 JMeter 压测时发现应用服务器（部署接口项目的服务器）CPU、内存等使用率压不上去的话，也可以去排查下是否是由于JMeter服务器硬件配置不足造成的；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">本次压力问题，发现 JMeter 测试服务器在压测时 CPU 的使用率达到了 80%多，说明此台测试服务器由于硬件限制也是无法构建更大的并发压力了，所以建议将单机 JMeter 测试改为 分布式测试；</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">这里 JMeter 分布式测试网上教程很多，本文就不做过多描述了。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">到这里，本人认为的所有该调优的点都排查完； 今啊老百姓真呀真呀真高兴！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201213005811.gif" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">本次排查总结：</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">排查完上面的几个点后，最终发现了导致本次压测问题的原因：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">Redis 连接池的最大连接数配置的偏小</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">JMeter 单机测试无法构造出足够的并发压力</section></li></ul><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">正是由于上面的两个问题导致了本次压测出现了下面的问题：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">压测时应用系统的吞吐量偏低</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">并且应用服务器（部署接口项目的服务器）的CPU、内存等使用率偏低；</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; border-left: 3px solid rgba(0, 0, 0, 0.4); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left-color: rgb(239, 112, 96); background: #fff9f9;"><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">将上面的两处问题修改过后，重新进行压测，发现一切正常了！</p><p style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0px; color: black; line-height: 26px;">在此，再说明下本次压测项目就是一个简单的单体项目，项目中没有涉及到分库分表、各种中间件以及分布式等，所以排查起来还相对简单些 ，否则问题排查会更加困难的。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">由于本人水平有限，如果有未提及到的调优的点，请评论留言呀！</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">扩展</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">在排查问题时，如果有一些 <strong style="font-weight: bold; color: black;">排查工具</strong> 的话，将极大的方便我们排查问题，从而使我们快速的定位到问题原因！</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">下面就介绍两个在排查问题非常好用的辅助工具：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">Arthas ： 阿里开源的线上Java应用诊断工具</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">jvisualvm ：JDK中自带的 JVM 运行状态监控工具</section></li></ul><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201213212555.jpg" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;"><span class="prefix" style="display: none;"></span><span class="content" style="display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix"></span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;"> </span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢！</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;">您可以微信搜索【木子雷】公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127105439.png" alt style="display: block; margin: 0 auto; max-width: 100%;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 实战问题排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初闻MongoDB（一）、从零带你了解MongoDB的前世今生</title>
      <link href="/2020/11/29/mongodb_one/"/>
      <url>/2020/11/29/mongodb_one/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="color: black; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; font-size: 14px; padding: 10px;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201129150452.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));">前言：</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">最近在看MongoDB相关知识，刚开始听到MongoDB时，一脸懵圈，这是个啥子数据库呀 。</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127133906.gif" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">但是通过学习后，发现这个数据库挺牛掰的呀；嘿嘿 。。。。</p><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">下面就带大家一起聊聊这个数据库 ，看看它到底有什么牛掰之处 。</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">本文主线：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">①、MongoDB 简介</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">②、MongoDB支持的功能有哪些？</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">③、MongoDB的存储引擎简述</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">④、MongoDB知识扩展</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));">MongoDB 简介：</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">MongnDB是一个 <strong style="font-weight: bold; color: black;">分布式文件存储数据库</strong> （或叫文档数据库）；</p><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">MongoDB是一个介于 <strong style="font-weight: bold; color: black;">关系数据库和非关系数据库</strong> 之间的产品，是非关系数据库当中功能最丰富，最像关系数据库，最接近关系型数据库的。</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201128182359.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">MongoDB的数据逻辑结构：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">首先说下 MongoDB 的数据逻辑层次： <strong style="font-weight: bold; color: black;">数据库(database)、集合(collection)、文档(document)</strong> 。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">MongoDB数据逻辑层次的关系如下图：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201128182744.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">MongoDB与关系数据库的数据逻辑结构比较：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127120442.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">通过上图可以知道MongoDB和关系数据库之间的数据逻辑结构对应关系了吧，再来将关系对应一下子：</p><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">数据库  ------  数据库 、 Table表 ------ Collection集合 、 Row 行记录 ------ Document 文档</p><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">下面咱来聊聊上图Document文档中  <strong style="font-weight: bold; color: black;">{ "name" : "lyl", "age" : 25}</strong>  看起来跟 JSON 格式一样的数据到底是个什么东东？</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">MongoDB中文档的数据存储结构：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">MongoDB的文件数据存储结构是 <strong style="font-weight: bold; color: black;">BSON</strong> ；Bson是 <strong style="font-weight: bold; color: black;">Binary JSON</strong> 缩写，是类似于JSON的文档的二进制编码序列化。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">Bson的特点：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">轻量性</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">可遍历性</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">高效性</section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">来再具体看看MongoDB的Bson格式文档数据到底长神魔样呢？</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201128173842.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">通过上图我们对MongoDB整体有了一个基本的了解，接下来我们在简单聊聊它到底有哪些功能呢？看看它到底支持了什么 <strong style="font-weight: bold; color: black;">牛掰</strong> 的功能让它一直这么火。</p></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));">MongoDB支持的功能：</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">咱先贴一张摘抄自网上的大图：描述MongoDB的主要特性；</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201128191128.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;"><strong style="font-weight: bold; color: black;">除了支持上文的特性外，MongoDB还支持很多强大的功能：</strong></p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">BSON文档模型：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">动态的数据模式</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">使用高效的二进制数据存储，包括大型对象（如视频等）。</section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">动态查询</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">全文搜索</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">聚合操作：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">聚合管道</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">Map - Reduce</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">单一目的聚合方法</section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">水平扩展（高扩展）：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">主从复制（搭建主从复制集群）</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">数据分片（搭建数据分片集群）</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">数据分片 + 主从复制  = 更加强大的集群系统</section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">高可用、支持故障恢复</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">支持大文件存储GridFS</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">企业级安全</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">支持强大的索引：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">单字段索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">复核索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">多键索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">文本索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">通配符索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">地理位置索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">哈希索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">索引特性：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">TTL索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">唯一索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">部分索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">稀疏索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">索引交集</section></li></ul></section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">4.0版本支持多文档事务，4.2版本支持分布式事务</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">支持多种存储引擎<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">MMAP 存储引擎</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">MMAPV1 存储引擎</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">WiredTiger存储引擎</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">In-Memory 存储引擎</section></li></ul></section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">注：上面只是列出的MongoDB主要支持的功能，想要了解具体的每项功能，可以自行去查阅资料昂。</p><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">下面来聊聊MongoDB中十分重要的存储引擎，因为存储引擎是MongoDB负责管理数据的主要组件，并且像 <strong style="font-weight: bold; color: black;">事务、并发锁、存储数据的操作等</strong> 都是由存储引擎支持的。</p></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));">MongoDB的存储引擎：</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">MongoDB支持多种存储引擎，下面咱们就简单聊聊MongoDB的这几种存储引擎；</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">原生存储引擎MMAP：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">MMAP 全称为 Memory Mapped Storage Engine，即 <strong style="font-weight: bold; color: black;">内存映射存储引擎</strong>  ，在 <strong style="font-weight: bold; color: black;">3.0版本之前</strong> 使用的 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">MMAP可以把磁盘文件的一部分或全部内容直接映射到内存，这样文件中的信息位置就会在内存中有对应的地址空间，这时对文件的读写可以直接用指针来做，而不需要read/write函数了，但这并不代表将文件map到物理内存，只有访问到这块数据时才会被操作系统以Page的方式换到物理内存。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">在MongoDB的写操作时，先将数据放在内存中，然后再通过顺序IO将数据刷新保存到磁盘上，这样会大大提升写操作性能；并且MongoDB将内存管理工作交给操作系统的虚拟内存管理器来完成，这样也大大简化了MongoDB的工作 。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">原生升级 MMAPV1 存储引擎：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">在 <strong style="font-weight: bold; color: black;">MongoDB3.0版本时</strong> ，推出了 MMAPV1 存储引擎，这是在原生存储引擎基础上更新升级的新存储引擎 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">在 MMAPV1 存储引擎中有一个很重要的日志文件： <strong style="font-weight: bold; color: black;">journal预写事务日志</strong>  ，使用这个日志文件保证数据的持久化，并保证在数据库硬关闭时帮助数据库恢复。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">插入式 WiredTiger 存储引擎：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">WiredTiger是在 <strong style="font-weight: bold; color: black;">MongoDB3.0版本</strong> 引入的，并且在 <strong style="font-weight: bold; color: black;">MongoDB3.2版本</strong> 开始成为MongoDB默认的存储引擎。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">相比较MMAPv1，WiredTiger存储引擎功能更强大，而且具有更高的性能。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">WiredTiger存储引擎中也有  <strong style="font-weight: bold; color: black;">journal预写事务日志</strong>  ，用来保证数据持久化及数据库故障时数据恢复 。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">In-Memory 存储引擎：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">In-Memory存储引擎将数据库数据都存储在 <strong style="font-weight: bold; color: black;">内存</strong> 中，只将少量的元数据和诊断日志、临时数据存储到硬盘文件中，避免了磁盘I/O操作，查询速度很快。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">如果MongoDB使用 In-Memory 存储引擎的话，是不是很类似于 Redis 内存数据库呢。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">存储引擎之间的比较：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">下面将通过在各方面比较下 <strong style="font-weight: bold; color: black;">MMAPV1 、WiredTiger 、In-Memory</strong> 这三种存储引擎，更加清晰的明确多种存储引擎之间的区别。</p></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;"><strong style="font-weight: bold; color: black;">点击看大图：</strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127110209.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">注意：当各位大大阅读本文时，请一定要结合自己使用的 <strong style="font-weight: bold; color: black;">MongoDB的版本</strong> ，因为不同版本支持的功能可能是不同的，确认好自己使用的版本是否支持想要的功能。</p></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));">MongoDB 知识扩展：</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">为什么很吃内存？</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">在使用MongoDB数据库的时候，发现安装了MongoDB的服务器可用内存一直在减少，通过查找发现MongoDB在使用时一直在不断的吃内存，MongoDB占用的内存的越来越多。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">为什么MongoDB这么占用内存呢？</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">下面简单从两方面说下：</p></blockquote><ol data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">通过上面的存储引擎的描述可以知道，例如 : WiredTiger存储引擎的写操作会先写入Cache中，将数据保存在内存中，然后再通过机制将内存中的数据落盘，但是最终内存中的数据还是会保留下来的，只是会将已经落盘的数据坐下标记。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">当大量并发请求MongoDB数据库时，它使用的内存也会上涨；因为在并发连接比较多时，会大量创建处理连接的线程，这些线程也会占用内存的；除此之外，建立好连接后，处理连接中传输的数据包，这些数据包的存储也需要占用内存的；但是这种占用的内存会在请求下降后，慢慢的将内存释放的。</section></li></ol><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">如何控制内存的使用：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">下面简单在两方面聊下怎么控制MongoDB对内存的使用，希望别再触发服务器内存耗尽的告警了。</p></blockquote><ol data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: decimal;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">合理配置 <strong style="font-weight: bold; color: black;">WiredTiger cacheSizeGB</strong> 参数：<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">如果一台机器上只部署 MongoDB，MongoDB可以使用所有可用内存，则是用默认配置即可。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">如果一台机器上不止部署了MongoDB，还运行一些其他的进程服务，则需要根据分给MongoDB的内存配额来配置  <strong style="font-weight: bold; color: black;">cacheSizeGB</strong> ，也可按配额的60%左右配置。</section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">控制对MongoDB的并发请求数，进行合理的TCP连接数；</section></li></ol><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; font-weight: bold; background-color: #000; color: #fff; padding: 2px 10px; width: fit-content; font-size: 17px; margin: 60px auto 10px;"><span class="prefix" style="display: none;"></span><span class="content">MongoDB的应用场景：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">根据MongoDB的特性和支持的功能，简单聊聊它适用的应用场景：</p></blockquote><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">应用服务器日志存储。<ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: square;"><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">MongoDB的高性能足够支撑关系型数据库2-3倍以上的TPS/QPS；</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">磁盘数据压缩存储，在进行数据读取时降低磁盘IO的次数，提升数据读取性能；</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">支持功能强大的索引</section></li><li style="list-style-type: circle;"><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">动态的数据模式，不受表结构的限制；</section></li></ul></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">地理位置信息存储，通过地理位置索引，可以方便、快速的查询出具体的位置信息。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">当作缓存数据库，使用其In-Memory 存储引擎；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">网站实时数据处理；它非常适合实时的插入、更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; border-left: 3px solid rgba(0, 0, 0, 0.65); border-right: 1px solid rgba(0, 0, 0, 0.65); background: rgb(249, 249, 249);"><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">------end</p><p style="padding-top: 8px; padding-bottom: 8px; font-size: 14px; margin: 0px; color: black; line-height: 26px;">到此本文就结束了，本文只是和大家聊了聊MongoDB的基础知识，细节部分都没有具体描述，大家如果感兴趣的可以自行去查阅资料。</p></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">最后了，再和大家唠叨下， 打算最近写下MongoDB系列文章，系列文章题目都已经想好了，如下：</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">①、初闻MongoDB（一）、从零带你了解MongoDB的前世今生</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">②、初识MongoDB（二）、数据库安装及可视化工具的安装使用</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">③、相识MongoDB（三）、MongoDB常用的SQL语句和索引知识</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">④、相知MongoDB（四）、使用java连接和操作MongoDB数据库</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">⑤、相爱MongoDB（五）、一文带你了解MongoDB的实战操作使用</p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));"><font color="red">❤</font>  点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">您可以VX搜索【木子雷】公众号，坚持高质量原创java技术文章，福利多多哟！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">还有大家如果想看系列后续的文章话，请多多点赞评论呀，你们的支持就是我不断创作的动力！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127105439.png" alt style="display: block; margin: 0 auto; max-width: 100%; box-shadow: rgba(170, 170, 170, 0.48) 0px 0px 6px 0px; border-radius: 4px; margin-top: 10px;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-size: 22px; text-align: center; position: relative; font-weight: bold; color: black; line-height: 1.1em; padding-top: 12px; padding-bottom: 12px; margin: 70px 30px 30px; border: 1px solid #000;"><span style="float: left; display: block; width: 90%; border-top: 1px solid #000; height: 1px; line-height: 1px; margin-left: -5px; margin-top: -17px;"> </span><span class="prefix" style="display: block; width: 3px; margin: 0 0 0 5%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span class="content" style="display: block; -webkit-box-reflect: below 0em -webkit-gradient(linear,left top,left bottom, from(rgba(0,0,0,0)),to(rgba(255,255,255,0.1)));">参考资料：</span><span class="suffix" style="display: block; width: 3px; margin: 0 0 0 95%; height: 3px; line-height: 3px; overflow: hidden; background-color: #000; box-shadow: 3px 0 #000,    0 3px #000,    -3px 0 #000,    0 -3px #000;"></span><span style="float: right; display: block; width: 90%; border-bottom: 1px solid #000; height: 1px; line-height: 1px; margin-right: -5px; margin-top: 16px;"> </span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">①、<a href="https://docs.mongoing.com/" target="_blank" rel="noopener" style="text-decoration: none; color: #1e6bb8; word-wrap: break-word; font-weight: bold; border-bottom: 1px solid #1e6bb8;">MongoDB中文手册|官方文档中文版</a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">②、<a href="https://www.cnblogs.com/clsn/p/8214194.html" target="_blank" rel="noopener" style="text-decoration: none; color: #1e6bb8; word-wrap: break-word; font-weight: bold; border-bottom: 1px solid #1e6bb8;">MongoDB 入门篇</a></p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black; font-size: 14px;">③、<a href="https://www.cnblogs.com/wujuntian/p/8458402.html" target="_blank" rel="noopener" style="text-decoration: none; color: #1e6bb8; word-wrap: break-word; font-weight: bold; border-bottom: 1px solid #1e6bb8;">MongoDB存储引擎（中）——WiredTiger</a></p><span style="font-size: 15px; display: block; text-align: center; margin-top: 50px; color: #999; border-bottom: 1px solid #eee;">- END -</span></section>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试官说道，小伙子耗子尾汁，查询SQL的执行流程难道都不知道吗？</title>
      <link href="/2020/11/21/query_process/"/>
      <url>/2020/11/21/query_process/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="padding: 0 10px; word-spacing: 0px; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; line-height: 1.6; letter-spacing: .034em; color: rgb(63, 63, 63); font-size: 16px; word-break: all;"><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">前言</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">最近朋友小王正在找工作，然后有一个面试官问他知不知道 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">“查询SQL具体的执行流程”</strong> 。</p></blockquote><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">小王说不知道呀，然后面试官直接对小王说：小伙子 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">耗子尾汁(好自为之)</strong> ，怎么连这么简单的都不知道呢？</p></blockquote><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">小王听后脱口而出：哼！面试官你 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">不讲武德</strong> ，不按套路出牌呀，你应该问问索引相关的知识呀，这个我倍清楚。</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120094646.jpg" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在听完小王描述后，自己也在脑海中搜了搜这个知识点，可怜的是我的知识库里也没找到相关内容，然后就去面壁思过了，随后本文就诞生了。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;"><strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">注意</strong> ：本文主要以 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">MySql</strong> 为例；说到了MySql了，然后再唠叨下现在使用十分普遍的MySql的姊妹数据库 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">MariaDB</strong> 。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">MariaDB 是个什么东东呢？</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">MySql被Oracle收购后，MySql的创始人担心MySql数据库发展的未来(开发缓慢、封闭、可能会被闭源)，于是创建了一个分支MariaDB，默认使用全新的Maria存储引擎，它是原来Mysql中的 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">MyISAM</strong> 存储引擎的升级版。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">本文主线：</span><span class="suffix" style="display: none;"></span></h3><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、MySql的整体架构描述；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、Server层各节点描述；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">③、InnoDB存储引擎描述；</p><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">MySql架构描述</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">咱啥也先不说，先贴上一张摘抄自网上的大图：</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120095945.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">上面这张图描述的清不清晰呢？不清晰，那别着急，咱再贴一张：</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120100149.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">Server服务层描述：</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">通过上面的架构图可以得知，Server层中主要由 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">连接器、查询缓存、解析器/分析器、优化器、执行器</strong> 几部分组成的，下面将主要描述下这几部分。</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">连接器</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">客户端想要对数据库进行操作时，前提是与数据库建立好连接；而连接器就是用来负责跟客户端建立连接、获取权限、维持和管理连接的。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">连接方式：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">MySQL既支持短连接，也支持长连接。短连接就是操作完毕后，马上close关掉。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">长连接可以保持打开，减少服务端创建和释放连接的消耗，后面的程序访问的时候还可以使用这个连接。 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">一般我们会在连接池中使用长连接。</strong></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">长连接使用时的注意事项：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">客户端与服务器建立长连接，默认有效时间是 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">8小时</strong> ，超过8小时MySql服务器就会将连接断开了，那么客户端再次请求的话，就会报 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">连接已断开的问题</strong> ；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">并且保持长连接会消耗内存。长时间不活动的连接，MySQL服务器会断开。那这个8小时的超时时间怎么查看呢？</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">--&nbsp;非交互式超时时间，如&nbsp;JDBC&nbsp;程序<br>show&nbsp;global&nbsp;variables&nbsp;like&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'wait_timeout'</span>;&nbsp;&nbsp;<br><br>--&nbsp;交互式超时时间，如数据库工具<br>show&nbsp;global&nbsp;variables&nbsp;like<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'&nbsp;interactive_timeout'</span>;&nbsp;<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">执行后得到下图结果：默认都是28800秒，8小时 。</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120131256.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">一般项目中使用的连接池中的连接都是长连接的；（例如：druid、c3p0、dbcp等）</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">举个例子，说明下长连接超时断开导致的实际问题：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">某个朋友的公司有个管理系统，这个系统使用的时Mysql,但是他最近遇到了一个问题：就是系统明明前天是好用的，但是第二天去到公司后就打不开了，只要将系统重启就好了，一时间不知道什么原因，什么鬼嘛，苦恼？</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120131302.gif" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">最后通过查看日志才发现是连接池中的连接都断开了，因为从前天到第二天上班这之间隔得时间超过了8小时了。唉，这么个小知识点导致好几天的困惑，实在不该呀，还是知识掌握的不全面呀。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">好了，现在也找到问题原因了，但是它该怎么解决呢？</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">长连接超时断开的解决方案：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">查询缓存</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">MySQL缓存是默认关闭的，也就是说不推荐使用缓存，为什么呢？</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">MySql为什么默认不开启缓存呢？</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;"><strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">主要是由于它的使用场景限制的：</strong></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、先说下缓存中数据存储格式：key（sql语句）-value（数据值）；所以如果SQL语句（key）只要存在一点不同之处就会直接进行数据库查询了；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、由于表中的数据不是一成不变的，大多数是经常变化的，而当数据库中的数据变化了，那么相应的与此表相关的缓存数据就需要移除掉；</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">需要注意的是， <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">MySQL 8.0</strong> 版本直接将查询缓存的整块功能删掉了，也就是说8.0开始彻底没有这个功能了。</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">分析器</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">分析器的工作主要是对要执行的SQL语句进行解析，最终得到抽象语法书，然后再使用预处理器判断抽象语法树中的表是否存在，如果存在的话，在接着判断select投影列字段是否在表中存在等。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">词法分析</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">词法分析用于将SQL拆解为不可再分的原子符号，称为Token。并根据不同数据库方言所提供的字典，将其归类为关键字，表达式，字面量和操作符。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">语法分析</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">语法分析就是根据词法分析拆解出来的Token（原子符号）将SQL语句转换为抽象语法树。下面就直接举例说明，看一个SQL它的抽象语法书到底长神魔样：</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">SQL语句：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">SELECT&nbsp;id,&nbsp;name&nbsp;FROM&nbsp;t_user&nbsp;WHERE&nbsp;status&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'ACTIVE'</span>&nbsp;AND&nbsp;age&nbsp;&gt;&nbsp;18<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">然后上面的SQL语句经过词法分析、语法分析后得到的抽象语法书如下：</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120193056.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">图片摘自：https://shardingsphere.apache.org/document/legacy/3.x/document/cn/features/sharding/principle/parse/</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">注意，为了便于理解，抽象语法树中的关键字的Token用绿色表示，变量的Token用红色表示，灰色表示需要进一步拆分。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">预处理器</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">预处理是用来对生成的 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">抽象语法树</strong> 进行语义校验，语义校验就是对查询的表、select投影列字段进行校验，判断表、字段是否存在等；</p><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">优化器</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">优化器的作用：主要是将SQL经过词法解析/语法解析后得到的语法树，通过MySQL的数据字典和统计信息的内容，经过 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">一系列运算</strong> ，从而得出一个 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">执行计划</strong> 。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">在优化过程中，经过的一系列运算是什么呢？下面简单说下：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、逻辑变换：例如SQL的where条件中存在 8&gt;9，那逻辑转换就是将语法树中存在的这种常量表达式直接进行化简，化简为 false；除了化简还有常量表达式计算等。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、代价优化：就是通过付出一些数据统计分析的代价，来得到这个SQL执行是否可以走索引，以及走哪些索引；除此之外，在多表关联查询中，确定最终表join的顺序等；</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在分析是否走索引查询时，是通过进行 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">动态数据采样统计分析</strong> 出来；只要是统计分析出来的，那就可能会存在分析错误的情况，所以在SQL执行不走索引时，也要考虑到这方面的因素。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">MySql执行计划怎么查看呢？</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">在执行的SQL语句前添加上 explain 关键字即可；</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">扩展： Oracle怎么查看执行计划？ 参考此文章 <a href="https://blog.csdn.net/rexueqingchun/article/details/84563686" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">Oracle通过执行计划查看查询语句是否使用索引</a></p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">执行器</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。开始执行的时候，要先判断一下建立连接的对象对这个表有没有执行操作的权限，如果没有，就会返回没有权限的错误；如果有，就按照生成的执行计划进行执行。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">通过文章最开始的架构图可知，执行器下面连接的就是存储引擎了，执行器就是通过调用存储引擎提供的API接口进行调用操作数据的。</p><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">存储引擎描述</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">存储引擎是对底层物理数据执行实际操作的组件，为Server服务器层提供各种操作数据的 API。MySQL 支持插件式的存储引擎，包括 InnoDB 、MyISAM、Memory 等。一般情况下，MySQL默认使用的存储引擎是 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">InnoDB</strong> 。</p></blockquote><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">InnoDB 存储引擎支持的功能总览</span><span class="suffix" style="display: none;"></span></h3><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120204836.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><h3 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 20px;"><span style="background-image: url(https://files.mdnice.com/mountain_1.png); background-size: 15px 15px; display: inline-block; width: 15px; height: 15px; line-height: 15px; margin-bottom: -1px;"></span><span class="prefix" style="display: none;"></span><span class="content" style="font-size: 16px; font-weight: bold; display: inline-block; margin-left: 8px; color: rgb(60,112,198);">扩展</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">InnoDB存储引擎深入学习，啥也不说了，先贴上其整体架构图：如下图所示，InnoDB存储引擎整体分为内存架构（Memory Structures）和磁盘架构（Disk Structures）。</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201120205111.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">如果想深入学习，请参考此文章 <a href="https://www.seoxiehui.cn/article-152978-1.html" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">你居然还不知道Mysql存储引擎InnoDB分为内存架构、磁盘架构？</a></p><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;"><font color="red">❤</font>  关注 + 点赞 + 收藏 + 评论 哟</span><span class="suffix"></span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢！</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">您可以微信搜索【木子雷】公众号，坚持高质量原创java技术文章，值得您关注！</p><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">参考资料</span><span class="suffix"></span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、<a href="https://blog.csdn.net/weixin_43935927/article/details/109324057" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">查询sql的执行过程及MySQL架构分析</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、<a href="https://www.cnblogs.com/whgk/p/10993436.html" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">执行SQL查询语句时,其底层到底经历了什么? </a></p></section>]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解的魅力你到底懂不懂</title>
      <link href="/2020/11/15/understand_annotations_charm/"/>
      <url>/2020/11/15/understand_annotations_charm/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="padding: 0 10px; word-spacing: 0px; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif; line-height: 1.6; letter-spacing: .034em; color: rgb(63, 63, 63); font-size: 16px; word-break: all;"><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">前言</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">你知道自定义注解的魅力所在吗？</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">你知道自定义注解该怎么使用吗？</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">本文一开始的这两个问题，需要您仔细思考下，然后结合这两个问题来阅读下面的内容；如果您在阅读完文章后对这两个问题有了比较清晰的，请动动您发财的小手，点赞留言呀！</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201113141104.jpg" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">本文主线：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">注解是什么；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">实现一个自定义注解；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;"><p style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">自定义注解的实战应用场景；</p></section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">注意：本文在介绍自定义注解实战应用场景时，需要结合拦截器、AOP进行使用，所以本文也会简单聊下AOP相关知识点，如果对于AOP的相关内容不太清楚的可以参考此 <a href="https://blog.csdn.net/q982151756/article/details/80513340" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">细说Spring——AOP详解</a> 文章进行了解。</p></blockquote><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">注解</span><span class="suffix"></span></h2><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">注解是什么？</span><span class="suffix" style="display: none;"></span></h4><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">①、引用自维基百科的内容：</span><span class="suffix" style="display: none;"></span></h5><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">Java注解又称Java标注，是JDK5.0版本开始支持加入源代码的特殊语法 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">元数据</strong> 。</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">Java语言中的类、方法、变量、参数和包等都可以被标注。和Javadoc不同，Java标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中。Java虚拟机可以保留标注内容，在运行时可以获取到标注内容。 当然它也支持自定义Java标注。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">②、引用自网络的内容：</span><span class="suffix" style="display: none;"></span></h5><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">Java 注解是在 JDK5 时引入的新特性，注解（也被称为 <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">元数据</strong> ）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便地使用这些数据。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">元注解是什么？</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);"><strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">元注解</strong> 的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation（元注解）类型，它们被用来提供对其它 annotation类型作说明。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">标准的元注解：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">@Target</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">@Retention</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">@Documented</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">@Inherited</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在详细说这四个元数据的含义之前，先来看一个在工作中会经常使用到的 @Autowired 注解，进入这个注解里面瞧瞧： 此注解中使用到了@Target、@Retention、@Documented 这三个元注解 。</p></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Target</span>({ElementType.CONSTRUCTOR,&nbsp;ElementType.METHOD,&nbsp;ElementType.PARAMETER,&nbsp;ElementType.FIELD,&nbsp;ElementType.ANNOTATION_TYPE})<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Documented</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@interface</span>&nbsp;Autowired&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">required</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">default</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span></span>;<br>}<br></code></pre><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">@Target元注解：</span><span class="suffix" style="display: none;"></span></h5><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">@Target注解，是专门用来限定某个自定义注解能够被应用在哪些Java元素上面的，标明作用范围；取值在<code style="font-size: 14px; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0 2px; background-color: rgba(27,31,35,.05); font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; word-break: break-all; color: rgb(60, 112, 198);">java.lang.annotation.ElementType</code> 进行定义的。</p></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">enum</span>&nbsp;ElementType&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;类，接口（包括注解类型）或枚举的声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;TYPE,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;属性的声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;FIELD,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;方法的声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;METHOD,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;方法形式参数声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;PARAMETER,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;构造方法的声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;CONSTRUCTOR,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;局部变量声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;LOCAL_VARIABLE,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;注解类型声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;ANNOTATION_TYPE,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**&nbsp;包的声明&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;PACKAGE<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">根据此处可以知道 @Autowired 注解的作用范围：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;可以作用在&nbsp;构造方法、方法、方法形参、属性、注解类型&nbsp;上</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Target</span>({ElementType.CONSTRUCTOR,&nbsp;ElementType.METHOD,&nbsp;ElementType.PARAMETER,&nbsp;ElementType.FIELD,&nbsp;ElementType.ANNOTATION_TYPE})<br></code></pre><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">@Retention元注解：</span><span class="suffix" style="display: none;"></span></h5><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">@Retention注解，翻译为持久力、保持力。即用来修饰自定义注解的生命周期。</p></blockquote><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">注解的生命周期有三个阶段：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; color: black; list-style-type: disc;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">Java源文件阶段；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">编译到class文件阶段；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: rgb(1,1,1); font-weight: 500;">运行期阶段；</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">同样使用了RetentionPolicy 枚举类型对这三个阶段进行了定义：</p></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">enum</span>&nbsp;RetentionPolicy&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Annotations&nbsp;are&nbsp;to&nbsp;be&nbsp;discarded&nbsp;by&nbsp;the&nbsp;compiler.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;（注解将被编译器忽略掉）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;SOURCE,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Annotations&nbsp;are&nbsp;to&nbsp;be&nbsp;recorded&nbsp;in&nbsp;the&nbsp;class&nbsp;file&nbsp;by&nbsp;the&nbsp;compiler<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;but&nbsp;need&nbsp;not&nbsp;be&nbsp;retained&nbsp;by&nbsp;the&nbsp;VM&nbsp;at&nbsp;run&nbsp;time.&nbsp;&nbsp;This&nbsp;is&nbsp;the&nbsp;default<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;behavior.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;（注解将被编译器记录在class文件中，但在运行时不会被虚拟机保留，这是一个默认的行为）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;CLASS,<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Annotations&nbsp;are&nbsp;to&nbsp;be&nbsp;recorded&nbsp;in&nbsp;the&nbsp;class&nbsp;file&nbsp;by&nbsp;the&nbsp;compiler&nbsp;and<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;retained&nbsp;by&nbsp;the&nbsp;VM&nbsp;at&nbsp;run&nbsp;time,&nbsp;so&nbsp;they&nbsp;may&nbsp;be&nbsp;read&nbsp;reflectively.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;（注解将被编译器记录在class文件中，而且在运行时会被虚拟机保留，因此它们能通过反射被读取到）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@see</span>&nbsp;java.lang.reflect.AnnotatedElement<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;RUNTIME<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;"><strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">再详细描述下这三个阶段：</strong></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、如果被定义为 RetentionPolicy.SOURCE，则它将被限定在Java源文件中，那么这个注解即不会参与编译也不会在运行期起任何作用，这个注解就和一个注释是一样的效果，只能被阅读Java文件的人看到；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、如果被定义为 RetentionPolicy.CLASS，则它将被编译到Class文件中，那么编译器可以在编译时根据注解做一些处理动作，但是运行时JVM（Java虚拟机）会忽略它，并且在运行期也不能读取到；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">③、如果被定义为 RetentionPolicy.RUNTIME，那么这个注解可以在运行期的加载阶段被加载到Class对象中。那么在程序运行阶段，可以通过反射得到这个注解，并通过判断是否有这个注解或这个注解中属性的值，从而执行不同的程序代码段。</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;"><strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">注意：实际开发中的自定义注解几乎都是使用的 RetentionPolicy.RUNTIME</strong>  。</p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">@Documented元注解：</span><span class="suffix" style="display: none;"></span></h5><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">@Documented注解，是被用来指定自定义注解是否能随着被定义的java文件生成到JavaDoc文档当中。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">@Inherited元注解：</span><span class="suffix" style="display: none;"></span></h5><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">@Inherited注解，是指定某个自定义注解如果写在了父类的声明部分，那么子类的声明部分也能自动拥有该注解。</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">@Inherited注解只对那些@Target被定义为 ElementType.TYPE 的自定义注解起作用。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">自定义注解实现：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在了解了上面的内容后，我们来尝试实现一个自定义注解：</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201111102238.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">根据上面自定义注解中使用到的元注解得知：</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">①、此注解的作用范围，可以使用在类（接口、枚举）、方法上；</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">②、此注解的生命周期，被编译器保存在class文件中，而且在运行时会被JVM保留，可以通过反射读取；</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">自定义注解的简单使用：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">上面已经创建了一个自定义的注解，那该怎么使用呢？下面首先描述下它简单的用法，后面将会使用其结合拦截器和AOP切面编程进行实战应用；</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201111102246.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">应用场景实现</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在了解了上面注解的知识后，我们乘胜追击，看看它的实际应用场景是肿么样的，以此加深下我们的理解；</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">实现的 Demo 项目是以 SpringBoot 实现的，项目工程结构图如下：</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201111185449.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">场景一：自定义注解 + 拦截器  = 实现接口响应的包装</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">使用自定义注解 结合 拦截器 优雅的实现对API接口响应的包装。</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在介绍自定义实现的方式之前，先简单介绍下普遍的实现方式，通过两者的对比，才能更加明显的发现谁最优雅。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">普通的接口响应包装方式：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">现在项目绝大部分都采用的前后端分离方式，所以需要前端和后端通过接口进行交互；目前在接口交互中使用最多的数据格式是 json，然后后端返回给前端的最为常见的响应格式如下：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">{<br>&nbsp;&nbsp;&nbsp;&nbsp;#返回状态码<br>&nbsp;&nbsp;&nbsp;&nbsp;code:integer,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;#返回信息描述<br>&nbsp;&nbsp;&nbsp;&nbsp;message:string,<br>&nbsp;&nbsp;&nbsp;&nbsp;#返回数据值<br>&nbsp;&nbsp;&nbsp;&nbsp;data:object<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">项目中经常使用枚举类定义状态码和消息，代码如下：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Title</span>:&nbsp;ResponseCode<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;使用枚举类封装好的响应状态码及对应的响应消息<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@date</span>:&nbsp;2019年8月23日&nbsp;下午7:12:50<br>&nbsp;*/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">enum</span>&nbsp;ResponseCode&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;SUCCESS(<span class="hljs-number" style="color: #986801; line-height: 26px;">1200</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"请求成功"</span>),<br><br>&nbsp;&nbsp;&nbsp;&nbsp;ERROR(<span class="hljs-number" style="color: #986801; line-height: 26px;">1400</span>,&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"请求失败"</span>);<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;Integer&nbsp;code;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;String&nbsp;message;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">ResponseCode</span><span class="hljs-params" style="line-height: 26px;">(Integer&nbsp;code,&nbsp;String&nbsp;message)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.code&nbsp;=&nbsp;code;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.message&nbsp;=&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Integer&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">code</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.code;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">message</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.message;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">同时项目中也会设计一个返回响应包装类，代码如下：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.io.Serializable;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Title</span>:&nbsp;Response<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;封装的统一的响应返回类<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@date</span>:&nbsp;2019年8月23日&nbsp;下午7:07:13<br>&nbsp;*/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@SuppressWarnings</span>(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"serial"</span>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">Response</span>&lt;<span class="hljs-title" style="color: #c18401; line-height: 26px;">T</span>&gt;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">implements</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;响应数据<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;T&nbsp;date;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;响应状态码<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;Integer&nbsp;code;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;响应描述信息<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;String&nbsp;message;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">Response</span><span class="hljs-params" style="line-height: 26px;">(T&nbsp;date,&nbsp;Integer&nbsp;code,&nbsp;String&nbsp;message)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">super</span>();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.date&nbsp;=&nbsp;date;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.code&nbsp;=&nbsp;code;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.message&nbsp;=&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;T&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getDate</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;date;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setDate</span><span class="hljs-params" style="line-height: 26px;">(T&nbsp;date)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.date&nbsp;=&nbsp;date;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Integer&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getCode</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;code;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setCode</span><span class="hljs-params" style="line-height: 26px;">(Integer&nbsp;code)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.code&nbsp;=&nbsp;code;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getMessage</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setMessage</span><span class="hljs-params" style="line-height: 26px;">(String&nbsp;message)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.message&nbsp;=&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">toString</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;JSONObject.toJSONString(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">最后就是使用响应包装类和状态码枚举类 来实现返回响应的包装了：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@GetMapping</span>(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"/user/findAllUser"</span>)<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Response&lt;List&lt;User&gt;&gt;&nbsp;findAllUser()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"开始查询所有数据..."</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;User&gt;&nbsp;findAllUser&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;findAllUser.add(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;User(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"木子雷"</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">26</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;findAllUser.add(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;User(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"公众号"</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">28</span>));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;返回响应进行包装</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Response&nbsp;response&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Response(findAllUser,&nbsp;ResponseCode.SUCCESS.code(),&nbsp;ResponseCode.SUCCESS.message());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"response:&nbsp;{}&nbsp;\n"</span>,&nbsp;response.toString());<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;response;<br>}<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">在浏览器中输入网址： http://127.0.0.1:8080/v1/api/user/findAllUser    然后点击回车，得到如下数据：</p></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"code"</span>:&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1200</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"date"</span>:&nbsp;[<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"age"</span>:&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">26</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"name"</span>:&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"木子雷"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"age"</span>:&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">28</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"name"</span>:&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"公众号"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;],<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="color: #986801; line-height: 26px;">"message"</span>:&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"请求成功"</span><br>}<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">通过看这中实现响应包装的方式，我们能发现什么问题吗？</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">答：代码很冗余，需要在每个接口方法中都进行响应的包装；使得接口方法包含了很多非业务逻辑代码；</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">有没有版本进行优化下呢？  en en 思考中。。。。。          啊，自定义注解 + 拦截器可以实现呀！</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">自定义注解实现接口响应包装：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、首先创建一个进行响应包装的自定义注解：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.annotation<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;ResponseResult<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;标记方法返回值需要进行包装的&nbsp;自定义注解<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;10:38<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Target</span>({ElementType.TYPE,&nbsp;ElementType.METHOD})<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Documented</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@interface</span>&nbsp;ResponseResult&nbsp;{<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、创建一个拦截器，实现对请求的拦截，看看请求的方法或类上是否使用了自定义的注解：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.interceptor<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;ResponseResultInterceptor<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;拦截器：拦截请求，判断请求的方法或类上是否使用了自定义的<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ResponseResult</span>注解，<br>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;并在请求内设置是否使用了自定义注解的标志位属性；<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;10:50<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Component</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">ResponseResultInterceptor</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">implements</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">HandlerInterceptor</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;标记位，标记请求的controller类或方法上使用了到了自定义注解，返回数据需要被包装<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;String&nbsp;RESPONSE_ANNOTATION&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"RESPONSE_ANNOTATION"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;请求预处理，判断是否使用了自定义注解<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">preHandle</span><span class="hljs-params" style="line-height: 26px;">(HttpServletRequest&nbsp;request,&nbsp;HttpServletResponse&nbsp;response,&nbsp;Object&nbsp;handler)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;请求的接口方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(handler&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">instanceof</span>&nbsp;HandlerMethod)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;HandlerMethod&nbsp;handlerMethod&nbsp;=&nbsp;(HandlerMethod)&nbsp;handler;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Class&lt;?&gt;&nbsp;clazz&nbsp;=&nbsp;handlerMethod.getBeanType();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Method&nbsp;method&nbsp;=&nbsp;handlerMethod.getMethod();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;判断是否在类对象上加了注解</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(clazz.isAnnotationPresent(ResponseResult<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>))&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;在请求中设置需要进行响应包装的属性标志，在下面的ResponseBodyAdvice增强中进行处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setAttribute(RESPONSE_ANNOTATION,&nbsp;clazz.getAnnotation(ResponseResult<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>))</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(method.isAnnotationPresent(ResponseResult<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>))&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;在请求中设置需要进行响应包装的属性标志，在下面的ResponseBodyAdvice增强中进行处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.setAttribute(RESPONSE_ANNOTATION,&nbsp;method.getAnnotation(ResponseResult<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>))</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">③、创建一个增强Controller，实现对返回响应进行包装的增强处理：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.interceptor<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;ResponseResultHandler<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;对&nbsp;返回响应&nbsp;进行包装&nbsp;的增强处理<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;13:49<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ControllerAdvice</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">ResponseResultHandler</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">implements</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">ResponseBodyAdvice</span>&lt;<span class="hljs-title" style="color: #c18401; line-height: 26px;">Object</span>&gt;&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Logger&nbsp;logger&nbsp;=&nbsp;LoggerFactory.getLogger(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.getClass());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;标记位，标记请求的controller类或方法上使用了到了自定义注解，返回数据需要被包装<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;String&nbsp;RESPONSE_ANNOTATION&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"RESPONSE_ANNOTATION"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;请求中是否包含了&nbsp;响应需要被包装的标记，如果没有，则直接返回，不需要重写返回体<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;methodParameter<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;aClass<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">supports</span><span class="hljs-params" style="line-height: 26px;">(MethodParameter&nbsp;methodParameter,&nbsp;Class&lt;?&nbsp;extends&nbsp;HttpMessageConverter&lt;?&gt;&gt;&nbsp;aClass)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletRequestAttributes&nbsp;ra&nbsp;=&nbsp;(ServletRequestAttributes)&nbsp;RequestContextHolder.getRequestAttributes();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpServletRequest&nbsp;sr&nbsp;=&nbsp;(HttpServletRequest)&nbsp;ra.getRequest();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;查询是否需要进行响应包装的标志</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResponseResult&nbsp;responseResult&nbsp;=&nbsp;(ResponseResult)&nbsp;sr.getAttribute(RESPONSE_ANNOTATION);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;responseResult&nbsp;==&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;?&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">false</span>&nbsp;:&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;对&nbsp;响应体&nbsp;进行包装;&nbsp;除此之外还可以对响应体进行统一的加密、签名等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;responseBody&nbsp;&nbsp;请求的接口方法执行后得到返回值(返回响应)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Object&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">beforeBodyWrite</span><span class="hljs-params" style="line-height: 26px;">(Object&nbsp;responseBody,&nbsp;MethodParameter&nbsp;methodParameter,&nbsp;MediaType&nbsp;mediaType,&nbsp;Class&lt;?&nbsp;extends&nbsp;HttpMessageConverter&lt;?&gt;&gt;&nbsp;aClass,&nbsp;ServerHttpRequest&nbsp;serverHttpRequest,&nbsp;ServerHttpResponse&nbsp;serverHttpResponse)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"返回响应&nbsp;包装进行中。。。"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Response&nbsp;response;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;boolean类型时判断一些数据库新增、更新、删除的操作是否成功</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(responseBody&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">instanceof</span>&nbsp;Boolean)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;((Boolean)&nbsp;responseBody)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Response(responseBody,&nbsp;ResponseCode.SUCCESS.code(),&nbsp;ResponseCode.SUCCESS.message());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Response(responseBody,&nbsp;ResponseCode.ERROR.code(),&nbsp;ResponseCode.ERROR.message());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;判断像查询一些返回数据的情况，查询不到数据返回&nbsp;null;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;!=&nbsp;responseBody)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Response(responseBody,&nbsp;ResponseCode.SUCCESS.code(),&nbsp;ResponseCode.SUCCESS.message());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;response&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Response(responseBody,&nbsp;ResponseCode.ERROR.code(),&nbsp;ResponseCode.ERROR.message());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;response;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">④、最后在 Controller 中使用上我们的自定义注解；在 Controller 类上或者 方法上使用@ResponseResult自定义注解即可；  在浏览器中输入网址： http://127.0.0.1:8080/v1/api/user/findAllUserByAnnotation  进行查看：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;自定义注解用在了方法上</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@ResponseResult</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@GetMapping</span>(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"/user/findAllUserByAnnotation"</span>)<br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;List&lt;User&gt;&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">findAllUserByAnnotation</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"开始查询所有数据..."</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;User&gt;&nbsp;findAllUser&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;ArrayList&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;findAllUser.add(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;User(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"木子雷"</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">26</span>));<br>&nbsp;&nbsp;&nbsp;&nbsp;findAllUser.add(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;User(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"公众号"</span>,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">28</span>));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"使用&nbsp;@ResponseResult&nbsp;自定义注解进行响应的包装，使controller代码更加简介"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;findAllUser;<br>}<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">至此我们的接口返回响应包装自定义注解实现设计完成，看看代码是不是又简洁，又优雅呢。</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">总结：本文针对此方案只是进行了简单的实现，如果有兴趣的朋友可以进行更好的优化。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">场景二：自定义注解 + AOP  = 实现优雅的使用分布式锁</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">分布式锁的最常见的使用流程：</p></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201111202620.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">先看看最为常见的分布式锁使用方式的实现，然后再聊聊自定义注解怎么优雅的实现分布式锁的使用。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">普通的分布式锁使用方式：</span><span class="suffix" style="display: none;"></span></h5><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201114164532.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">通过上面的代码可以得到一个信息：如果有很多方法中需要使用分布式锁，那么每个方法中都必须有获取分布式锁和释放分布式锁的代码，这样一来就会出现代码冗余；</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">那有什么好的解决方案吗？      自定义注解使代码变得更加简洁、优雅；</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">自定义注解优雅的使用分布式锁：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、首先实现一个标记分布式锁使用的自定义注解：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.annotation<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;GetDistributedLock<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;获取redis分布式锁&nbsp;注解<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;16:24<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Target</span>(ElementType.METHOD)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Documented</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@interface</span>&nbsp;GetDistributedLock&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;分布式锁&nbsp;key</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;">String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">lockKey</span><span class="hljs-params" style="line-height: 26px;">()</span></span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;分布式锁&nbsp;value，默认为&nbsp;lockValue</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;">String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">lockValue</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">default</span>&nbsp;"lockValue"</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;过期时间，默认为&nbsp;300秒</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">expireTime</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">default</span>&nbsp;300</span>;<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、定义一个切面，在切面中对使用了 @GetDistributedLock  自定义注解的方法进行环绕增强通知：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>:&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.aop<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;DistributedLockAspect<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;自定义注解结合AOP切面编程优雅的使用分布式锁<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;16:52<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Component</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Aspect</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">DistributedLockAspect</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Logger&nbsp;logger&nbsp;=&nbsp;LoggerFactory.getLogger(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.getClass());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Autowired</span><br>&nbsp;&nbsp;&nbsp;&nbsp;RedisService&nbsp;redisService;<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Around&nbsp;环绕增强通知<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;joinPoint&nbsp;连接点，所有方法都属于连接点；但是当某些方法上使用了<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@GetDistributedLock</span>自定义注解时，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;则其将连接点变为了切点；然后在切点上织入额外的增强处理；切点和其相应的增强处理构成了切面Aspect&nbsp;。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Around</span>(value&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"@annotation(com.lyl.annotation.GetDistributedLock)"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Boolean&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">handlerDistributedLock</span><span class="hljs-params" style="line-height: 26px;">(ProceedingJoinPoint&nbsp;joinPoint)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;通过反射获取自定义注解对象</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetDistributedLock&nbsp;getDistributedLock&nbsp;=&nbsp;((MethodSignature)&nbsp;joinPoint.getSignature())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getMethod().getAnnotation(GetDistributedLock<span class="hljs-class" style="line-height: 26px;">.<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>)</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取自定义注解对象中的属性值</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;lockKey&nbsp;=&nbsp;getDistributedLock.lockKey();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;LockValue&nbsp;=&nbsp;getDistributedLock.lockValue();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;expireTime&nbsp;=&nbsp;getDistributedLock.expireTime();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(redisService.tryGetDistributedLock(lockKey,&nbsp;LockValue,&nbsp;expireTime))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取分布式锁成功后，继续执行业务逻辑</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>)&nbsp;joinPoint.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(Throwable&nbsp;throwable)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"业务逻辑执行失败。"</span>,&nbsp;throwable);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;最终保证分布式锁的释放</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redisService.releaseDistributedLock(lockKey,&nbsp;LockValue);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">③、最后，在 Controller 中的方法上使用 @GetDistributedLock 自定义注解即可；当某个方法上使用了 自定义注解，那么这个方法就相当于一个切点，那么就会对这个方法做环绕（方法执行前和方法执行后）增强处理；</p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">在浏览器中输入网址： http://127.0.0.1:8080/v1/api/user/getDistributedLock    回车后触发方法执行：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;自定义注解的使用</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@GetDistributedLock</span>(lockKey&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"userLock"</span>)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@GetMapping</span>(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"/user/getDistributedLock"</span>)<br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getUserDistributedLock</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"获取分布式锁..."</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;写具体的业务逻辑</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>}<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">通过自定义注解的方式，可以看到代码变得更加简洁、优雅。</p></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content">场景三：自定义注解 + AOP  = 实现日志的打印</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">先看看最为常见的日志打印的方式，然后再聊聊自定义注解怎么优雅的实现日志的打印。</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">普通日志的打印方式：</span><span class="suffix" style="display: none;"></span></h5><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201111214214.png" alt style="display: block; margin: 0 auto; max-width: 100%; border-radius: 4px; margin-bottom: 25px;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">通过看上面的代码可以知道，如果每个方法都需要打印下日志，那将会存在大量的冗余代码；</p></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">自定义注解实现日志打印：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、首先创建一个标记日志打印的自定义注解：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Author</span>:&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.annotation<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;PrintLog<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;自定义注解实现日志打印<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;18:05<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Target</span>(ElementType.METHOD)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Retention</span>(RetentionPolicy.RUNTIME)<br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Documented</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@interface</span>&nbsp;PrintLog&nbsp;{<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、定义一个切面，在切面中对使用了 @PrintLog 自定义注解的方法进行环绕增强通知：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@author</span>:&nbsp;【&nbsp;木子雷&nbsp;】&nbsp;公众号<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.aop<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;PrintLogAspect<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;自定义注解结合AOP切面编程优雅的实现日志打印<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-11-10&nbsp;18:11<br>&nbsp;**/</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Component</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Aspect</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">PrintLogAspect</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Logger&nbsp;logger&nbsp;=&nbsp;LoggerFactory.getLogger(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.getClass());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;Around&nbsp;环绕增强通知<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@param</span>&nbsp;joinPoint&nbsp;连接点，所有方法都属于连接点；但是当某些方法上使用了<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PrintLog</span>自定义注解时，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;则其将连接点变为了切点；然后在切点上织入额外的增强处理；切点和其相应的增强处理构成了切面Aspect&nbsp;。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Around</span>(value&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"@annotation(com.lyl.annotation.PrintLog)"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;Object&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">handlerPrintLog</span><span class="hljs-params" style="line-height: 26px;">(ProceedingJoinPoint&nbsp;joinPoint)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取方法的名称</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;methodName&nbsp;=&nbsp;joinPoint.getSignature().getName();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取方法入参</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;param&nbsp;=&nbsp;joinPoint.getArgs();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;sb&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;StringBuilder();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(Object&nbsp;o&nbsp;:&nbsp;param)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(o&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">";&nbsp;"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"进入《{}》方法,&nbsp;参数为:&nbsp;{}"</span>,&nbsp;methodName,&nbsp;sb.toString());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;object&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;继续执行方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;=&nbsp;joinPoint.proceed();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(Throwable&nbsp;throwable)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"打印日志处理error。。"</span>,&nbsp;throwable);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"{}&nbsp;方法执行结束。。"</span>,&nbsp;methodName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;object;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">③、最后，在 Controller 中的方法上使用 @PrintLog 自定义注解即可；当某个方法上使用了 自定义注解，那么这个方法就相当于一个切点，那么就会对这个方法做环绕（方法执行前和方法执行后）增强处理；</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@PrintLog</span><br><span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@GetMapping</span>(value&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"/user/findUserNameById/{id}"</span>,&nbsp;produces&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"application/json;charset=utf-8"</span>)<br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;String&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">findUserNameById</span><span class="hljs-params" style="line-height: 26px;">(@PathVariable(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"id"</span>)</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;id)&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;模拟根据id查询用户名</span><br>&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;userName&nbsp;=&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"木子雷&nbsp;公众号"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;userName;<br>}<br></code></pre><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">④、在浏览器中输入网址： http://127.0.0.1:8080/v1/api/user/findUserNameById/66    回车后触发方法执行，发现控制台打印了日志：</p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; padding-top: 15px; background: #fafafa; border-radius: 5px;">进入《findUserNameById》方法,&nbsp;参数为:&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">66</span>;&nbsp;<br>findUserNameById&nbsp;方法执行结束。。<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">使用自定义注解实现是多优雅，代码看起来简介干净，越瞅越喜欢；赶快去你的项目中使用吧，  嘿嘿。。。</p></blockquote><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">end 。。。 自定义注解介绍到这本文也就结束了，期待我们的下次见面。</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">最后，想问下文章开头的那两个问题大家心里是不是已经有了答案呢！嘿嘿。。</p></blockquote><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;"><font color="red">❤</font>  关注 + 点赞 + 收藏 + 评论 哟</span><span class="suffix"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="border: none; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; background: rgba(0, 0, 0, 0.05); color: #6a737d; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; padding: 15px 20px; line-height: 27px; background-color: rgb(239, 239, 239); border-left: none; display: block;"><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力；谢谢！</p><p style="padding-bottom: 8px; padding-top: 23px; margin: 0px; line-height: 26px; padding: 0px; font-size: 15px; color: rgb(89,89,89);">如果想要 Demo 源码的话，请您 VX搜索【木子雷】公众号，回复  <strong style="font-weight: bold; line-height: 1.75em; color: rgb(74,74,74);">“ 注解 ”</strong>  获取； 再次感谢您阅读本文！</p></blockquote><h2 data-tool="mdnice编辑器" style="padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; text-align: center; background-image: url(https://files.mdnice.com/mountain_2.png); background-position: center center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; margin-bottom: 10px;"><span class="prefix" style="display: none;"></span><span class="content" style="text-align: center; display: inline-block; height: 38px; line-height: 42px; color: rgb(60, 112, 198); background-position: left center; background-repeat: no-repeat; background-attachment: initial; background-origin: initial; background-clip: initial; background-size: 63px; margin-top: 38px; font-size: 18px; margin-bottom: 10px;">参考资料</span><span class="suffix"></span></h2><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">①、<a href="https://blog.csdn.net/xsp_happyboy/article/details/80987484" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">自定义注解详细介绍</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">②、<a href="https://www.jianshu.com/p/a7bedc771204" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">Java 自定义注解及使用场景</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">③、<a href="https://mp.weixin.qq.com/s?__biz=MzIwODI1OTk1Nw==&amp;mid=2650321584&amp;idx=1&amp;sn=a60ceaa2c6861cc049fff19f863d8445&amp;chksm=8f09ccaab87e45bcd52545260360ad7f17d475a8d78c316f72a6145f71cc961a330dca7ef556&amp;cur_album_id=1572067359299846145&amp;scene=189#rd" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">想自己写框架？不会写Java注解可不行</a></p><p data-tool="mdnice编辑器" style="font-size: 16px; padding-bottom: 8px; margin: 0; padding-top: 23px; color: rgb(74,74,74); line-height: 1.75em;">④、<a href="https://mp.weixin.qq.com/s/387fQ17r9oRYd7LDPYuQPw" target="_blank" rel="noopener" style="word-wrap: break-word; font-weight: bold; color: rgb(60, 112, 198); text-decoration: none; border-bottom: 1px solid rgb(60, 112, 198);">看看人家那后端 API 接口写得，那叫一个优雅！</a></p></section>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池连接耗尽，导致tomcat请求无响应，呈现出假死状态</title>
      <link href="/2020/10/18/check_tomcat_false_die/"/>
      <url>/2020/10/18/check_tomcat_false_die/</url>
      
        <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"><h2 id="h" style="line-height: inherit; margin: 1.5em 0px; font-weight: bold; margin-bottom: 1.5em; margin-right: 3px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 6px solid rgb(100, 201, 248); border-radius: 5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px; font-size: 1.6em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">前言：</span></h2><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">最近，测试部门的同事找到我，说他们测试时，没一会就发现服务接口请求一直无响应，Tomcat跟死掉了一样，也没有返回任何的错误响应，说让我赶紧排查下；听完后，我瞬间激灵了下，妹的，最近老是出问题，领导都要给我开批评大会了。哈哈，开玩笑的，像我这么英俊的人，领导怎么会忍心批评我呢，哼，我把这个问题马上解决掉，都不会让领导知道的！</p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">简单说下程序部署情况：tomcat + oracle</p><h2 id="h-1" style="line-height: inherit; margin: 1.5em 0px; font-weight: bold; margin-bottom: 1.5em; margin-right: 3px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 6px solid rgb(100, 201, 248); border-radius: 5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px; font-size: 1.6em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">排查过程：</span></h2><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">排查时，可以使用命令进行排查，也可以使用可视化监控工具；例如使用使用JDK自带的 jvisualvm.exe 监控工具。</p></blockquote><h3 id="h-2" style="line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(100, 201, 248); margin-bottom: 50px; color: rgb(255, 255, 255); font-size: 1.4em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(100, 201, 248) none repeat scroll 0% 0%; padding: 4px 10px; border-radius: 5px; box-shadow: black 6px 6px 12px;">命令排查过程：</span></h3><h4 id="h1tomcat" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1、请求服务无响应，首先看看tomcat是否是真的挂掉了：</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令： ps -ef | grep tomcat  </p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过上面的命令查看tomcat运行着；执行结果如下：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018141154.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;"><strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">注意：</strong> 如果此服务器中运行着多个tomcat，需要查看下图中画框的地方运行的tomcat地址是否正确；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过命令查看发现，tomcat正常运行着，那么这就是处于假死状态，下面接着排查。</p><h4 id="h2httptomcat" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2、查看http请求是否到达了tomcat：</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过查看 tomcat 的 logs 目录下的 localhost_access_log  日志文件中 请求记录；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令： tail -100f  localhost_access_log  </p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过上面的命令查看实时的日志，执行完上面的查看日志的命令后，然后再次请求下程序，在日志中并没有发现请求记录，说明tomcat处于一种假死状态，下面接着排查。</p><h4 id="h3tomcatjvmgc" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">3、查看tomcat的JVM的GC情况：</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">查看GC情况，是否由于频繁的GC，长时间的GC，导致程序出现长时间的卡顿，最终导致请求来不及处理，进入队列中进行等待，调用方长时间得不到响应，造成tomcat假死状态；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令：jstat  -gc  pid   time  count</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">例如： **jstat  -gc  71129   1000  5 **    监控 71129 这个进程JVM的GC情况，每隔1000ms 输出一次，共输出5次；</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018143712.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令执行结果参数解析：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018150032.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过上面命令查看GC情况，发现垃圾回收也不频繁，并且进行GC的时间也不长，应该不是GC的原因。</p><h4 id="h4tomcatjvm" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">4、查看tomcat的JVM的堆情况：</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">查看堆内存的情况，是否存在堆内存溢出 导致tomcat假死，无法为新请求分配堆内存资源；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令 ： jmap  -heap  pid     </p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">例子： jmap  -heap  71129       <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">71129是正在运行tomcat的进程号</strong> ；</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018152004.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过命令执行结果得知，堆内存中可使用内存还很大，不会出现内存溢出的问题，所以也不是堆内存过小导致的tomcat假死。</p><h4 id="h5tomcatjvm" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">5、查看tomcat的 JVM线程情况：</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">①、使用 jstack 命令导出当前JVM的线程dump快照，然后看看dump中线程都在干什么？</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令：jstack   pid   &gt;&gt;   jvmThreadDump.log</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">例子：jstack  71129  &gt;&gt;   jvmThreadDump.log     </p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">生成 71129 进程的 JVM的线程快照，并将快照内容重定向到 jvmThreadDump.log 文件中；    </p>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">注意：生成的  jvmThreadDump.log 在你当前执行命令的目录下。</p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">②、接着使用命令 more  查看 jvmThreadDump.log  内容；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令 ： more  jvmThreadDump.log</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">如果的dump文件太大的话，需要使用more 命令一点点看；执行完more 命令的话，再按 enter 回车键 一点点展示文件内容；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">③、通过查看线程快照文件，发现很多线程的状态是  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">WAITING</strong> 等待状态；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">并且使用命令查看线程状态为  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">WAITING</strong>  的线程占总线程的比例：</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;"><strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">注意：tomcatDump.log  为生成的线程快照文件名称，记得改为自己设置的名称</strong> ；</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><code class="shell language-shell hljs" style="overflow-wrap: break-word; margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46) none repeat scroll 0% 0%; overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">count=`cat&nbsp;tomcatDump.log&nbsp;|&nbsp;grep&nbsp;java.lang.Thread.State&nbsp;|&nbsp;wc&nbsp;-l`;&nbsp;wait=`cat&nbsp;tomcatDump.log&nbsp;|&nbsp;grep&nbsp;WAITING&nbsp;|&nbsp;wc&nbsp;-l`;&nbsp;&nbsp;a=`echo&nbsp;|&nbsp;awk&nbsp;"{print&nbsp;$wait/$count*100}"`;&nbsp;echo&nbsp;"$a%"<br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">执行命令，得到结果 ： **91.9786% **  ，发现九成多的线程处于等待状态；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">至此，找到了tomcat假死的原因，但是还需进一步确定  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">什么原因导致的大量线程一直等待？</strong>  </p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">通过查看调用的服务接口代码得知，此接口业务逻辑中自己没设置任何的锁，所以应该不是自己写的代码的问题，但是此接口中涉及到了很多 JDBC数据库操作，那是不是数据库连接池中的连接不够用了呢？因为数据库连接属于竞争资源，如果连接池中的连接已经耗尽了，那么接下来的进行 JDBC的线程就需要进行wait 等待连接。</p></blockquote><h4 id="h6tcp" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">6、查看与数据库建立的TCP连接情况：</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">在上面发现，大量线程处于等待状态，而通过分析得知，可能是由于数据库连接池中的连接耗尽导致的，所以可以通过命令查看下，部署服务代码的服务器与数据库所在服务器建立的TCP连接数是否已经达到了配置的数据库连接池的最大连接数；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">命令：netstat  -pan | grep 1521 | wc -l</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">因为本文中使用的数据库是Oracle，所以 grep  搜索匹配的端口号是 1521；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">如果是mysql数据库则将端口号改为3306 即可， netstat  -pan | grep  3306 | wc -l   ；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">如果设置了自定义的数据库端口号，则改为自定义的端口号即可；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过命令查询到 已经使用的数据库的连接数为  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">6</strong>  个，那接着看下设置的数据库连接池最大连接数；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">数据源配置如下：</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><code class="xml language-xml hljs" style="overflow-wrap: break-word; margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46) none repeat scroll 0% 0%; overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-tag" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">&lt;<span class="hljs-name" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;">Resource</span>&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">name</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"jdbc/testdemo"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">type</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"javax.sql.DataSource"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">factory</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"com.alibaba.druid.pool.DruidDataSourceFactory"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">url</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"jdbc:oracle:thin:@192.168.3.125:1521:ora11g"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">driverClassName</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"oracle.jdbc.driver.OracleDriver"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">username</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"root"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">password</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"root"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">auth</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"Container"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">initialSize</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"2"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">maxActive</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"6"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">minIdle</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"3"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">maxWait</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"30000"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">timeBetweenEvictionRunsMillis</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"30000"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">minEvictableIdleTimeMillis</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"600000"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">maxEvictableIdleTimeMillis</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"900000"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">poolPreparedStatements</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"true"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">maxOpenPreparedStatements</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"20"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">validationQuery</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"select&nbsp;1&nbsp;from&nbsp;dual"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">testOnBorrow</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"false"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">testOnReturn</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"false"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">testWhileIdle</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"true"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-attr" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;">filters</span>=<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;">"wall,stat,log4j2"</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&gt;</span><br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过查看数据源发现，连接池配置的最大连接数是  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">maxActive="6"</strong>  ；发现目前程序中使用的连接数已达到最大值，那么后面再进行 JDBC 操作的线程将进入  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">等待状态</strong> ，等待获取连接；</p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">至此，tomcat假死的排查过程就结束了，并且原因也找到了，就是数据库连接池中的连接耗尽了；所以，在后面测试中，需要在数据源中将最大连接数设置的大一些，并且也再进一步查看下代码，看看是否存在数据库连接使用完后没有进行关闭的问题。</p>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">除了数据库连接池连接耗尽会导致tomcat假死外，还有一些其它的情况也会导致发生，例如： redis 连接池连接耗尽，或者是redis连接使用完不释放，最终导致redis连接耗尽。</p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">除了使用上面的命令进行问题排查外，也可以直接使用可视化监控工具进行排查，更加简便、直观。</p><h3 id="h-3" style="line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; border-bottom: 2px solid rgb(100, 201, 248); margin-bottom: 50px; color: rgb(255, 255, 255); font-size: 1.4em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; display: inline-block; background: rgb(100, 201, 248) none repeat scroll 0% 0%; padding: 4px 10px; border-radius: 5px; box-shadow: black 6px 6px 12px;">可视化监控工具排查</span></h3><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">使用 JDK 自带的  jvisualvm.exe  工具进行 <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">JMX远程</strong> 可视化监控tomcat；</p>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">jvisualvm.exe 位于 $JAVA_HOME/bin   目录下；</p></blockquote><h4 id="h1jmx" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1、使用JMX实现远程监控步骤：</span></h4><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">下面使用 JMX实现远程监控的内容参考自：<a href="https://www.cnblogs.com/leocook/p/jvisualvmandtomcat.html" target="_blank" rel="noopener" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">jvisualvm远程监控tomcat</a></p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">①、在 Tomcat  的 bin 目录下的  startup.sh  文件中的倒数第二行（也就是  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">exec "<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, Times New Roman, serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px none; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 1em; vertical-align: -0.25em;"></span><span class="mord mathit" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic; margin-right: 0.13889em;">P</span><span class="mord mathit" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic; margin-right: 0.00773em;">R</span><span class="mord mathit" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">G</span><span class="mord mathit" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic; margin-right: 0.02778em;">D</span><span class="mord mathit" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic; margin-right: 0.07847em;">I</span><span class="mord mathit" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic; margin-right: 0.00773em;">R</span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">"</span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">/</span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">"</span></span></span></span>EXECUTABLE" start "$@"</strong>  一行上边）加上如下内容：</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><code class="shell language-shell hljs" style="overflow-wrap: break-word; margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46) none repeat scroll 0% 0%; overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">export&nbsp;CATALINA_OPTS="$CATALINA_OPTS<br>-Dcom.sun.management.jmxremote<br>-Djava.rmi.server.hostname=192.168.1.130<br>-Dcom.sun.management.jmxremote.port=7003<br>-Dcom.sun.management.jmxremote.ssl=false<br>-Dcom.sun.management.jmxremote.authenticate=false"<br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">上面内容参数解析：</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><code class="shell language-shell hljs" style="overflow-wrap: break-word; margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46) none repeat scroll 0% 0%; overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">-Dcom.sun.management.jmxremote&nbsp;启用JMX远程监控<br>-Djava.rmi.server.hostname=192.168.1.130&nbsp;&nbsp;这是连接你的tomcat所在的服务器地址<br>-Dcom.sun.management.jmxremote.port=7003&nbsp;&nbsp;jmx连接端口<br>-Dcom.sun.management.jmxremote.ssl=false&nbsp;&nbsp;是否ssl加密<br>-Dcom.sun.management.jmxremote.authenticate=false&nbsp;&nbsp;远程连接需要密码认证<br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">在 startup.sh 文件中添加上上面的内容后，需要将tomcat重启下才会生效；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">②、将 jvisualvm.exe 打开，界面如下：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018193040.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">③、在远程上右击，添加主机，输入服务器的ip：就是在 startup.sh 文件中添加内容中的hostname</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018193045.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">④、在远程主机上右击，添加 <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">JMX连接</strong> ，手动在ip地址后面加上设置的jmx连接端口7003，然后点击确定即可：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018193051.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">⑤、通过上面的步骤，就已经完成了远程监控连接了，然后自己双击就能进行监控界面了：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018193750.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2、查看监视内容：</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018200144.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过查看监视画面得知，CPU、GC、堆Heap的情况都没有问题，那接着查看下线程的情况：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018200843.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">点击上面图片中的  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">线程Dump</strong>  按钮，生成线程的快照，快照文件内容部分如下：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201018201455.png" alt="" title="" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">通过查看快照文件内容发现，很多线程的状态的都是  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">WAITING</strong>  等待状态；</p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">接下来的分析排查过程就如上面的  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">命令排查过程</strong>  一样了。</p></blockquote><h2 id="h-4" style="line-height: inherit; margin: 1.5em 0px; font-weight: bold; margin-bottom: 1.5em; margin-right: 3px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 6px solid rgb(100, 201, 248); border-radius: 5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px; font-size: 1.6em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">总结：</span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">上面的两种排查方式，本人比较推荐还是使用第一种  <strong style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;">命令排查</strong>  ，因为很多的情况是不会让你修改配置文件进行远程监控的，即便使用监控工具看起来更加直观、简便；所以，平时需要记一些常用的排查命令，以备不时之需。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;">由于本人水平有限，如有问题，敬请提出；</p><h2 id="hfontcolorredfont" style="line-height: inherit; margin: 1.5em 0px; font-weight: bold; margin-bottom: 1.5em; margin-right: 3px; padding: 8px 15px; letter-spacing: 2px; background-image: linear-gradient(to right bottom, rgb(0, 188, 212), rgb(63, 81, 181)); background-color: rgb(63, 81, 181); color: rgb(255, 255, 255); border-left: 6px solid rgb(100, 201, 248); border-radius: 5px; text-shadow: rgb(102, 102, 102) 1px 1px 1px; box-shadow: rgb(102, 102, 102) 1px 1px 2px; font-size: 1.6em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><font color="red" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</span></h2><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251) none repeat scroll 0% 0%; overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote></div>]]></content>
      
      
      <categories>
          
          <category> 实战问题排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线上服务平均响应时间太长，怎么排查？</title>
      <link href="/2020/10/06/check_service_response_time_long/"/>
      <url>/2020/10/06/check_service_response_time_long/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>最近线上环境某个接口服务响应时间偏长，导致用户体验超差，那平时该怎么快速的排查这类问题呢？</p><p>①、为代码添加上详细的打印日志； <strong>不建议</strong> ，一是线上环境，没法随便的重新部署更换了详细日志的代码，二是 添加详细的日志输出，那就意味这会生成大量的日志文件，这些日志文件会占据大量服务器磁盘空间。</p><p>②、搭建一个模拟了线上环境的测试环境进行复盘排查；额，出现了这种问题哪有那么多的时间让你进行环境复盘排查，所以此方案也是 <strong>不建议的</strong> 。</p><p>③、线上诊断神器 <strong><a href="https://arthas.aliyun.com/zh-cn/" target="_blank" rel="noopener">Arthas</a></strong> ，这个工具是阿里开源的，专门用于线上环境问题排查的，这个工具提供了很多       的  <strong>命令</strong> 用来排查问题； 当出现上面的响应时间偏长的问题，就可以使用 Arthas 提供的  <strong><a href="https://arthas.aliyun.com/doc/trace.html" target="_blank" rel="noopener">trace</a></strong>  命令进行排查，使用这个工具的 trace 命令可以统计到方法中整个调用链路上的所有性能开销和追踪调用链路，查找其中耗时比较长的方法再具体排查即可。</p></blockquote><p>文章接下来将从两方面展开：</p><p>①、搭建模拟线上服务接口响应时间偏长的环境；SpringBoot 服务接口 +  JMeter 模拟服务接口调用；</p><p>②、使用诊断神器 Arthas 提供的命令 <strong>trace</strong> 命令进行响应时间偏长的问题排查；</p><h2 id="模拟线上环境："><a href="#模拟线上环境：" class="headerlink" title="模拟线上环境："></a>模拟线上环境：</h2><p>1、SpringBoot 项目搭建，并且编写好服务接口；</p><blockquote><p>注意：服务接口代码为了简便，只写了 <strong>一些大循环的代码</strong> 来模拟较长的耗时；除此之外，实际上还包含很多多其它常见的情况，例如：</p><p>①、服务接口方法中存在很多的  <strong>JDBC 操作</strong> ，并且由于数据库中数据量太大，导致很多的 JDBC 查询非常耗时，并且此时可能由于还没有创建合适的索引，导致查询耗时更加的长，最终导致服务接口响应时间偏长；</p><p>②、此服务接口中调用了 <strong>其它的服务接口</strong> ，由于内部调用的其它服务接口出现问题等，导致此其它服务接口执行耗时比较长，进而导致服务接口响应时间偏长；</p></blockquote><p>服务接口代码如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006090936.png" alt=""></p><p>test1、test2方法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006091514.png" alt=""></p><p>2、JMeter 模拟用户调用的测试脚本配置：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006133811.png" alt=""></p><p>3、服务接口 SpringBoot 代码 和  JMeter 测试脚本的所在项目位置：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006140157.png" alt=""></p><blockquote><p>服务接口代码准备好后，使用IDEA开发工具将其导出为 Jar 包 。</p><p>服务接口代码和JMeter脚本获取地址： <a href="https://github.com/leishen6/springboot_arthas" target="_blank" rel="noopener">https://github.com/leishen6/springboot_arthas</a></p></blockquote><p>为了模拟最为真实的线上环境，需将准备好的 服务接口 Jar 包放到 服务器中，然后使用命令  <strong>java -jar  *.jar</strong>  运行起 Jar 包； 然后使用 JMeter  进行接口的调用，在 <strong>聚合报告</strong> 中发现平均响应时间偏长；如图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006155900.png" alt=""></p><p>如果有用户反映某功能响应时间太长了，别着急，根据下面的方法进行排查，绝对方便又快速的找到问题原因。</p><h2 id="Arthas-问题排查："><a href="#Arthas-问题排查：" class="headerlink" title="Arthas 问题排查："></a>Arthas 问题排查：</h2><p>1、首先需要下载阿里开源的Arthas 的诊断工具 Jar 包，下载地址：<a href="https://arthas.aliyun.com/arthas-boot.jar" target="_blank" rel="noopener">arthas-boot.jar</a> ；然后将 Jar 包放到 <strong>部署服务接口项目的服务器中</strong> 。</p><p>2、然后使用 ps 命令，查询出当前运行服务接口的程序进程号；例如：本文章模拟的服务接口程序 Jar 包名称为 springboot_arthas-1.0.0.jar ，所以命令为： <strong>ps -ef | grep springboot_arthas-1.0.0</strong>  。</p><p>3、然后运行Arthas 诊断工具，命令：java  -jar  arthas-boot.jar ；开始运行的界面如图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006161906.png" alt=""></p><p>此时诊断工具还没有运行完，需要手动选择要诊断/监控的java 进程，并且此工具也会列出全部的java进程号，你只需要输入 它们最前的序号  <strong>[1]</strong>  即可；如图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006163602.png" alt=""></p><p>4、运行完后，可以使用 <strong><a href="https://arthas.aliyun.com/doc/trace.html" target="_blank" rel="noopener">trace命令</a></strong> 监控服务接口方法中调用的其它方法的耗时；</p><p><code>trace</code> 命令能主动搜索 <code>class-pattern</code>／<code>method-pattern</code> 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。</p><p>具体命令格式： trace  [全限定类名]  [类中的方法名]</p><p>例如：监控本服务接口；</p><p> com.lyl.controller.TestController : 全限定类名，process：TestController 类中的方法；</p><p>具体命令：  <strong>trace   com.lyl.controller.TestController   process</strong></p><p>5、trace 命令执行结果展示，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201006174655.png" alt=""></p><blockquote><p>通过trace 命令监控统计的调用链路各个方法的执行耗时，可以发现调用的 com.lyl.util.StringUtil 类中的 test2() 方法执行耗时比较大；所以需要特别去查看这个方法的代码是否存在问题；如果这个代码中还存在许多的方法调用链路，则需要再次使用 trace 命令进行监控调用链路的耗时，找出具体可能存在问题的方法。</p></blockquote><p>Arthas  阿里开源的诊断工具还提供了很多的命令供使用，大家可以去查看学习，地址：<a href="https://arthas.aliyun.com/doc/commands.html" target="_blank" rel="noopener">命令列表</a>  。</p><blockquote><p><strong>注意：</strong></p><p>①、使用Arthas 诊断的程序代码，在打包时 <strong>不能混淆</strong> ，否则在使用trace 命令会报  <strong>类或方法找不到</strong>  ；</p><p>②、在使用trace命令监控统计时，需要JMeter测试脚本正在运行调用服务接口，如果没有调用，则统计不到内部调用链路的耗时情况；</p></blockquote><p>由于本人水平有限，如有问题，敬请提出；</p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实战问题排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JMeter压测时跑一会聚合报告就不动了？</title>
      <link href="/2020/09/24/JMeter_pressuretest_problem/"/>
      <url>/2020/09/24/JMeter_pressuretest_problem/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>最近，使用 JMeter 对项目进行压力测试；起初， JMeter 设置的并发线程数只是10个，然后在进行压力测试时，发现跑了一会后  JMeter  聚合报告 中的中数字全部不动了（像卡死了一样）；</p></blockquote><p>上面简单描述了本文要说的问题；下面将主要从两方面来进行聊。 </p><p>①、具体问题描述    </p><p>②、具体的排查思路   </p><h2 id="问题详述："><a href="#问题详述：" class="headerlink" title="问题详述："></a>问题详述：</h2><blockquote><p>项目部署情况： 提供服务接口的项目 +  Tomcat   +  Oracle</p><p>提供服务接口的项目：接口中包含很多的数据库查询、更新、新增操作；</p><p>部署项目的应用服务器： Tomcat</p><p>连接的关系数据库： Oracle</p><p>数据源配置 ： 在Tomcat中的 <strong>context.xml</strong>  中配置数据源，连接池使用的是 Druid；</p></blockquote><p>根据上面的部署情况， 然后使用 JMeter 进行压测，就出现了文中一开头说的问题，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200924191357.png" alt=""></p><h2 id="问题排查："><a href="#问题排查：" class="headerlink" title="问题排查："></a>问题排查：</h2><blockquote><p>下面会简单的描述下此问题的排查过程，让大家在面对这种问题时，可以有一些思路。</p><p><strong>鉴于本人水平有限，如有问题敬请提出。</strong>   </p></blockquote><h3 id="1、查看-JMeter-结果树："><a href="#1、查看-JMeter-结果树：" class="headerlink" title="1、查看 JMeter 结果树："></a>1、查看 JMeter 结果树：</h3><p>首先看下 JMeter 结果树 中是否存在错误的日志，如果存在，然后看看是什么问题，具体进行解决；</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200924191959.png" alt=""></p><p>但是，本文遇到这个问题时，发现结果树中并没有输出错误日志，说明请求接口时未出现问题；</p><h3 id="2、服务端排查："><a href="#2、服务端排查：" class="headerlink" title="2、服务端排查："></a>2、服务端排查：</h3><blockquote><p>因为 JMeter 结果树中未展示出错误的内容，说明此时程序是正常运行着；</p><p>然后查看服务端日志，发现没有出现任何 异常 日志；</p></blockquote><p>看到这，就发现怪异之处了，服务端也没有报任何错误，那问题到底出在哪里呢？</p><p>别着急，还得去看  JMeter  的聚合报告去，通过聚合报告可以发现一些问题，就是聚合报告中 请求接口的平均响应时间太长了，高达 2 秒多，这个不正常呀，但是代码逻辑确保是没有任何问题的；</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200924195913.png" alt=""></p><p> 噢，对了，接口中存在很多数据库操作，是不是数据库出现了问题，导致数据库操作比较耗时呢；通过查看数据库服务发现是正常的；那是不是连接数不够用了呢？ 嗯嗯，那来看下具体数据源的配置信息：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200924201646.png" alt=""></p><p>通过查看 数据源 的配置信息发现，Druid 连接池没有配置  <strong>最大连接数 以及最小连接数等</strong> ；要知道  <strong>druid默认的最大连接数是 8</strong> ，然后咱再去使用命令查询下当前数据库的连接数： <strong>netstat -pan | grep  1521  | wc -l</strong>   ，发现连接数是 8，说明当前压测时，连接数已经到达了最大值；由于连接不够用，导致程序中进行 JDBC 数据库操作时需要等待可用连接，所以说非常耗时，响应时间就慢了，进而导致大量到达 Tomcat的请求得不到及时的处理，最终导致 JMeter 像卡死一样。</p><p>解决方式：在数据源配置中添加上  <strong>最大连接数等</strong>  ；完整数据源配置如下：</p><p>最大连接数设置为了  maxActive=”300” ； 最小连接数设置为了  minIdle=”50” 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/testdemo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">factory</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">url</span>=<span class="string">"jdbc:oracle:thin:@192.168.3.125:1521:ora11g"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">driverClassName</span>=<span class="string">"oracle.jdbc.driver.OracleDriver"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">password</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">initialSize</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxActive</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">minIdle</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">maxWait</span>=<span class="string">"30000"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">timeBetweenEvictionRunsMillis</span>=<span class="string">"30000"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">minEvictableIdleTimeMillis</span>=<span class="string">"600000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxEvictableIdleTimeMillis</span>=<span class="string">"900000"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">poolPreparedStatements</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">maxOpenPreparedStatements</span>=<span class="string">"20"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">validationQuery</span>=<span class="string">"select 1 from dual"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">testOnBorrow</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">testOnReturn</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">testWhileIdle</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">filters</span>=<span class="string">"wall,stat,log4j2"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p>在项目进行压测前，一定记得需要结合当前机器的配置，以及制定的压测计划对一些参数进行优化；下面简单的说几方面，如果有不同见解，大家可以评论补充；例如：</p><p>①、如果 JMeter 设置的并发数比较大的话，需要将 Tomcat  的 <strong>连接器参数</strong>  进行优化一下，否则可能会出现请求处理超时，没有更多的线程去处理连接请求；</p><p>②、还有需要对 Tomcat  进行 JVM 参数调试，根据当前机器的硬件配置进行合理的  JVM  参数设置；</p><p>③、最后，特别重要的是 <strong>连接池</strong>  的配置，例如 ：数据库连接池、redis连接池等，进行合理的大小配置；</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 实战问题排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>索引该怎么创建？</title>
      <link href="/2020/08/29/how_do_create_index/"/>
      <url>/2020/08/29/how_do_create_index/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>想要彻底明白索引该怎么创建，以及怎样创建出最合理的索引，首先需要对一些知识要有所了解；</p><p>本文将从以下几方面来进行阐述：</p><ul><li>索引的相关知识（包括索引数据结构等）；</li><li>索引创建的准则/依据；</li><li>学会查看sql执行计划，以及哪些sql执行时会导致索引失效；</li></ul></blockquote><h2 id="索引基本知识："><a href="#索引基本知识：" class="headerlink" title="索引基本知识："></a>索引基本知识：</h2><h4 id="1、索引的数据结构："><a href="#1、索引的数据结构：" class="headerlink" title="1、索引的数据结构："></a>1、索引的数据结构：</h4><blockquote><p>索引的数据机构是 B+Tree，B+Tree 是一个多路平衡查找树。</p></blockquote><h5 id="1-1、至于为什么索引使用此数据机构呢？"><a href="#1-1、至于为什么索引使用此数据机构呢？" class="headerlink" title="1.1、至于为什么索引使用此数据机构呢？"></a>1.1、至于为什么索引使用此数据机构呢？</h5><p>最主要一个原因就是：使用B+Tree这种数据机构的索引，在进行sql查询时只需要较少的几次磁盘IO 即可，所以会大大提升查询效率；具体原因可参考：<a href="https://www.cnblogs.com/kismetv/p/11582214.html" target="_blank" rel="noopener">【深入学习MySQL】MySQL的索引结构为什么使用B+树？</a></p><h5 id="1-2、索引-B-Tree-结构的特性："><a href="#1-2、索引-B-Tree-结构的特性：" class="headerlink" title="1.2、索引 B+Tree 结构的特性："></a>1.2、索引 B+Tree 结构的特性：</h5><p>①、B+Tree 只有叶子节点会存储真实的数据，非叶子节点只会存储索引字段值；</p><p>②、B+Tree的叶子节点之间使用 双向链表 链接，所以更加适合范围查询和排序；</p><h4 id="2、索引的类型："><a href="#2、索引的类型：" class="headerlink" title="2、索引的类型："></a>2、索引的类型：</h4><p>在平时创建的索引中，可以将索引大体分为两类：</p><p>①、聚簇索引（主键索引） ②、非聚簇索引（二级索引）</p><p>二级索引根据索引中的字段个数可以分为：</p><p>①、单字段索引  ②、联合索引 / 复合索引（多个字段组成的索引）</p><h4 id="3、不同类型索引在磁盘中的B-Tree的存储结构："><a href="#3、不同类型索引在磁盘中的B-Tree的存储结构：" class="headerlink" title="3、不同类型索引在磁盘中的B+Tree的存储结构："></a>3、不同类型索引在磁盘中的B+Tree的存储结构：</h4><h5 id="3-1、聚簇索引：（主键索引）"><a href="#3-1、聚簇索引：（主键索引）" class="headerlink" title="3.1、聚簇索引：（主键索引）"></a>3.1、聚簇索引：（主键索引）</h5><blockquote><p>聚簇索引：当表中创建了主键，默认就会生成主键索引；</p></blockquote><p>聚簇索引的B+Tree索引结构中，非叶子节点中存储的是  <strong>ID主键值</strong> ，存储在叶子节点中的真实数据是具体的 <strong>行记录</strong> ； 结构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200828224408.png" alt=""></p><h5 id="3-2、单字段索引：（二级索引）"><a href="#3-2、单字段索引：（二级索引）" class="headerlink" title="3.2、单字段索引：（二级索引）"></a>3.2、单字段索引：（二级索引）</h5><blockquote><p>单字段索引：手动创建的索引，由 <strong>一个字段</strong> 组成的索引；</p></blockquote><p>单字段索引的B+Tree索引结构中，非叶子节点中存储的是 <strong>索引字段值</strong>，存储在叶子节点中的数据部分是  <strong>主键值</strong> 。结构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200828224416.png" alt=""></p><h5 id="3-3、联合索引：（二级索引）"><a href="#3-3、联合索引：（二级索引）" class="headerlink" title="3.3、联合索引：（二级索引）"></a>3.3、联合索引：（二级索引）</h5><blockquote><p>联合索引：手动创建的索引，由 <strong>多个字段</strong> 组成的索引；</p></blockquote><p>联合索引的B+Tree索引结构中，非叶子节点中存储的是 <strong>多个索引字段值</strong>，存储在叶子节点中的数据部分是 <strong>主键值</strong> 。结构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200828224424.png" alt=""></p><h4 id="4、回表："><a href="#4、回表：" class="headerlink" title="4、回表："></a>4、回表：</h4><blockquote><p>什么是回表？</p><p><strong>回表</strong> 是发生在 <strong>二级索引</strong> 中的；在使用二级索引查询数据时，如果 <strong>select 投影列</strong> 中拥有 索引字段和主键 之外的字段时，此时就需要 回表；使用在二级索引树中查询到的 主键值 去主键索引树中查询具体的行记录，然后在具体行记录中取得最终的 select 投影列 数据。</p></blockquote><h5 id="4-1、举例说明："><a href="#4-1、举例说明：" class="headerlink" title="4.1、举例说明："></a>4.1、举例说明：</h5><p>数据表：t_user</p><p>字    段：id（主键）、name、age、address、sex</p><p>索    引：index( name, age )   <strong>测试的这个索引是 联合索引，单字段索引也是一样的原理</strong></p><p>Sql语句：select  <strong>name, age, address, sex</strong>  from  t_user where  name=’黎明’  and  age=18</p><p>上面的sql语句执行时，就会发生回表；具体执行步骤如下：</p><p>①、执行时，首先会使用到 联合索引 index( name, age )，在此索引树中查询时，最终在叶子节点中查询到数据，发现此时最终只能得到 name、age、id 三个字段的数据，发现 address、age 这两个字段的数据没有得到，所以只能再根据查询到主键值去主键索引树中查询；</p><p>②、拿着 id主键值 去主键索引树中查询具体的行记录，然后在行记录中取出select投影列需要的字段的数据，最后返回。</p><h5 id="4-2、扩展："><a href="#4-2、扩展：" class="headerlink" title="4.2、扩展："></a>4.2、扩展：</h5><blockquote><p>根据上面举的例子可以知道什么时候会发生回表，但是发生回表就代表着 查询效率 会比较低下的，因为需要走两边索引树（二级索引树 + 主键索引树）；所以一般情况下需要避免回表的发生；怎么避免发生呢？这又涉及到了 <strong>覆盖索引</strong>  这个知识点。下面就来介绍下  <strong>覆盖索引的知识</strong> 。</p></blockquote><h4 id="5、覆盖索引："><a href="#5、覆盖索引：" class="headerlink" title="5、覆盖索引："></a>5、覆盖索引：</h4><blockquote><p>覆盖索引：大白话就是 将select 的投影列字段全部放入到 索引中；</p></blockquote><h5 id="5-1、举例说明："><a href="#5-1、举例说明：" class="headerlink" title="5.1、举例说明："></a>5.1、举例说明：</h5><p>数据表：t_user</p><p>字    段：id（主键）、name、age、address、sex</p><p>索    引：index( name, age )  </p><p>Sql语句：select  <strong>name, age, address, sex</strong>  from  t_user  where  name=’黎明’  and  age=18</p><p>这个sql执行时，会发生回表；</p><p>发生回表的原因通过上面的解释应该也清楚了些，所以如果 将索引  <strong>index( name, age )</strong>  改为 *<em>index( name, age, address, sex ) *</em> 后，在执行上面的sql 就 不会发生回表了，并且提高了查询效率， 这就是 覆盖索引。</p><p>但是，索引的创建及维护也是需要耗费代价的，并且这种代价也是随着索引中索引字段的个数增加而增加的，所以覆盖索引需要根据实际情况使用。</p><h4 id="6、最左前缀原则："><a href="#6、最左前缀原则：" class="headerlink" title="6、最左前缀原则："></a>6、最左前缀原则：</h4><blockquote><p>说到索引的最左前缀原则，就必须说下  <strong>索引长度</strong>  这个概念了；</p></blockquote><p>索引长度指的是 索引字段列的 前缀长度索引；</p><p>例如：name字段的长度设置为100，但是在以name设置索引时设置的索引长度为20；意思就是创建的索引中存储的索引key键值就是name字段值的前20长度的内容。</p><h5 id="6-1、索引的最左前缀原则的两种情况："><a href="#6-1、索引的最左前缀原则的两种情况：" class="headerlink" title="6.1、索引的最左前缀原则的两种情况："></a>6.1、索引的最左前缀原则的两种情况：</h5><p>①、索引字段的最左前缀原则；</p><p>②、联合索引的最左前缀原则；</p><h5 id="6-2、索引字段的最左前缀原则："><a href="#6-2、索引字段的最左前缀原则：" class="headerlink" title="6.2、索引字段的最左前缀原则："></a>6.2、索引字段的最左前缀原则：</h5><p>根据 索引长度 应该就可以明白了 索引字段的最左前缀原则了；但还是举例说明下：</p><blockquote><p>经常说的导致索引失效的情况之一： 模糊查询时 将 % 放在了索引字段的前面；导致失效的最终原因就是 不满足索引的最左前缀原则；</p></blockquote><p>数据表：t_user</p><p>字    段：id（主键）、name、age、address、sex</p><p>索    引：index( name )  </p><p>Sql语句：select  name, age  from   t_user  where  name  like  ’ <strong>%</strong>黎明 ’</p><p>上面这个 sql 语句执行时，并不会走 index(name) 索引查询，因为什么呢？不满足索引的最左前缀原则。</p><h5 id="6-2、联合索引的最左前缀原则："><a href="#6-2、联合索引的最左前缀原则：" class="headerlink" title="6.2、联合索引的最左前缀原则："></a>6.2、联合索引的最左前缀原则：</h5><blockquote><p>根据联合索引的B+Tree 存储结构可以知道其最左前缀原则是什么。</p></blockquote><p>不太清楚也别着急，下面将会举例说明：</p><p>数据表：t_user</p><p>字    段：id（主键）、name、age、address、sex</p><p>索    引：index( name, age )  </p><p>Sql语句：select  id  from  t_user  where  name=’黎明’  and  age=26</p><p>测试数据 如图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200828224435.png" alt=""></p><p>根据上面的测试数据及联合索引可以得到 B+Tree存储结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200828224443.png" alt=""></p><p>上面sql执行时索引树的搜索步骤：</p><p>①、首先是加载索引树的根节点（磁盘块1），然后匹配根节点中的第一个索引字段的值，查询name值是“黎明”的数据，得到指向其子节点地址的指针p1；</p><p>②、然后根据指针p1 找到子节点所在的磁盘块，然后将磁盘块加载到内存中，然后接着查询name值是“黎明”的数据，得到指向其子节点（叶子节点）地址的指针p3；</p><p>③、然后根据p3指针找到name值是“黎明”的 所在叶子节点的磁盘块，然后将磁盘块中数据加载到内存中，然后再比较 age 为26的数据，最终找到name值是“黎明”并且age为26 的 id主键值，由于select 投影列 只有 id 主键值，所以不需要回表，直接返回结果集了。</p><p><strong>注意：在联合索引中，当索引中前一个索引字段值相同时，后面紧挨着的索引字段的值是有序的，所以索引天然适合进行排序，无需自己再进行排序了，提升了查询效率。</strong></p><blockquote><p>根据 上面的索引树搜索过程，知道一开始是以索引中的第一个索引字段进行搜索的，最后在叶子节点中依次进行的索引字段值的匹配，这就是联合索引的最左前缀原则；</p><p>所以如果sql语句中的where 条件中没有使用到联合索引的第一个索引字段，则整个索引就失效了。</p></blockquote><h2 id="索引创建的准则："><a href="#索引创建的准则：" class="headerlink" title="索引创建的准则："></a>索引创建的准则：</h2><h4 id="1、考虑创建索引的表的读写情况："><a href="#1、考虑创建索引的表的读写情况：" class="headerlink" title="1、考虑创建索引的表的读写情况："></a>1、考虑创建索引的表的读写情况：</h4><p>对于 <strong>写操作比较多</strong> 的表，创建索引时，应该尽量保证 联合索引 尽可能的 <strong>窄（窄： 索引字段个数尽可能少），</strong> 如果索引字段比较多的话，写数据时的索引维护比较麻烦。</p><blockquote><p>所以说，能创建单字段索引就不创建联合索引。</p></blockquote><h4 id="2、避免冗余索引："><a href="#2、避免冗余索引：" class="headerlink" title="2、避免冗余索引："></a>2、避免冗余索引：</h4><p>合理创建索引，避免冗余索引；</p><p>联合索引index(a, b, c)相当于 index(a)、index(a，b)、index(a，b，c)这三个索引，所以如果有 index(a, b, c)索引了，那么 index(a)、index(a，b)这两个索引就不用存在了，属于重复索引了。</p><h4 id="3、对多表关联查询使用的-连接键-字段创建索引："><a href="#3、对多表关联查询使用的-连接键-字段创建索引：" class="headerlink" title="3、对多表关联查询使用的 连接键  字段创建索引："></a>3、对多表关联查询使用的 <em>连接键</em>  字段创建索引：</h4><p>针对 多表关联 查询时，需要将  <strong>连接键 字段创建索引</strong> ； 例如：user 、role 两张表；</p><p>(一)、 select *  from user a, role b where  <strong>a.name = b.name</strong>  <strong>【普通连接查询】</strong></p><p>   需要在 role 表中创建 name 连接键的索引，user 不必创建 name 字段索引；</p><p>(二)、select * from user a left join role b on <strong>a.name = b.name</strong>   <strong>【左外连接查询】</strong></p><p>  需要在 role 表中创建 name 连接键的索引，user 不必创建 name 字段索引；</p><h4 id="4、明确字段的区分度："><a href="#4、明确字段的区分度：" class="headerlink" title="4、明确字段的区分度："></a>4、明确字段的区分度：</h4><p>提前估算出表中每个字段存储的值的区分度，尽量在 <strong>区分度高的字段创建索引</strong> ，区分度低的字段创建索引用处不大，并且还会多出索引维护的消耗。</p><p>区分度：字段值的不同的比例；例如性别字段只会有两种值，男或女，属于区分度低的字段。</p><h4 id="5、保证索引的唯一性："><a href="#5、保证索引的唯一性：" class="headerlink" title="5、保证索引的唯一性："></a>5、保证索引的唯一性：</h4><blockquote><p>创建索引时，尽可能保证索引的唯一性，唯一性指的什么呢？</p></blockquote><p>在查看SQL执行计划时，执行计划中 possible_keys 中展示的就是优化器采样估算后可能会使用到的索引，只有这里展示一个索引，并且与实际使用的索引一致时，这才是唯一性；如果此处展示了多个索引名称的话，说明没有保证索引的唯一性。</p><blockquote><p>为什么要保证唯一性呢？</p></blockquote><p>因为如果在执行一个SQL时，优化器是通过采样分析判断发现有两个索引都可以时，那么就会面临抉择，到底最终使用哪个索引呢；如果只有一个索引符合的话，优化器直接选择即可。所以如果可以使用的索引存在多个的话，那么优化器还需要通过 <strong>额外的运算</strong> 得到最终使用的索引的，那么这就会降低查询效率的。</p><h4 id="6、创建联合索引时，索引字段怎么排序："><a href="#6、创建联合索引时，索引字段怎么排序：" class="headerlink" title="6、创建联合索引时，索引字段怎么排序："></a>6、创建联合索引时，索引字段怎么排序：</h4><blockquote><p>在联合索引中，怎么对索引字段进行排序？ 大白话就是 在联合索引中，哪些索引字段 放在最前面？</p></blockquote><p>①、where 条件中长使用的字段 放到前面。</p><p>②、区分度高的字段放在前面，因为这样可以减少扫描 B+tree 中的叶块。</p><p><strong>《高性能MySQL》</strong>  一书中提到的一个经验法则：将选择性最高（ <strong>区分度高</strong> ）的列放到索引最前列。</p><h4 id="7、SQL中，有等值查询和范围查询时，联合索引怎么创建？"><a href="#7、SQL中，有等值查询和范围查询时，联合索引怎么创建？" class="headerlink" title="7、SQL中，有等值查询和范围查询时，联合索引怎么创建？"></a>7、SQL中，有等值查询和范围查询时，联合索引怎么创建？</h4><blockquote><p>当然是将 <strong>等值查询的字段</strong> 放在联合索引的前面， <strong>范围查询</strong>  的放到联合索引的后面；</p></blockquote><p>为什么这么设计呢？</p><p>因为依据索引的查询规则，在联合索引中，首先都是根据第一个索引字段查询符合要求的数据，然后再从符合要求的数据中筛选第二个索引字段符合的数据；如果第一个索引字段值不符合，则直接结束查询了，不会再去进行范围查询了；但是如果将范围查询字段放在联合索引的第一位的话，那么很大可能会查询到符合范围的数据，然后再从数据中筛选等值查询的字段值，如果等值查询的值不存在，那么前面范围查询所做的工作就白白浪费了；并且降低了查询效率。</p><h4 id="8、单表索引数量建议："><a href="#8、单表索引数量建议：" class="headerlink" title="8、单表索引数量建议："></a>8、单表索引数量建议：</h4><blockquote><p>建议：单张表中索引的数量不超过5个；单个索引中的索引字段个数不超过5个；</p></blockquote><h2 id="导致索引失效的SQL："><a href="#导致索引失效的SQL：" class="headerlink" title="导致索引失效的SQL："></a>导致索引失效的SQL：</h2><blockquote><p>明明已经创建好了索引，但是SQL执行时通过执行计划发现没有走索引查询，为什么？</p></blockquote><h4 id="1、查看SQL的执行计划："><a href="#1、查看SQL的执行计划：" class="headerlink" title="1、查看SQL的执行计划："></a>1、查看SQL的执行计划：</h4><p>创建好索引后，一般会查看下SQL的执行计划，看看SQL执行时是否走了索引查询；</p><p>Mysql  数据库查看执行计划 参考：<a href="https://juejin.im/post/6844903973032296461" target="_blank" rel="noopener">使用explain分析SQL执行计划</a></p><p>Oracle 数据库查看执行计划 参考：<a href="https://blog.csdn.net/rexueqingchun/article/details/84563686" target="_blank" rel="noopener">Oracle通过执行计划查看查询语句是否使用索引</a></p><h4 id="2、导致SQL执行时没走索引的原因："><a href="#2、导致SQL执行时没走索引的原因：" class="headerlink" title="2、导致SQL执行时没走索引的原因："></a>2、导致SQL执行时没走索引的原因：</h4><h5 id="2-1、优化器采样估算后不走索引："><a href="#2-1、优化器采样估算后不走索引：" class="headerlink" title="2.1、优化器采样估算后不走索引："></a>2.1、优化器采样估算后不走索引：</h5><blockquote><p>可能数据库的优化器在进行采样估算时，发现走全表扫描更加合适；例如：表中数据量很小时，全表扫描和索引查询可能一样快，所以此时可能会直接进行全部扫描查询了。</p></blockquote><h5 id="2-2、SQL语句问题导致索引失效：（简单写几个常用到的）"><a href="#2-2、SQL语句问题导致索引失效：（简单写几个常用到的）" class="headerlink" title="2.2、SQL语句问题导致索引失效：（简单写几个常用到的）"></a>2.2、SQL语句问题导致索引失效：（简单写几个常用到的）</h5><ul><li>不满足索引的最左前缀原则；例如：like模糊查询时，%放在前面；联合索引；</li><li>使用了反向查询，例如：not in 、!= 、&lt;&gt; 等，导致索引失效；</li><li>在索引字段上进行了 函数运算 或者 算数运算；</li><li>隐式转换导致索引失效：隐式类型转换、隐式字符集转换；其实底层都是使用函数进行的隐式转换，所以导致的索引失效；</li><li>对索引字段做 判 null 操作，会导致索引失效；</li></ul><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> B+Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat优化，值得你拥有！</title>
      <link href="/2020/08/24/tomcat_optimize/"/>
      <url>/2020/08/24/tomcat_optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Tomcat作为Web应用的服务器，目前绝大多数公司都是用其作为应用服务器的；应用服务器的执行效率会影响系统执行，这里会讲Tomcat怎样进行配置能提高处理性能；除此之外也必然会提到对应的JVM参数的优化的一些经验。</p></blockquote><p>本文为 <font color=#1AFA29> <strong>转载文章</strong> </font> ，原文地址：<a href="https://segmentfault.com/a/1190000015918707" target="_blank" rel="noopener">系统优化怎么做-Tomcat优化</a></p><h2 id="Tomcat的运行模式："><a href="#Tomcat的运行模式：" class="headerlink" title="Tomcat的运行模式："></a>Tomcat的运行模式：</h2><blockquote><p>运行模式分3种模式：</p><ul><li>bio：默认的模式，效率比较低</li><li>nio：优化时使用的模式</li><li>apr：对系统配置有一些比较高的要求</li></ul></blockquote><h2 id="确认Tomcat运行模式："><a href="#确认Tomcat运行模式：" class="headerlink" title="确认Tomcat运行模式："></a>确认Tomcat运行模式：</h2><blockquote><p>查找配置文件  <strong>server.xml</strong> ， 在tomcat下的路径：conf 目录下；</p><p>Executor 为自定义配置 Tomcat 线程池：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">maxThreads</span>=<span class="string">"1024"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">minSpareThreads</span>=<span class="string">"512"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">prestartminSpareThreads</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="关键配置："><a href="#关键配置：" class="headerlink" title="关键配置："></a>关键配置：</h3><h5 id="maxThreads："><a href="#maxThreads：" class="headerlink" title="maxThreads："></a>maxThreads：</h5><blockquote><p>最大线程数，默认是200</p></blockquote><h5 id="minSpareThread："><a href="#minSpareThread：" class="headerlink" title="minSpareThread："></a>minSpareThread：</h5><blockquote><p>最小活跃线程数，默认是25</p></blockquote><h5 id="maxQueueSize："><a href="#maxQueueSize：" class="headerlink" title="maxQueueSize："></a>maxQueueSize：</h5><blockquote><p>最大的等待队列个数，超过则请求拒绝默认值是Integer.MAX_VALUE ，一般不改变。在某些紧急状态修复问题需要调整</p></blockquote><h5 id="连接器（Connector）："><a href="#连接器（Connector）：" class="headerlink" title="连接器（Connector）："></a>连接器（Connector）：</h5><blockquote><p>Connector是连接器，负责接收客户的请求，以及向客户端回送响应的消息。所以Connector的优化是重要部分。默认情况下 Tomcat只支持200线程访问，超过这个数量的连接将被等待甚至超时放弃，所以我们需要提高这方面的处理能力。</p></blockquote><h3 id="nio-配置："><a href="#nio-配置：" class="headerlink" title="nio 配置："></a>nio 配置：</h3><blockquote><p>配置文件  <strong>server.xml</strong> </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 运行模式为 nio --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"14081"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line">&lt;!-- 连接器中连接处理 使用上面自定义的 线程池中的线程 --&gt;</span><br><span class="line">executor="tomcatThreadPool" </span><br><span class="line">URIEncoding="UTF-8" </span><br><span class="line">compression="on"   </span><br><span class="line">useBodyEncodingForURI="true" </span><br><span class="line">enableLookups="false" </span><br><span class="line">redirectPort="14443" /&gt;</span><br></pre></td></tr></table></figure><h3 id="影响性能的配置："><a href="#影响性能的配置：" class="headerlink" title="影响性能的配置："></a>影响性能的配置：</h3><h5 id="protocol："><a href="#protocol：" class="headerlink" title="protocol："></a>protocol：</h5><blockquote><p>org.apache.coyote.http11.Http11Protocol - 阻塞式的Java连接器<br>org.apache.coyote.http11.Http11NioProtocol - 不阻塞Java连接器<br>org.apache.coyote.http11.Http11AprProtocol - APR / native 连接器<br>选择不阻塞Java连接器</p></blockquote><h5 id="enableLookups："><a href="#enableLookups：" class="headerlink" title="enableLookups："></a>enableLookups：</h5><blockquote><p>若是你想request.getRemoteHost()的调用履行，以便返回的长途客户端的实际主机名的DNS查询，则设置为true。设置为false时跳过DNS查找，并返回字符串的IP地址（从而提高性能）。 <strong>默认场景下，禁用DNS查找</strong> 。</p></blockquote><h5 id="compression："><a href="#compression：" class="headerlink" title="compression："></a>compression：</h5><blockquote><p>设置成on，开启压缩</p></blockquote><h3 id="禁用AJP链接器"><a href="#禁用AJP链接器" class="headerlink" title="禁用AJP链接器:"></a>禁用AJP链接器:</h3><p>使用Nginx+tomcat的架构，用不着AJP协议，所以把AJP连接器禁用<br>server.xml注释掉以下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8019"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优化-JVM："><a href="#优化-JVM：" class="headerlink" title="优化 JVM："></a>优化 JVM：</h2><blockquote><p>优化位置：/bin/catalina.sh</p><p>修改 <strong>JAVA_OPTS</strong> 参数，这里需要参照 <strong>机器配置</strong> ，对JVM进行参数优化 。</p></blockquote><h5 id="JDK1-7："><a href="#JDK1-7：" class="headerlink" title="JDK1.7："></a>JDK1.7：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS="-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms512m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=1024M -XX:PermSize=1024m -XX:MaxPermSize=1024m -XX:+DisableExplicitGC"</span><br></pre></td></tr></table></figure><h5 id="JDK1-8："><a href="#JDK1-8：" class="headerlink" title="JDK1.8："></a>JDK1.8：</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS="-Djava.awt.headless=true -Dfile.encoding=UTF-8 -server -Xms1024m -Xmx1024m -XX:NewSize=512m -XX:MaxNewSize=1024M -XX:+DisableExplicitGC"</span><br></pre></td></tr></table></figure><p>注意：1.8 中已经没有 <strong>永久代</strong>了，所以也就没有 <strong>没有PermSize、MaxPermSize</strong>  ；Java8 中将永久代改为了 <strong>元空间</strong> 了，JAVA8里对metaspace可以在小范围自动扩展永生代避免溢出。</p><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><ul><li>-Djava.awt.headless</li></ul><blockquote><p>没有设备、键盘或鼠标的模式。</p></blockquote><ul><li>-Dfile.encoding</li></ul><blockquote><p>设置字符集</p></blockquote><ul><li>-server</li></ul><blockquote><p>jvm的server工作模式，对应的有client工作模式。使用“java -version”可以查看当前工作模式</p></blockquote><ul><li>-Xms1024m</li></ul><blockquote><p>初始Heap大小，使用的最小内存</p></blockquote><ul><li>-Xmx1024m</li></ul><blockquote><p>Java heap最大值，使用的最大内存<br>经验: 设置Xms大小等于Xmx大小</p></blockquote><ul><li>-XX:NewSize=512m</li></ul><blockquote><p>表示新生代初始内存的大小，应该小于 -Xms的值</p></blockquote><ul><li>-XX:MaxNewSize=1024M</li></ul><blockquote><p>表示新生代可被分配的内存的最大上限，应该小于 -Xmx的值</p></blockquote><ul><li>-XX:PermSize=1024m</li></ul><blockquote><p>设定内存的永久保存区域,内存的永久保存区域，VM 存放Class 和 Meta 信息，JVM在运行期间不会清除该区域； <strong>一般情况下，此参数值使用默认即可，默认大小就够用了</strong> 。</p><p>程序加载很多class情况下，超出PermSize情况下：<br>JDK1.7会抛出java.lang.OutOfMemoryError:  <strong>PermGen space异常</strong><br>JDK1.8下会抛出 ERROR: java.lang.OutOfMemoryError:  <strong>Metadata space 异常</strong> </p></blockquote><ul><li>-XX:MaxPermSize=1024m</li></ul><blockquote><p>设定最大内存的永久保存区域<br>经验: 设置PermSize大小等于MaxPermSize大小</p></blockquote><ul><li>-XX:+DisableExplicitGC</li></ul><blockquote><p>自动将System.gc()调用转换成一个空操作，即应用中调用System.gc()会变成一个空操作,避免程序员在代码里进行System.gc()这种危险操作。System.gc() 除非是到了万不得也的情况下使用，都交给JVM吧</p></blockquote><h3 id="其他参数优化："><a href="#其他参数优化：" class="headerlink" title="其他参数优化："></a>其他参数优化：</h3><ul><li>X:SurvivorRatio=2</li></ul><blockquote><p>年轻代中Eden区与Survivor区的大小比值</p></blockquote><ul><li>-XX:ReservedCodeCacheSize=256m</li></ul><blockquote><p>保留代码占用的内存容量，无大的影响</p></blockquote><ul><li>-Xss1024k</li></ul><blockquote><p>单个线程堆栈大小值，减少这个值可以生成更多线程，操作系统对于一个进程内的线程数是有限制的，经验值在3000-5000左右</p></blockquote><ul><li>-XX:+CMSParallelRemarkEnabled</li></ul><blockquote><p>CMS 垃圾回收算法，对响应时间的重要性需求 大于 对吞吐量的要求，能够承受垃圾回收线程和应用线程共享处理器资源，并且应用中存在比较多的长生命周期的对象的应用</p></blockquote><ul><li>-XX:+UseCMSCompactAtFullCollection</li></ul><blockquote><p>在使用concurrent gc 的情况下, 防止 memoryfragmention, 对live object 进行整理, 使 memory 碎片减少。</p></blockquote><ul><li>-XX:+UseCMSInitiatingOccupancyOnly</li></ul><blockquote><p>在FULL GC的时候， 对年老代的压缩。CMS是不会移动内存的， 因此这个非常容易产生碎片， 导致内存不够用， 因此， 内存的压缩这个时候就会被启用。 增加这个参数是个好习惯。可能会影响性能,但是可以消除碎片。</p></blockquote><ul><li>-XX:CMSInitiatingOccupancyFraction=60</li></ul><blockquote><p>使用cms作为垃圾回收, 使用60％后开始CMS收集</p></blockquote><ul><li>-XX:+UseGCOverheadLimit</li></ul><blockquote><p>用来限制使用内存，如果不做控制，可能会报出<br>java.lang.OutOfMemoryError: GC overhead limit exceeded</p></blockquote><ul><li>-XX:+UseConcMarkSweepGC</li></ul><blockquote><p>使用CMS内存收集</p></blockquote><ul><li>-XX:+UseParNewGC</li></ul><blockquote><p>设置年轻代为并行收集</p></blockquote><ul><li>-XX:+HeapDumpOnOutOfMemoryError</li><li>-XX:HeapDumpPath=/x/dump_tomcat.hprof</li></ul><blockquote><p>JVM会在遇到OutOfMemoryError时拍摄一个“堆转储快照”，并将其保存在一个文件中。</p></blockquote><ul><li>-Xloggc:/xx/gc_tomcat.log</li></ul><blockquote><p>gc的日志，如果该日志中出现频繁的Full GC就是有相关的系统问题，如果很少，说明暂时还算正常</p></blockquote><ul><li>-XX:+PrintGCDateStamps</li></ul><blockquote><p>输出GC的时间戳（以基准时间的形式）</p></blockquote><ul><li>-XX:+PrintGCDetails</li></ul><blockquote><p>输出GC的日志格式</p></blockquote><ul><li>-Dnetworkaddress.cache.ttl=60</li><li>-Dsun.net.inetaddr.ttl=60</li></ul><blockquote><p>设置DNS缓存时间</p></blockquote><ul><li>-DautoStartup=false</li><li>-Dsun.net.client.defaultConnectTimeout=60000</li></ul><blockquote><p>连接建立超时时间</p></blockquote><ul><li>-Dsun.net.client.defaultReadTimeout=60000</li></ul><blockquote><p>内容获取超时设置</p></blockquote><ul><li>-Djmagick.systemclassloader=no</li></ul><blockquote><p>是否生成缩略图的一个框架的配置</p></blockquote><ul><li>-Djava.security.egd=file:/dev/./urandom</li></ul><h3 id="最佳实践："><a href="#最佳实践：" class="headerlink" title="最佳实践："></a>最佳实践：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_OPTS="-server -showversion -Xms2000m -Xmx2000m -Xmn500m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:SurvivorRatio=2 -XX:ReservedCodeCacheSize=256m -Xss1024k -Djava.awt.headless=true -XX:+CMSParallelRemarkEnabled -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=60 -XX:+UseGCOverheadLimit -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tomcat_path/logs/dump_tomcat.hprof -Xloggc:/tomcat_path/logs/gc_tomcat.log -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCDetails -Dnetworkaddress.cache.ttl=60 -Dsun.net.inetaddr.ttl=60 -DautoStartup=false -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -Djmagick.systemclassloader=no -Djava.security.egd=file:/dev/./urandom -Dfile.encoding=UTF-8"</span><br></pre></td></tr></table></figure><h3 id="常见-JVM-异常："><a href="#常见-JVM-异常：" class="headerlink" title="常见 JVM 异常："></a>常见 JVM 异常：</h3><ol><li><p>java.lang.OutOfMemoryError: Java heap space —-JVM Heap（堆）溢出：</p><blockquote><p>JVM 在启动的时候会自动设置 JVM Heap  的值，其初始空间（即-Xms）是物理内存的1/64，最大空间（-Xmx）不可超过物理内存。可以利用 JVM提供的 -Xmn -Xms -Xmx  等选项可进行设置。Heap 的大小是 Young Generation 和 Tenured Generaion 之和。在 JVM 中如果 98％ 的时间是用于 GC，且可用的 Heap size 不足 2％ 的时候将抛出此异常信息。</p><p>解决方法：</p><ul><li>首先检查代码，是否存在创建了大量无用对象，且其被引用着，无法被GC回收 的代码；</li><li>手动设置 JVM Heap（堆）的大小；</li></ul></blockquote></li></ol><ol start="2"><li><p>java.lang.OutOfMemoryError: PermGen space —- PermGen space溢出：</p><blockquote><p>jdk1.8 抛出 ERROR: java.lang.OutOfMemoryError: Metadata space 异常<br>PermGen space 的全称是 Permanent Generation space，是指内存的永久保存区域。为什么会内存溢出，这是由于这块内存主要是被 JVM 存放Class 和 Meta 信息的，Class 在被 Load 的时候被放入 PermGen space 区域，它和存放  Instance 的 Heap 区域不同，sun 的 GC 不会在主程序运行期对 PermGen space 进行清理，所以如果你的 APP  会载入很多 CLASS 的话，就很可能出现 PermGen space 溢出。</p><p>解决方法： 手动设置 MaxPermSize 大小；</p></blockquote></li></ol><ol start="3"><li>java.lang.StackOverflowError —- 栈溢出：</li></ol><blockquote><p>​      栈溢出了，JVM 依然是采用栈式的虚拟机。函数的调用过程都体现在堆栈和退栈上了。调用构造函数的  “层”太多了，以致于把栈区溢出了。通常来讲，一般栈区远远小于堆区的，因为函数调用过程往往不会多于上千层，而即便每个函数调用需要 1K  的空间（这个大约相当于在一个 C 函数内声明了 256 个 int 类型的变量），那么栈区也不过是需要 1MB 的空间。通常栈的大小是  1－2MB 的。</p><p>解决方法: 代码中递归也不要递归的层次过多；</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 系统优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联合索引在B+树上的存储结构及数据查找方式</title>
      <link href="/2020/08/14/The_storage_structure_of_a_federated_index_on_a_tree/"/>
      <url>/2020/08/14/The_storage_structure_of_a_federated_index_on_a_tree/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最困难的事情就是认识自己！</p></blockquote><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>本篇文章主要是阐述下 <font color=blue>  <strong>联合索引</strong> </font> 在 B+Tree 上的实际存储结构。</p></blockquote><p><strong>本文主要讲解的内容有：</strong></p><ul><li><p>联合索引在B+树上的存储结构</p></li><li><p>联合索引的查找方式</p></li><li><p>为什么会有最左前缀匹配原则</p></li></ul><blockquote><p>在分享这篇文章之前，我在网上查了关于MySQL联合索引在B+树上的存储结构这个问题，翻阅了很多博客和技术文章，其中有几篇讲述的与事实相悖。具体如下：</p><p>很多博客中都是说：联合索引在B+树上的 <font color=blue> <strong>非叶子节点</strong> </font> 中只会存储 联合索引 中的第一个索引字段 的值，联合索引的其余索引字段的值只会出现在 B+树 的 <font color=blue> <strong>叶子节点</strong> </font> 中 。<font color=red>（其实这句话是不对的）</font></p></blockquote><p>如下图，就是 <strong>错误的</strong> 联合索引的 B+树 存储结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200813200952.png" alt=""></p><blockquote><p>庆幸的是通过不断查询发现有一条是来自思否社区的关于【联合索引 在 B+Tree 上的存储结构？】问答，有答主回答了这个问题，并贴出了一篇文章和一张图以及一句简单的描述。PS：贴出的文章链接已经打不开了。</p><p>所以在这样的条件下本篇文章就诞生了。</p></blockquote><h2 id="联合索引存储结构："><a href="#联合索引存储结构：" class="headerlink" title="联合索引存储结构："></a>联合索引存储结构：</h2><blockquote><p>下面就引用思否社区的这个问答来展开我们今天要讨论的联合索引的存储结构的问题。</p><p>来自思否的提问，联合索引的存储结构<br>(<a href="https://segmentfault.com/q/1010000017579884" target="_blank" rel="noopener">https://segmentfault.com/q/1010000017579884</a>)<br>有码友回答如下：</p><p><strong>联合索引 bcd , 在索引树中的样子如下图 ， 在比较的过程中 ，先判断 b 再判断 c 然后是 d ：</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200813201744.jpg" alt=""></p><p>由于回答只有这么一张图一句话，可能会让大家有点看不懂，所以我们就借助前人的肩膀用这个例子来更加细致的讲探寻一下联合索引在B+树上的存储结构吧。</p><p>首先，有一个T1表， 然后表T1有字段a,b,c,d,e，其中a是主键，除e为varchar其余为int类型，并创建了一个联合索引idx_t1_bcd(b,c,d)，然后b、c、d三列作为联合索引，在B+树上的结构正如上图所示。联合索引的所有索引列都出现在索引数上，并依次比较三列的大小。上图树高只有两层不容易理解，下面是假设的表数据以及我对其联合索引在B+树上的结构图的改进。 <strong>PS：基于InnoDB存储引擎。</strong></p><p>index（b、c、d）联合索引在B+树上的结构图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200813202442.jpg" alt=""></p><p>T1表中的数据如下图：（ <strong>上图 B+树 中的数据就来自下图</strong> ）</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200813202446.jpg" alt=""></p><blockquote><p>通过这俩图我们心里对联合索引在B+树上的存储结构就有了个大概的认识。下面用我的语言为大家解释一下吧。</p></blockquote><p>我们先看T1表，他的主键暂且我们将它设为整型自增的 ，InnoDB会使用主键索引在B+树维护索引和数据文件，然后我们创建了一个联合索引（b，c，d）也会生成一个索引树，同样是B+树的结构，只不过它的 <strong>data部分</strong> 存储的是联合索引所在行记录的主键值 <strong>（上图叶子节点紫色背景部分）</strong> 。为什么是 主键值，而不是 整个行记录呢？ 因为这个 联合索引 是个 <strong>非聚簇索引</strong> 。</p><p>好了大致情况都介绍完了。下面我们结合这俩图来解释一下。</p><p>对于联合索引来说只不过比单值索引多了几列，而这些索引列全都出现在索引树上。对于联合索引，存储引擎会首先根据第一个索引列排序，如上图我们可以单看第一个索引列，如，1 1 5 12 13…它是单调递增的；如果第一列相等则再根据第二列排序，依次类推就构成了上图的索引树，上图中的1 1 4 ，1 1 5以及13 12 4, 13 16 1, 13 16 5就可以说明这种情况。</p><h2 id="联合索引具体查找步骤："><a href="#联合索引具体查找步骤：" class="headerlink" title="联合索引具体查找步骤："></a>联合索引具体查找步骤：</h2><p>当我们的SQL语言可以应用到索引的时候，比如 select * from T1 where b = 12 and c = 14 and d = 3 ；也就是T1表中a列为4的这条记录。 </p><p>查找步骤具体如下：</p><ol><li>存储引擎首先从根节点（一般常驻内存）开始查找，第一个索引的第一个索引列为1,12大于1，第二个索引的第一个索引列为56,12小于56，于是从这俩索引的中间读到下一个节点的磁盘文件地址（此处实际上是存在一个指针的，指向的是下一个节点的磁盘位置）。</li><li>进行一次磁盘IO，将此节点值加载后内存中，然后根据第一步一样进行判断，发现 数据都是匹配的，然后根据指针将此联合索引值所在的叶子节点也从磁盘中加载后内存，此时又发生了一次磁盘IO，最终根据叶子节点中索引值关联的 <strong>主键值</strong>  。</li><li>根据主键值  <strong>回表</strong> 去主键索引树（聚簇索引）中查询具体的行记录。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200813202449.jpg" alt=""></p><h2 id="联合索引的最左前缀原则："><a href="#联合索引的最左前缀原则：" class="headerlink" title="联合索引的最左前缀原则："></a>联合索引的最左前缀原则：</h2><blockquote><p>之所以会有最左前缀匹配原则和联合索引的索引构建方式及存储结构是有关系的。</p></blockquote><p>首先我们创建的idx_t1_bcd(b,c,d)索引，相当于创建了(b)、（b、c）（b、c、d）三个索引，看完下面你就知道为什么相当于创建了三个索引。</p><p>我们看，联合索引是首先使用多列索引的第一列构建的索引树，用上面idx_t1_bcd(b,c,d)的例子就是优先使用b列构建，当b列值相等时再以c列排序，若c列的值也相等则以d列排序。我们可以取出索引树的叶子节点看一下。</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200813202455.jpg" alt=""></p><p>索引的第一列也就是b列可以说是从左到右单调递增的，但我们看c列和d列并没有这个特性，它们只能在b列值相等的情况下这个小范围内递增，如第一叶子节点的第1、2个元素和第二个叶子节点的后三个元素。<br>​<br>由于联合索引是上述那样的索引构建方式及存储结构，所以联合索引只能从多列索引的第一列开始查找。所以如果你的查找条件不包含b列如（c,d）、(c）、(d)是无法应用缓存的，以及跨列也是无法完全用到索引如(b,d)，只会用到b列索引。</p><p>这就像我们的电话本一样，有名和姓以及电话，名和姓就是联合索引。在姓可以以姓的首字母排序，姓的首字母相同的情况下，再以名的首字母排序。</p><p><strong>如：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">M</span><br><span class="line">    毛 不易   <span class="number">178</span>********</span><br><span class="line">    马 化腾   <span class="number">183</span>********</span><br><span class="line">    马 云     <span class="number">188</span>********</span><br><span class="line">Z</span><br><span class="line">    张 杰     <span class="number">189</span>********</span><br><span class="line">    张 靓颖   <span class="number">138</span>********</span><br><span class="line">    张 艺兴   <span class="number">176</span>********</span><br></pre></td></tr></table></figure><p>我们知道名和姓是很快就能够从姓的首字母索引定位到姓，然后定位到名，进而找到电话号码，因为所有的姓从上到下按照既定的规则（首字母排序）是有序的，而名是在姓的首字母一定的条件下也是按照名的首字母排序的，但是整体来看，所有的名放在一起是无序的，所以如果只知道名查找起来就比较慢，因为无法用已排好的结构快速查找。</p><p>到这里大家是否明白了为啥会有最左前缀匹配原则了吧。</p><h2 id="实践："><a href="#实践：" class="headerlink" title="实践："></a>实践：</h2><p>如下列举一些SQL的索引使用情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">where</span> b = <span class="number">12</span> <span class="keyword">and</span> c = <span class="number">14</span> <span class="keyword">and</span> d = <span class="number">3</span>;<span class="comment">-- 全值索引匹配 三列都用到</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">where</span> b = <span class="number">12</span> <span class="keyword">and</span> c = <span class="number">14</span> <span class="keyword">and</span> e = <span class="string">'xml'</span>;<span class="comment">-- 应用到两列索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">where</span> b = <span class="number">12</span> <span class="keyword">and</span> e = <span class="string">'xml'</span>;<span class="comment">-- 应用到一列索引</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">where</span> b = <span class="number">12</span>  <span class="keyword">and</span> c &gt;= <span class="number">14</span> <span class="keyword">and</span> e = <span class="string">'xml'</span>;<span class="comment">-- 应用到一列索引及索引条件下推优化</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">where</span> b = <span class="number">12</span>  <span class="keyword">and</span> d = <span class="number">3</span>;<span class="comment">-- 应用到一列索引  因为不能跨列使用索引 没有c列 连不上</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> T1 <span class="keyword">where</span> c = <span class="number">14</span>  <span class="keyword">and</span> d = <span class="number">3</span>;<span class="comment">-- 无法应用索引，违背最左匹配原则</span></span><br></pre></td></tr></table></figure><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>到这里MySQL索引的联合索引的存储结构及查找方式就讲完了，本人能力有限，也是站着前人的肩膀上创作的此文，因为看到搜索引擎的搜索结果前几个技术文章中有存在讲述不清或讲述有误的地方，所以自己才总结出这篇文章分享给大家，如有不对的地方一定要指正哦，谢谢了。</p><p>这篇文章断断续续利用工作之余画图加写作用了两三天，主要内容就是上面这些了。不可否认，这篇文章在一定程度上有纸上谈兵之嫌，因为我本人对MySQL的使用属于菜鸟级别，更没有太多数据库调优的经验，在这里高谈阔论实属惭愧。就当是我个人的一篇学习笔记了。</p><p>另外，MySQL索引及知识非常广泛，本文只是涉及到其中一部分。如与排序（ORDER BY）相关的索引优化及覆盖索引（Covering index）的话题本文并未涉及，同时除B-Tree索引外MySQL还根据不同引擎支持的哈希索引、全文索引等等本文也并未涉及。如果有机会，希望再对本文未涉及的部分进行补充吧。</p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 联合索引 </tag>
            
            <tag> B+Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找一个字符串中最长不含重复字符的子字符串，计算该最长子字符串的长度</title>
      <link href="/2020/07/10/search_string_noRepeat_childStr_length/"/>
      <url>/2020/07/10/search_string_noRepeat_childStr_length/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>算法题：查找一个字符串中最长不含重复字符的子字符串，计算该最长子字符串的长度；</p><p>下面将使用 <strong>滑动窗口</strong> 方法实现，并通过对滑动窗口算法一步步进行优化，使其空间和时间的消耗一步步降低；</p></blockquote><h2 id="什么是滑动窗口？"><a href="#什么是滑动窗口？" class="headerlink" title="什么是滑动窗口？"></a>什么是滑动窗口？</h2><blockquote><p>滑动窗口：一般是指 <strong>运行在一个大数组上的子数组，该大数组是一个底层元素集合</strong> 。</p><p>例如：假设有大数组  <strong>[ a b c d b e f d n ]</strong>  ，设定一个大小为 3 的小数组 为 <strong>滑动窗口</strong> ；则存在下面的窗口：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[a b c]</span><br><span class="line">  [b c d]</span><br><span class="line">    [c d b]</span><br><span class="line">      [d b e]</span><br><span class="line">        [b e f]</span><br><span class="line">          [e f d]</span><br><span class="line">    [f d n]</span><br></pre></td></tr></table></figure><blockquote><p>滑动窗口重要性质：</p><ol><li>滑动窗口一般表示成一个  <strong>左闭右开区间</strong>  。</li><li><strong>窗口的左边界（指针 i）和右边界（指针 j）永远只能向右移动</strong> ，而不能向左移动。</li></ol></blockquote><p><strong>如图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200710164220.png" alt=""></p><h2 id="使用滑动窗口解题"><a href="#使用滑动窗口解题" class="headerlink" title="使用滑动窗口解题"></a>使用滑动窗口解题</h2><h4 id="1、未优化的滑动窗口实现："><a href="#1、未优化的滑动窗口实现：" class="headerlink" title="1、未优化的滑动窗口实现："></a>1、未优化的滑动窗口实现：</h4><blockquote><p>没有任何优化的滑动窗口实现；</p><p>通过 指针 i  和  指针 j  不断的向左移动，形成了一个个的窗口，并且在将窗口的字符存放到了  Set 集合中，使用 Set 集合判断 <strong>即将</strong> 进入窗口中的字符（也就是指针 j 移动到指向的字符）是否在窗口已经存在；</p><ol><li>如果已经存在：则计算此时窗口的大小，并将存放窗口字符的 Set 集合清空（清空是为了存放下个窗口的字符），最后将 指针 i 向左移动一位，然后指针 j 也指向指针 i 的位置。</li><li>如果是不存在：则将此字符存放到 Set 集合窗口字符中 。</li></ol></blockquote><h5 id="1-1、看图理解："><a href="#1-1、看图理解：" class="headerlink" title="1.1、看图理解："></a>1.1、看图理解：</h5><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200710142010.png" alt=""></p><h5 id="1-2、代码实现："><a href="#1-2、代码实现：" class="headerlink" title="1.2、代码实现："></a>1.2、代码实现：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">public class LeetCode &#123;</span><br><span class="line"></span><br><span class="line">    public static int lengthOfLongestSubstring(String s) &#123;</span><br><span class="line">        if (s &#x3D;&#x3D; null)&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (s.length() &#x3D;&#x3D; 1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; set 用来存储窗口的字符</span><br><span class="line">        Set&lt;Character&gt; set &#x3D; new HashSet();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 指针i</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        &#x2F;&#x2F; 指针j</span><br><span class="line">        int j &#x3D; i;</span><br><span class="line">        &#x2F;&#x2F; 最大长度</span><br><span class="line">        int max &#x3D; 0;</span><br><span class="line"></span><br><span class="line">        char[] sc &#x3D; s.toCharArray();</span><br><span class="line">        while(j &lt; sc.length &amp;&amp; i &lt;&#x3D; j)&#123;</span><br><span class="line">            &#x2F;&#x2F; 当字符没在窗口中</span><br><span class="line">            if (!set.contains(sc[j]))&#123;</span><br><span class="line">                set.add(sc[j]);</span><br><span class="line">                &#x2F;&#x2F; 指针j 移动</span><br><span class="line">                j++;</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                &#x2F;&#x2F; 如果字符在窗口中时, 得到当前窗口中的字符个数</span><br><span class="line">                int size &#x3D; set.size();</span><br><span class="line">                if (max &lt; size)&#123;</span><br><span class="line">                    max &#x3D; size;</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;&#x2F; 将set中存储的字符清空</span><br><span class="line">                set.clear();</span><br><span class="line">                &#x2F;&#x2F; 指针i 移动</span><br><span class="line">                i++;</span><br><span class="line">                &#x2F;&#x2F; 指针j 移动到指针i 的位置</span><br><span class="line">                j &#x3D; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 当指针j 移动到字符串尾部时, 窗口中可能还存在字符</span><br><span class="line">        if (set.size() &gt; max)&#123;</span><br><span class="line">            max &#x3D; set.size();</span><br><span class="line">            set.clear();</span><br><span class="line">            set &#x3D; null; &#x2F;&#x2F; help GC</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(lengthOfLongestSubstring(&quot;abcdbefdn&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-3、执行效果（来自LeetCode）："><a href="#1-3、执行效果（来自LeetCode）：" class="headerlink" title="1.3、执行效果（来自LeetCode）："></a>1.3、执行效果（来自LeetCode）：</h5><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200710174547.png" alt=""></p><h5 id="1-4、未经优化的滑动窗口的缺点："><a href="#1-4、未经优化的滑动窗口的缺点：" class="headerlink" title="1.4、未经优化的滑动窗口的缺点："></a>1.4、未经优化的滑动窗口的缺点：</h5><blockquote><p><strong>缺点一：</strong></p><p>存在很多无用的重复的  <strong>滑动窗口</strong> ；</p><p>例如：字符串 abcdbefdn，根据上面实现的滑动窗口方法，会得到以下窗口：[ a b c d ]、[ b c d ]、[ c d b e f ]、[ d b e f ]、[ b e f d n ]  这 5 个滑动窗口；下面错位展示更直观，会发现  <strong>[ b c d ]、 [ d b e f ]</strong>  这两个滑动窗口显然被包含在其之前的窗口中，它们被重复统计了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ a b c d ]</span><br><span class="line"></span><br><span class="line">  [ b c d ]</span><br><span class="line"></span><br><span class="line">    [ c d b e f ]</span><br><span class="line"></span><br><span class="line">      [ d b e f ]</span><br><span class="line"></span><br><span class="line">        [ b e f d n ]</span><br></pre></td></tr></table></figure><blockquote><p><strong>缺点二：</strong></p><p>存储 滑动窗口中 字符的 Set 集合存在反复 清空，再次存入字符的情况；并且存在字符被重复存入 Set 集合中。</p></blockquote><h4 id="2、优化后的滑动窗口实现："><a href="#2、优化后的滑动窗口实现：" class="headerlink" title="2、优化后的滑动窗口实现："></a>2、优化后的滑动窗口实现：</h4><blockquote><p>优化点：</p><ol><li><p>直接将指针 i  指向出现的重复字符的位置，滑动窗口大小为 （j - i），这样就将无用的重复的 <strong>滑动窗口</strong>  跳过，这样会大大缩短执行时间；</p></li><li><p>存放滑动窗口的字符容器改为 Map 集合，key为 字符，value 为字符下标；并且不再清空集合了，而是遇到重复字符后，更新此字符的下标位置；</p><p>例如：一开始 字符 b 在map集合中的value 位置为1，当再次遇到下标为 3 的字符 b 后，将map集合中的value 下标  <strong>由 1 改为 3</strong> ；</p></li></ol></blockquote><h5 id="2-1、看图理解："><a href="#2-1、看图理解：" class="headerlink" title="2.1、看图理解："></a>2.1、看图理解：</h5><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200710142023.png" alt=""></p><h5 id="2-2、代码实现："><a href="#2-2、代码实现：" class="headerlink" title="2.2、代码实现："></a>2.2、代码实现：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeetCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// map 用来存储窗口字符, key是字符, value为字符在字符串中的下标位置</span></span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指针j</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 重复字符的位置, 默认为-1</span></span><br><span class="line">        <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 最大长度</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] sc = s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span>(j &lt; sc.length)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(sc[j]))&#123;</span><br><span class="line">                <span class="comment">// 获取map中重复字符的位置</span></span><br><span class="line">                <span class="keyword">int</span> index = map.get(sc[j]);</span><br><span class="line">                <span class="keyword">if</span> (index &gt; i)&#123;</span><br><span class="line">                    i = index;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 指着j - 重复字符的位置 = 当前窗口的大小</span></span><br><span class="line">            <span class="keyword">if</span> ((j-i) &gt; max)&#123;</span><br><span class="line">                max = j-i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果map中存在重复字符的话,这里是将字符的位置进行更新 ; 如果不是重复字符的话，就直接存放到map中</span></span><br><span class="line">            map.put(sc[j], j);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        map.clear();</span><br><span class="line">        map = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(lengthOfLongestSubstring(<span class="string">"abcdbefdn"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3、执行效果（来自LeetCode）："><a href="#2-3、执行效果（来自LeetCode）：" class="headerlink" title="2.3、执行效果（来自LeetCode）："></a>2.3、执行效果（来自LeetCode）：</h5><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200710174556.png" alt=""></p><blockquote><p>上面就是经过了代码优化后得到的执行效果，发现执行时间大大缩短了；但是这可能还不是最优的，可能还存在最优的方法。</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA对使用了第三方依赖jar包的非Maven项目打jar包</title>
      <link href="/2020/07/03/IDEA_packaging/"/>
      <url>/2020/07/03/IDEA_packaging/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200703110935.jpg" alt=""></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>最近，遇到了一个问题，都快把我整疯了；</p><p>这个问题开始是由  <strong>使用IDEA 对 <font color=red>非Maven项目</font>进行打 Jar 包</strong> 引起的；</p><p>本来就是想简简单单的打个 jar 包，并将使用的第三方依赖 jar 包打进去，但是问题就出现在了项目中依赖的第三方 jar 包（ <strong>bcprov-jdk15on-1.54.jar</strong> ）存在签名，那在打包过程中会把 <strong>签名</strong> 破坏掉，导致在使用打好的jar包时报错：<font color=red>  *<em>JCE cannot authenticate the provider BC *</em> </font> 。</p><p>注意：如果依赖的第三方jar包不存在签名的话，直接按照下面的 打包方式 就能成功打包；</p></blockquote><h2 id="IDEA打jar包："><a href="#IDEA打jar包：" class="headerlink" title="IDEA打jar包："></a>IDEA打jar包：</h2><blockquote><p>使用 IDEA 将项目打成jar包，并将使用的第三方依赖jar包打进去；</p></blockquote><h4 id="1、首先看下打包的项目工程："><a href="#1、首先看下打包的项目工程：" class="headerlink" title="1、首先看下打包的项目工程："></a>1、首先看下打包的项目工程：</h4><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200703093412.png" alt=""></p><h4 id="2、具体的打包流程："><a href="#2、具体的打包流程：" class="headerlink" title="2、具体的打包流程："></a>2、具体的打包流程：</h4><h5 id="2-1、首先配置-MANIFEST-MF"><a href="#2-1、首先配置-MANIFEST-MF" class="headerlink" title="2.1、首先配置 MANIFEST.MF"></a>2.1、首先配置 MANIFEST.MF</h5><blockquote><p>首先需要配置 <strong>MANIFEST.MF</strong> ， 因为这会在打包时使用的； </p><p>首先新建一个文件夹，文件夹取名为 <strong>META-INF</strong> ， 在文件夹META-INF中创建文件，取名为 <strong>MANIFEST.MF</strong> ，然后需要配置下 MANIFEST.MF 文件的内容；  内容如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Class-Path: lib/log4j-core-<span class="number">2.0</span>-rc1.jar lib/bcprov-jdk15on-<span class="number">1.54</span>.jar </span><br><span class="line">Main-Class: com.lyl.Test.PackageTest</span><br></pre></td></tr></table></figure><blockquote><p>注意上面 <strong>MANIFEST.MF</strong> 配置文件中的内容在填写时，需要注意几点：</p><p>1、Class-Path 在 冒号后面需要有 <strong>一个空格</strong> ；然后后面跟随的每个依赖包之间也必须有 <strong>一个空格</strong> ，并且最后一个依赖后面也必须要存在 <strong>一个空格</strong> ；</p><p>2、Main-Class这一行后面需要跟 <strong>两个空行</strong>　；</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200703093408.png" alt=""></p><blockquote><p>最后简单说下，MANIFEST.MF 在打包时起到什么作用呢：</p><ol><li><p>Main-Class 指定程序的运行入口，这样可以直接用java  -jar  xxx.jar来运行程序。</p></li><li><p>Class-Path 指定依赖jar包的路径，class loader类加载器会依据这个路径来搜索依赖的class。</p></li></ol></blockquote><h5 id="2-2、具体配置过程"><a href="#2-2、具体配置过程" class="headerlink" title="2.2、具体配置过程"></a>2.2、具体配置过程</h5><blockquote><p>下面将进行打包前的一些配置，需要将这些配置好后，才能进行打包的；</p></blockquote><p>（1）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702185225.png" alt=""></p><p>（2）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702185228.png" alt=""></p><p>（3）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702185557.png" alt=""></p><p>（4）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702185916.png" alt=""></p><p>（5）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702185920.png" alt=""></p><p>（6）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702192121.png" alt=""></p><p>（7）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702190003.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200703093757.png" alt=""></p><p>（8）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702190007.png" alt=""></p><h5 id="2-3、进行打包"><a href="#2-3、进行打包" class="headerlink" title="2.3、进行打包"></a>2.3、进行打包</h5><blockquote><p>上面将打包前的一些配置完成后，最后就可以直接进行打包了；</p></blockquote><p>（1）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702190010.png" alt=""></p><p>（2）、</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702190013.png" alt=""></p><blockquote><p>end， IDEA 打jar包流程已经完成了；但是打好的jar包，直接使用时，可能还会存在问题，再聊聊会出现的问题。</p><p>扩展： 如果想在打jar包时，将依赖的第三包jar包打进去的话，使用IDEA可能会比较繁琐，但是使用 Eclipse 会比较方便快捷，直接使用 Eclipse 的  <strong>fat jar 插件</strong> 进行打包，十分方便的。</p></blockquote><h2 id="3、打好的jar包在使用时可能存在的问题："><a href="#3、打好的jar包在使用时可能存在的问题：" class="headerlink" title="3、打好的jar包在使用时可能存在的问题："></a>3、打好的jar包在使用时可能存在的问题：</h2><h4 id="3-1、报错：Invalid-signature-file-digest-for-Manifest-main-attributes"><a href="#3-1、报错：Invalid-signature-file-digest-for-Manifest-main-attributes" class="headerlink" title="3.1、报错：Invalid signature file digest for Manifest main attributes"></a>3.1、报错：Invalid signature file digest for Manifest main attributes</h4><blockquote><p>将打好的jar包引用到另一个项目中，可能会报错：Invalid signature file digest for Manifest main attributes ；</p><p>这就是因为 打好的jar包中 存在多余的.SF文件，可以将jar包中后缀为 .SF文件删除就可以了。</p></blockquote><h4 id="3-2、报错：JCE-cannot-authenticate-the-provider-BC"><a href="#3-2、报错：JCE-cannot-authenticate-the-provider-BC" class="headerlink" title="3.2、报错：JCE cannot authenticate the provider BC"></a>3.2、报错：JCE cannot authenticate the provider BC</h4><blockquote><p>在项目中使用打好的jar包，可能会报错：JCE cannot authenticate the provider BC ；</p><p>这是因为 之前打包时，项目中依赖的第三方jar包中有存在 <strong>签名</strong> 的jar包（<strong>bcprov-jdk15on-1.54.jar</strong>）；在将其打进jar包时，就会将签名破坏掉，导致在使用这个签名被破坏的包中的类时，就会报错了。</p></blockquote><h4 id="3-3、解决方案："><a href="#3-3、解决方案：" class="headerlink" title="3.3、解决方案："></a>3.3、解决方案：</h4><h5 id="3-3-1、将签名包放一份到本地JDK中（不推荐）"><a href="#3-3-1、将签名包放一份到本地JDK中（不推荐）" class="headerlink" title="3.3.1、将签名包放一份到本地JDK中（不推荐）"></a>3.3.1、将签名包放一份到本地JDK中（不推荐）</h5><blockquote><p>此方案需要将签名包（<strong>bcprov-jdk15on-1.54.jar</strong>）放到 JDK 中的 jre 中的lib文件夹下的 ext 文件夹中；</p><p>例如：本地安装的JDK路径为  E:\Java\jdk1.8.0_60\jre\lib\ext ;  将签名包放到这里一份 。</p><p>但是此解决方案不推荐，为什么不推荐呢？</p><p>因为如果你打的jar包需要提供给别人的话，别人为了使用你的jar包，还需要改变自己的JDK，这个不太方便了。</p></blockquote><h5 id="3-3-2、打包时，不讲依赖签名包打进去（推荐）"><a href="#3-3-2、打包时，不讲依赖签名包打进去（推荐）" class="headerlink" title="3.3.2、打包时，不讲依赖签名包打进去（推荐）"></a>3.3.2、打包时，不讲依赖签名包打进去（推荐）</h5><blockquote><p> 打包时，不将签名包打进去。打好包后，在项目中使用时，需要将依赖的签名包与打好的包一起放到 <strong>lib</strong> 文件夹下，这样在使用签名包时，就会使用与 打好的包在同级别下的 依赖的签名包。</p><p>使用这种方案进行解决时，会比第一种方案方便很多，只是使用时，除了引入打好的jar包外，还需哟再引入下使用到的签名包（ <strong>bcprov-jdk15on-1.54.jar</strong> ），并将其放到同一级别目录下 即可。</p></blockquote><p><strong>打包时，不将签名包打进去的实现步骤：</strong>（以 bcprov-jdk15on-1.54.jar 签名包为例子）</p><p>（1）、首先是将  <strong>MANIFEST.MF</strong> 配置文件进行修改：</p><p>之前：存在签名包的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Class-Path: lib/log4j-core-<span class="number">2.0</span>-rc1.jar lib/bcprov-jdk15on-<span class="number">1.54</span>.jar </span><br><span class="line">Main-Class: com.lyl.Test.PackageTest</span><br></pre></td></tr></table></figure><p>修改：就是将签名包 <strong>bcprov-jdk15on-1.54.jar</strong> 的依赖引入删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Class-Path: lib/log4j-core-<span class="number">2.0</span>-rc1.jar</span><br><span class="line">Main-Class: com.lyl.Test.PackageTest</span><br></pre></td></tr></table></figure><p>（2）、改完 配置文件后，再修改上面打包 <strong>具体配置步骤</strong> 中的  <strong>第（7）</strong> 中的引入依赖jar包，将签名包删除，然后再点击OK，并重新打包 即可。如下图：</p><p>之前，签名包也引入了：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200703093757.png" alt=""></p><p>之后，去掉引入的签名包：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200703094310.png" alt=""></p><p><strong>重新打好的包，由于没有将依赖的签名包打进去，那么如果使用到签名包bcprov-jdk15on-1.54.jar的类时，就会报《 <em>类找不到</em>  》怎么办呢？</strong></p><p>可以将打好的jar包 “  <strong>packagetest-1.0.0.jar</strong>  ”， 与 签名包  <strong>bcprov-jdk15on-1.54.jar</strong>   放到引用的项目的 <strong>lib</strong> 文件夹下（需要保证这两个jar包在项目中的存放的位置在同一级别 即可）； 然后在使用时就会使用 外部引用的 依赖签名包中的类了，不会报 <strong>类找不到</strong> 。 </p><p>并且没有破坏签名包的签名，所以也不会报签名被破坏的错了：JCE cannot authenticate the provider BC</p><blockquote><p>end， 暂时只找到了这两种解决方案，感觉这都不是最优的解决方案，但是实在找不到了，唉，如果有知道的朋友，可以告诉下吗？ 谢谢啦！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200702201319.gif" alt=""></p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑啦，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot结合Sharding-JDBC实现分库分表</title>
      <link href="/2020/06/20/SpringBoot_shardDB_shardTable/"/>
      <url>/2020/06/20/SpringBoot_shardDB_shardTable/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210314175659.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">今天来聊下 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>Sharding-JDBC<span>」</span></strong> 分库分表中间件，这个中间件属于应用层依赖中间件，与应用层是强耦合的，需要在应用中显示加入依赖的Jar包；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">简单聊聊 Sharding-JDBC 后，本文最主要是聊下 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>SpringBoot 集成 Sharding-JDBC<span>」</span></strong> 的过程；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>小Demo：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">为此，专门写了一个SpringBoot集成Sharding-JDBC的Demo，并且这个Demo也支持很多其它的功能；</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210314140727.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>本文主线：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">聊聊Sharding-JDBC的基本知识和注意事项；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">Sharding-JDBC 集成Demo介绍；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">Sharding-JDBC 集成过程；</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">Sharding-JDBC 简介：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">首先贴出官网，大家可以去自行查阅：<a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/overview/" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">Sharding-JDBC 介绍</a></p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>1、基本概念：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">Sharding-JDBC 定位为轻量级Java框架，在Java的JDBC层提供的额外服务，所以说它是一款属于 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>应用层依赖类中间件<span>」</span></strong> 。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>2、兼容性：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">适用于任何基于Java的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">基于任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer和 PostgreSQL。</section></li></ul><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>3、架构图：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200620161834.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">图片来源：<a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/overview/" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">sharding-JDBC官网</a></p><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>4、数据分片：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">进行分库分表时，是绕不开 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>数据分片<span>」</span></strong> 的知识的。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">数据分片指：按照某个维度将存放在单一数据库中的数据分散地存放至多个数据库或表中以达到提升性能瓶颈以及可用性的效果。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">数据分片的拆分方式又分为：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">垂直分片</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">水平分片 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>（最为常用的方式）<span>」</span></strong></section></li></ul><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">垂直分片：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">按照 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>业务功能<span>」</span></strong> 拆分的方式称为垂直分片，又称为纵向拆分，它的核心理念是专库专用。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">例如：本来一个库由订单表和用户表构成，由于并发量和数据量太大，可以将这原本的一个库进行拆分，拆分成两个库，一个订单库，里面只有一个订单表，一个用户库，里面只有一个用户表，这样使用两个库就能支持更大的并发量，提升数据库的并发瓶颈。</p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">缺点：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">垂直分片往往需要对架构和设计进行调整。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">通常来讲，垂直分片是来不及应对互联网业务需求快速变化的；而且，它也并无法真正的解决单点瓶颈。垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。</p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">水平分片：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">水平分片又称为横向拆分。</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>某个字段（或某几个字段）<span>」</span></strong> ，根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。</p><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">注意：水平分片从理论上突破了单机数据量处理的瓶颈，并且扩展相对自由，是分库分表的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>标准解决方案<span>」</span></strong> 。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">例如，本文的Demo中实现的分库分表就是使用的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>水平分片<span>」</span></strong> ;</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">根据用户表中 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>name<span>」</span></strong> 用户名字段进行分片；在新增用户数据时，首先根据配置的分片策略（分片策略包含分片算法）判断此用户名的数据到底新增到哪个数据库中，以及哪个表中。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>5、分片算法：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">数据分片拆分方式指的是按照某个维度将数据进行拆分； 而分片算法（方法）指的是分库分表后，怎么将SQL路由到具体哪个数据节点中。</p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">常用的分片算法：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">hash方式</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">一致性hash方式</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">按照数据范围</section></li></ul><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">对于任何的分片算法都要考虑的问题：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">是否支持动态扩容，动态添加数据库节点机器？</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">当某个节点数据库down掉后，数据损失是否可以降到最低，以及能否将该节点上的任务均衡的平滑分摊到其他节点上？</section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">这三种具体的分片算法本文就不做介绍了，大家可以通过此文章 <a href="https://www.cnblogs.com/xybaby/p/7076731.html#_label_0" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">带着问题学习分布式系统之数据分片</a> 进行详细的了解；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">注意：本文Demo中使用的分片算法是 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>一致性hash算法<span>」</span></strong> ，此算法可以满足上述两个要求；此算法可以具体参考此文章 <a href="http://www.zsythink.net/archives/1182" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">白话解析：一致性哈希算法 consistent hashing</a> 进行了解；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>6、SQL执行流程：</span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">简单描述下项目中的SQL在 <a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/overview/" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">Sharding-JDBC</a> 中内部核心的执行流程：</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">SQL解析 =&gt; 执行器优化 =&gt; SQL路由 =&gt; SQL改写 =&gt; SQL执行 =&gt; 结果归并</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">下面主要介绍下 <em style="font-style: normal; color: #3594F7; font-weight: bold;">SQL路由、SQL改写</em> 的概念：</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">SQL路由：根据解析上下文匹配用户配置的分片策略，并生成最终的路由路径；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">SQL改写：将SQL改写为在真实数据库节点中可以正确执行的语句；</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>执行流程图：<span>」</span></strong></p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200620162548.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">图片来源：<a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/features/sharding/principle/" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">sharding-JDBC官网</a></p><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">Demo 介绍：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>1、工程目录：</span><span class="suffix" style="display: none;"></span></h4><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210314152342.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">注意：本Demo中，像有些功能在配置文件中加了限制开关了，默认可能是不启用的，如果想使用的话，则需要在配置文件中进行设置，将开关打开即可；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">例如：quartz 定时任务，默认不启用的；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>2、工程环境：</span><span class="suffix" style="display: none;"></span></h4><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">2.1、pom.xml:</span><span class="suffix" style="display: none;"></span></h5><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><br><span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">parent</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.0.6.RELEASE<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">relativePath</span>/&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">parent</span>&gt;</span><br><br><br><span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">properties</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">project.build.sourceEncoding</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">java.version</span>&gt;</span>1.7<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">java.version</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">mybatis-spring-boot</span>&gt;</span>1.2.0<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">mybatis-spring-boot</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">mysql-connector</span>&gt;</span>5.1.39<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">mysql-connector</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">fastjson</span>&gt;</span>1.2.41<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">fastjson</span>&gt;</span><br><span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">properties</span>&gt;</span><br><br><br><span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependencies</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">optional</span>&gt;</span>true<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">optional</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">scope</span>&gt;</span>test<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">scope</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;Spring&nbsp;Boot&nbsp;Mybatis&nbsp;依赖&nbsp;--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.0.1<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;MySQL&nbsp;连接驱动依赖&nbsp;--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>mysql<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--druid&nbsp;连接池--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>1.1.16<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>fastjson<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>${fastjson}<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--swagger--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>io.springfox<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.9.2<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>io.springfox<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.9.2<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;pagehelper分页工具&nbsp;--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>4.1.6<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>junit<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>junit<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>4.10<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;sharding-jdbc&nbsp;--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>4.0.0-RC1<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;hutool&nbsp;工具类&nbsp;--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>hutool-setting<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>5.2.4<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">&lt;!--&nbsp;quartz定时任务&nbsp;--&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span>org.quartz-scheduler<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">groupId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span>quartz<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">artifactId</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span>2.2.1<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">version</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependency</span>&gt;</span><br><br><span class="hljs-tag" style="line-height: 26px;">&lt;/<span class="hljs-name" style="color: #e45649; line-height: 26px;">dependencies</span>&gt;</span><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>建议<span>」</span></strong> ：pom.xml 中依赖的版本最好不要变动了，因为如果将里面的一些依赖版本变化了，可能会导致依赖版本兼容性问题出现，最终导致程序运行失败。</p><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">2.2、SQL环境：</span><span class="suffix" style="display: none;"></span></h5><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">本Demo中数据库使用的 Mysql，程序运行是前需要提前配置好数据库的；</p><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">由于对t_user表进行了分库，所以需要创建两个库：数据库名：springboot0、springboot1</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">并且也对t_user表进行了分表，分为了t_user0、t_user1、t_user2 三个表</section></li></ul><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>①、在 springboot0 数据库中执行下面的sql语句创建表：<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_role`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_role`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">11</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`role_name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">128</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">3</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;t_user0</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user0`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user0`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">65</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'id'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'姓名'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`age`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'年龄'</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">43</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;t_user1</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user1`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user1`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">65</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'id'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'姓名'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`age`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'年龄'</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">35</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;t_user2</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user2`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user2`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">65</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'id'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'姓名'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`age`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'年龄'</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">34</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>②、然后在创建的 springboot1 数据库中执行sql语句创建表：<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user0`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user0`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">65</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'id'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'姓名'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`age`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'年龄'</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">36</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;t_user1</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user1`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user1`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">65</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'id'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'姓名'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`age`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'年龄'</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">34</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;t_user2</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">--&nbsp;----------------------------</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DROP</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">IF</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">EXISTS</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user2`</span>;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CREATE</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">TABLE</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`t_user2`</span>&nbsp;(<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">65</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">NOT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;AUTO_INCREMENT&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'id'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`name`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">varchar</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'姓名'</span>,<br>&nbsp;&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`age`</span>&nbsp;<span class="hljs-built_in" style="color: #c18401; line-height: 26px;">int</span>(<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">NULL</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">COMMENT</span>&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">'年龄'</span>,<br>&nbsp;&nbsp;PRIMARY&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">KEY</span>&nbsp;(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">`id`</span>)<br>)&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">ENGINE</span>=<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">InnoDB</span>&nbsp;AUTO_INCREMENT=<span class="hljs-number" style="color: #986801; line-height: 26px;">36</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">DEFAULT</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">CHARSET</span>=utf8;<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">上面Demo的基本信息介绍完了，接下来介绍重头戏了，Sharding-JDBC集成之路啦！</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">集成过程：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">1、主要看下Sharding-JDBC的配置文件：</span><span class="suffix" style="display: none;"></span></h5><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210323110202.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">下面是Sharding-JDBC 配置文件的内容；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">注意：</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">本Demo中的只有 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>t_user<span>」</span></strong> 表进行了分库分表，其它表没有进行分库分表，那些没进行分库分表的表是走设置的默认数据库；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">分库2个，分表3个，分片键是t_user表中的 name 字段，分库分表都是依据 name 这个分片键的；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;分库分表&nbsp;配置:&nbsp;(下面配置的分库数量、虚拟节点数量等主要是为了实现一致性hash算法进行分片)</span><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;分库数量</span><br>sharding.datasource.count=2<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;分库虚拟节点数量</span><br>sharding.datasource.virtual.node.count=360<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;虚拟节点映射到物理节点范围：例如本文中是根据name名字进行分片的,&nbsp;所以使用名字的hash值对虚拟节点数取余;</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;得到一个0-359的余数，然后按照余数所属的范围,&nbsp;如果余数在0-179范围则数据分片访问&nbsp;springboot0&nbsp;数据源,</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;如果余数在180-359范围，则数据被分片访问&nbsp;springboot1&nbsp;数据源;&nbsp;下面的分表原理一样。</span><br>sharding.datasource.virtual.node.count.rang=0-179,180-359<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;分表数量</span><br>sharding.table.count=3<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;分表虚拟节点数量</span><br>sharding.table.virtual.node.count=360<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;虚拟节点映射到物理节点范围</span><br>sharding.table.virtual.node.count.rang=0-119,120-249,250-359<br><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;实际数据源名字</span><br>spring.shardingsphere.datasource.names=springboot0,springboot1<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;数据源</span><br>spring.shardingsphere.datasource.springboot0.type=com.alibaba.druid.pool.DruidDataSource<br>spring.shardingsphere.datasource.springboot0.driver-class-name=com.mysql.jdbc.Driver<br>spring.shardingsphere.datasource.springboot0.url=jdbc:mysql://localhost:3306/springboot0?characterEncoding=utf-8&amp;useSSL=<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">false</span><br>spring.shardingsphere.datasource.springboot0.username=root<br>spring.shardingsphere.datasource.springboot0.password=root<br><br>spring.shardingsphere.datasource.springboot1.type=com.alibaba.druid.pool.DruidDataSource<br>spring.shardingsphere.datasource.springboot1.driver-class-name=com.mysql.jdbc.Driver<br>spring.shardingsphere.datasource.springboot1.url=jdbc:mysql://localhost:3306/springboot1?characterEncoding=utf-8&amp;useSSL=<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">false</span><br>spring.shardingsphere.datasource.springboot1.username=root<br>spring.shardingsphere.datasource.springboot1.password=root<br><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">###&nbsp;分片策略使用的是:&nbsp;自定义的分片算法</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;实际的数据节点，符合&nbsp;groovy&nbsp;语法;&nbsp;这里的{0..1}指的是0到1及其之间的数字，数字有0，1两个，代表分库是两个;</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;并且拼接在&nbsp;springboot&nbsp;后面，就构成了上面配置的实际数据源名称了</span><br>spring.shardingsphere.sharding.tables.t_user.actualDataNodes=springboot$-&gt;{0..1}.t_user$-&gt;{0..2}<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;分片键：name字段</span><br>spring.shardingsphere.sharding.tables.t_user.databaseStrategy.standard.shardingColumn=name<br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;自定义&nbsp;分库&nbsp;算法</span><br>spring.shardingsphere.sharding.tables.t_user.databaseStrategy.standard.preciseAlgorithmClassName=com.lyl.algorithm.MyPreciseDBShardingAlgorithm<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;分片键：name字段</span><br>spring.shardingsphere.sharding.tables.t_user.tableStrategy.standard.shardingColumn=name<br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">##&nbsp;自定义&nbsp;分表&nbsp;算法</span><br>spring.shardingsphere.sharding.tables.t_user.tableStrategy.standard.preciseAlgorithmClassName=com.lyl.algorithm.MyPreciseTableShardingAlgorithm<br><br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;不进行分库分表的数据源指定，使用设置的默认数据源springboot0&nbsp;;例如，本文中的&nbsp;t_role表就不进行</span><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;分库分表，那关于&nbsp;t_role&nbsp;表的增删改差都走默认数据源&nbsp;springboot0</span><br>spring.shardingsphere.sharding.default-data-source-name=springboot0<br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">#&nbsp;打印执行的数据库以及语句</span><br>spring.shardingsphere.props.sql.show=<span class="hljs-literal" style="color: #0184bb; line-height: 26px;">true</span><br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果需要更改分库数量，或者分表数量的话，那么也需要对配置文件进行更改；例如：将分库数量 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>由之前的2个改为3个<span>」</span></strong> ； 下面这些配置文件内容需要更改：</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>原配置内容：<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">sharding.datasource.count=<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span><br>sharding.datasource.virtual.node.count.rang=<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>-<span class="hljs-number" style="color: #986801; line-height: 26px;">179</span>,<span class="hljs-number" style="color: #986801; line-height: 26px;">180</span>-<span class="hljs-number" style="color: #986801; line-height: 26px;">359</span><br>spring.shardingsphere.sharding.tables.t_user.actualDataNodes=springboot$-&gt;{<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>..<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>}.t_user$-&gt;{<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>..<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>}<br></code></pre><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>更改后的配置内容：<span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">sharding.datasource.count=<span class="hljs-number" style="color: #986801; line-height: 26px;">3</span><br>sharding.datasource.virtual.node.count.rang=<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>-<span class="hljs-number" style="color: #986801; line-height: 26px;">119</span>,<span class="hljs-number" style="color: #986801; line-height: 26px;">120</span>-<span class="hljs-number" style="color: #986801; line-height: 26px;">249</span>,<span class="hljs-number" style="color: #986801; line-height: 26px;">250</span>-<span class="hljs-number" style="color: #986801; line-height: 26px;">359</span><br>spring.shardingsphere.sharding.tables.t_user.actualDataNodes=springboot$-&gt;{<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>..<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>}.t_user$-&gt;{<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>..<span class="hljs-number" style="color: #986801; line-height: 26px;">2</span>}<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>2、分片算法：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">介绍完上面数据分片的情况后，然后再介绍下项目中自定义的数据分片算法；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">2.1、自定义的 分库 算法：</span><span class="suffix" style="display: none;"></span></h5><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200620194412.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">2.2、自定义的 分表 算法：</span><span class="suffix" style="display: none;"></span></h5><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200620194419.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>3、注意事项：</span><span class="suffix" style="display: none;"></span></h4><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">本项目中只有 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>t_user<span>」</span></strong> 表进行了分库分表， <strong style="color: #3594F7; font-weight: bold;"><span>「</span>t_role<span>」</span></strong> 表没有进行 分库分表，t_role 表的增删改差走 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>默认数据源springboot0<span>」</span></strong> ；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">注意： Sharding-JDBC 是 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>不支持跨库查询<span>」</span></strong> 的；当使用联合查询SQL时，如果在联合查询中存在 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>进行了分库的表 和 未进行分库的表<span>」</span></strong> ，那么就可能会出现跨库查询，此时是查询不出数据的； 例如在本Demo中如果使用 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>t_user、t_role<span>」</span></strong> 两张表进行关联查询时，就会存在跨库问题。</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20210106101120.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">提供的建议：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果一定要使用联合查询SQL，那么需要将联合查询中所有的表都进行分库，并且分库时选择的分片键字段需要一致，并将表设置为 <a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/features/sharding/concept/sql/" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">绑定表</a> ，提升联合查询速度；</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">一般在分库分表后不建议使用多表联合查询，由于会出现上面那种问题，建议使用 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>单表查询<span>」</span></strong> 。使用单表查询时，可以使用应用层代码将多个单表查询的结果集进行整合即可。</p></section></li></ul><h5 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 16px;"><span class="prefix" style="display: none;"></span><span class="content">为什么建议使用单表查询呢：</span><span class="suffix" style="display: none;"></span></h5><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">使用单表查询可以有效降低数据库端的读写压力；因为在使用多表关联查询时，数据库对SQL进行解析时比较复杂，并且需要在经历很多的计算后才能得到最终的结果集 等等；所以说多表关联查询时数据库压力非常大，如果数据库端压力过大的话，就需要进行扩容，扩容时就涉及到了数据一致性等问题，这是非常麻烦的。</p></section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;"><p style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">在使用单表查询时，主要将压力都集中到了服务应用代码上了，如果服务应用代码压力很大的话，可以很简单的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>部署集群（多部署几台机器） + Ｎginx请求转发<span>」</span></strong>　就可以提高整体系统的吞吐量了。</p></section></li></ul><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">自此SpringBoot集成 Sharding-JDBC 之路就此结束了，本文由于篇幅问题，只是给大家进行了较为宽泛的介绍，没有进行细致描述；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">但是没关系呀，大家可以去 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>【木子雷】<span>」</span></strong> 公众号中或直接扫描下方二维码，输入 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>jdbc<span>」</span></strong> 获取本文中 Demo 的地址，大家可以自己仔细去阅读代码进行理解，如果有不理解的或Demo代码中存在问题的可以留言讨论呀！</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢啦！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索 <em style="font-style: normal; color: #3594F7; font-weight: bold;">【木子雷】</em> 公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127105439.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 分库分表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sharding-JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旋转链表？面试官你确定要让手写这个吗？</title>
      <link href="/2020/06/07/rotate_Single_linked_list/"/>
      <url>/2020/06/07/rotate_Single_linked_list/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>今天练习了一道关于单链表的算法题 <a href="https://leetcode-cn.com/problems/rotate-list/" target="_blank" rel="noopener">《旋转链表》</a>，由于之前写过一篇 <a href="https://segmentfault.com/a/1190000022791475" target="_blank" rel="noopener">《单链表反转？面试官你确定要问这个吗？》</a> 的文章，然后今天又碰到了这道有关单链表的算法，就想着再 <strong>“水篇文章”</strong> 吧（带引号的哈），可以证明我没偷懒，按时<strong>写作业</strong>了。<font color=red>嘿嘿 . . . . . . . . . </font></p><p>接下来，①、首先回忆下单链表的数据结构 ；②、详解描述下什么是旋转链表； ③、图解旋转链表代码</p></blockquote><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530152024.gif" style="zoom:50%;" /><h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><h4 id="1-单链表的数据结构："><a href="#1-单链表的数据结构：" class="headerlink" title="1. 单链表的数据结构："></a>1. 单链表的数据结构：</h4><blockquote><p>单链表是一种线性结构，它是由一个个<font color=red><strong>节点（Node）</strong>组成的</font>。并且每个节点（Node）是由一块<font color=red><strong>数据域（data）</strong></font>和一块<font color=red><strong>指针域（next）</strong></font>组成的。 &nbsp;&nbsp;&nbsp;&nbsp; </p></blockquote><p>①、节点（Node）结构图如下：</p><blockquote><ol><li><strong>节点的数据域</strong>：data数据域一般就是用来存放数据的 。（注：data域需要指定类型，只能存放指定类型的数据，不能什么东西都放，是不是呀； 那代码中是怎么实现的呢？ 使用 <strong>泛型</strong>  。）</li><li><strong>节点的指针域</strong>：next指针域一般就是存放的指向下一个节点的指针；这个指针其实是一个内存地址，因为Node节点对象是存放在JVM中的堆内存中，所以节点的next指针域中存放就是下一个节点在堆内存中的地址；而在代码中对象的内存地址是赋值给其引用变量了，所以<strong>指针域中存放的是下一个节点对象的引用变量</strong>。</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200607180119.png" alt=""></p><p>②、单链表结构图如下：（<strong>下图是由三个节点构成的单链表</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530154552.png" alt=""></p><blockquote><p>若有所思，en en en . . .  . . .   好像单链表的知识在脑海中清晰了些呀；那要不我们快马加鞭，赶紧把单链表的数据结构代码弄出来，然后再思索下怎么<strong>实现旋转操作</strong>， en en en. . . .. . .     嘿嘿！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530161055.gif" alt=""></p><h4 id="2-节点类Node代码："><a href="#2-节点类Node代码：" class="headerlink" title="2. 节点类Node代码："></a>2. 节点类Node代码：</h4><blockquote><p>创建Node节点类，节点类中并且额外提供了两个方法（单链表的创建方法、单链表的遍历方法）；</p><p>注意：单链表的创建方法 createLinkedList( )：Node节点的插入方式为 <font color=red><strong>尾插法</strong></font> ， 其实还有 <strong>头插法</strong> 方式；</p><p>扩展：链表中节点的插入方式还在 <strong>HashMap</strong> 中使用到了，<strong>在 JDK 1.7 时是头插法，JDK 1.8时是尾插法</strong>；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PACKAGE</span>_NAME: com.lyl.linklist</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  单链表的 节点类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-06-07 15:51</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点的数据域</span></span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line">    <span class="comment">// 节点的指针域</span></span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据域值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 单链表 （尾插法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">createLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 头节点</span></span><br><span class="line">        Node&lt;String&gt; head;</span><br><span class="line"></span><br><span class="line">        Node&lt;String&gt; n = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"111"</span>);</span><br><span class="line">        Node&lt;String&gt; n1 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"222"</span>);</span><br><span class="line">        Node&lt;String&gt; n2 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"333"</span>);</span><br><span class="line">        Node&lt;String&gt; n3 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"444"</span>);</span><br><span class="line">        Node&lt;String&gt; n4 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"555"</span>);</span><br><span class="line">        Node&lt;String&gt; n5 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"666"</span>);</span><br><span class="line">        <span class="comment">// 指定头节点</span></span><br><span class="line">        head = n;</span><br><span class="line">        n.next = n1;</span><br><span class="line">        n1.next = n2;</span><br><span class="line">        n2.next = n3;</span><br><span class="line">        n3.next = n4;</span><br><span class="line">        n4.next = n5;</span><br><span class="line">        <span class="comment">// 返回头结点</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历单链表并在控制台打印输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head  单链表的 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.data + <span class="string">" --&gt; "</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"null"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>给定一个链表，旋转链表，将链表每个节点<strong>向右移动 <em>k</em> 个位置</strong>，其中 <em>k</em> 是非负数。</p><p>自我理解：其实是将从尾部数的 <em>k</em> 个节点截取出来再拼接到 <em>head</em> 头节点上。</p><p><font color=red>注意：旋转链表操作会存在两种情况的，正如下面的 <strong>实例1 和 实例2</strong> 。</font></p></blockquote><h4 id="实例1：（移动位置-k-小于-单链表的长度）"><a href="#实例1：（移动位置-k-小于-单链表的长度）" class="headerlink" title="实例1：（移动位置 k 小于 单链表的长度）"></a>实例1：（移动位置 <em>k</em> 小于 单链表的长度）</h4><blockquote><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL ,   <strong>k = 2 （每个节点向右移动2个位置）</strong><br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p></blockquote><p><strong>如图：（直接将 4 、5节点截取下来拼接到头结点上）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200607181504.png" alt=""></p><h4 id="实例2：（移动位置-k-大于-单链表的长度）"><a href="#实例2：（移动位置-k-大于-单链表的长度）" class="headerlink" title="实例2：（移动位置 k 大于 单链表的长度）"></a>实例2：（移动位置 <em>k</em> 大于 单链表的长度）</h4><blockquote><p>输入: 0-&gt;1-&gt;2-&gt;NULL ,    <strong>k = 4 （每个节点向右移动4个位置）</strong><br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</p></blockquote><p><strong>如图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200607182617.png" alt=""></p><h2 id="图解代码："><a href="#图解代码：" class="headerlink" title="图解代码："></a>图解代码：</h2><blockquote><p>旋转链表使用的方法是<strong>双指针法</strong>，会存在两个指针：<strong>current 指针、previous 指针</strong> 。通过两个指针移动，并且保证两个指针之间的间距为<strong>需要移动的位置数</strong> 。</p></blockquote><h4 id="1-先看图："><a href="#1-先看图：" class="headerlink" title="1. 先看图："></a>1. 先看图：</h4><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200608200059.png" alt=""></p><h4 id="2-代码："><a href="#2-代码：" class="headerlink" title="2. 代码："></a>2. 代码：</h4><blockquote><p>注意：代码中使用的节点类Node在本文的上面已经提供了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PACKAGE</span>_NAME: com.lyl.linklist</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: RotateLinkedListByDoublePointer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  通过双指针法 旋转链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-06-07 16:00</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateLinkedListByDoublePointer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  旋转单链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head   单链表 头结点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> placeNum  向右移动的位置数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">rotate</span><span class="params">(Node head, <span class="keyword">int</span> placeNum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 临时节点</span></span><br><span class="line">        Node temp;</span><br><span class="line">        <span class="comment">// 将临时节点指向头结点</span></span><br><span class="line">        temp = head;</span><br><span class="line">        <span class="comment">// 记录单链表的长度</span></span><br><span class="line">        <span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 遍历单链表得到其长度</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            length++;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  如果单链表的长度小于移动的位置数</span></span><br><span class="line"><span class="comment">         * (注意：移动位置数是单链表长度的整数倍时，其实相当于单链表没有移动，还是原来的样式)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (length &lt;= placeNum)&#123;</span><br><span class="line">            <span class="comment">// 获取余数，也就是最终要向右移动的位置数</span></span><br><span class="line">            placeNum = placeNum % length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果余数为0，和上面所说的单链表其实没有变化的</span></span><br><span class="line">        <span class="keyword">if</span> (placeNum == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前节点指针</span></span><br><span class="line">        Node current;</span><br><span class="line">        <span class="comment">// 前节点指针</span></span><br><span class="line">        Node previous;</span><br><span class="line">        current = head;</span><br><span class="line">        previous = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录当前指针是否移动了(要求移动的位置数)</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 在当前指针移动了(要求的位置数)后，并且当前指针还未移动到单链表的尾节点的话，</span></span><br><span class="line"><span class="comment">             * 此时需要current、previous指针一起移动了</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (i == placeNum)&#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">                previous = previous.next;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 在当前指针还未移动(要求的位置数)前，只有当前指针移动，previous指针不动</span></span><br><span class="line">                i++;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当 current指针移动到了链表的尾部后，此时指针移动结束，将当前previous、current指针截取的</span></span><br><span class="line"><span class="comment">         * 这段节点拼接到头节点前，并将previous指针指向的节点与后继结点断开连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node newTemp = previous.next;</span><br><span class="line">        previous.next = <span class="keyword">null</span>;</span><br><span class="line">        current.next = head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newTemp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建单链表</span></span><br><span class="line">        Node head = Node.createLinkedList();</span><br><span class="line">        System.out.print(<span class="string">"新创建的单链表： "</span>);</span><br><span class="line">        <span class="comment">// 遍历新创建的单链表</span></span><br><span class="line">        Node.traverse(head);</span><br><span class="line">        <span class="comment">// 旋转链表，向右移动 10 个位置数</span></span><br><span class="line">        Node newHead = rotate(head, <span class="number">10</span>);</span><br><span class="line">        System.out.print(<span class="string">"反转后的单链表： "</span>);</span><br><span class="line">        <span class="comment">// 遍历反转后的单链表</span></span><br><span class="line">        Node.traverse(newHead);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530192854.gif" alt=""></p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AQS之CountDownLatch源码解析</title>
      <link href="/2020/05/31/AQS_CountDownLatch_source_code_analysis/"/>
      <url>/2020/05/31/AQS_CountDownLatch_source_code_analysis/</url>
      
        <content type="html"><![CDATA[<section id="nice" data-tool="mdnice编辑器" data-website="https://www.mdnice.com" style="font-size: 16px; padding: 0 10px; word-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; line-height: 1.25; color: #2b2b2b; font-family: Optima-Regular, Optima, PingFangTC-Light, PingFangSC-light, PingFangTC-light; letter-spacing: 2px; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.04) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201220204935.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">前言：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>CountDownLatch（倒计时器）<span>」</span></strong> 是JDK并发包下的一个同步工具类，其内部是依赖于AQS（AbstractQueuedSynchronizer）的 共享锁（共享模式）。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;"><font color="red">注意：</font> 建议阅读本文前，可以先看看这篇文章<a href="https://blog.csdn.net/feichitianxia/article/details/106459784" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">《AQS之ReentrantLock源码解析》</a>，这篇文章中对AQS进行了简要介绍，有助于快速理解本文。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>本文主线：</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">CountDownLatch 应用场景</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">CountDownLatch 源码分析</section></li></ul><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">应用场景：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">针对于 CountDownLatch 倒计时器， 一种典型的场景就是类似于 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>火箭发射<span>」</span></strong> ；在火箭发射前，为了保证万无一失，往往还要进行各项设备、仪器的检测，只有等到所有的检查完毕且没问题后，引擎才能点火。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">那么在检测环节中多个检测项可以同时并发进行的，只有所有检测项全部完成后，才会通知引擎点火的，这里就可以使用 CountDownLatch 来实现。</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">CountDownLatch 到底是怎么实现的呢？别着急，<strong style="color: #3594F7; font-weight: bold;"><span>「</span>模拟代码<span>」</span></strong>奉上：</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUzMTE0MzIwMy5wbmc?x-oss-process=image/format,png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>模拟代码：</span><span class="suffix" style="display: none;"></span></h3><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.Random;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.concurrent.CountDownLatch;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.concurrent.ExecutorService;<br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">import</span>&nbsp;java.util.concurrent.Executors;<br><br><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@PACKAGE</span>_NAME:&nbsp;com.lyl.aqs<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@ClassName</span>:&nbsp;SimulateRocketLaunchDemo<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Description</span>:&nbsp;&nbsp;使用&nbsp;CountDownLatch&nbsp;模拟火箭发射过程<br>&nbsp;*&nbsp;<span class="hljs-doctag" style="color: #a626a4; line-height: 26px;">@Date</span>:&nbsp;2020-05-31&nbsp;14:17<br>&nbsp;**/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-class" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">class</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">SimulateRocketLaunchDemo</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">implements</span>&nbsp;<span class="hljs-title" style="color: #c18401; line-height: 26px;">Runnable</span></span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;设置了&nbsp;10&nbsp;个检测项</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;CountDownLatch&nbsp;latch&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;CountDownLatch(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;SimulateRocketLaunchDemo&nbsp;demo&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;SimulateRocketLaunchDemo();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="color: #4078f2; line-height: 26px;">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">run</span><span class="hljs-params" style="line-height: 26px;">()</span></span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;模拟检查任务</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Random().nextInt(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>)&nbsp;*&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">1000</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Thread.currentThread().getName().split(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"-"</span>)[<span class="hljs-number" style="color: #986801; line-height: 26px;">3</span>]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"&nbsp;check&nbsp;complete&nbsp;！"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">catch</span>&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//计数减一</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//放在finally避免任务执行过程出现异常，导致countDown()不能被执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latch.countDown();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;test</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">static</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">main</span><span class="hljs-params" style="line-height: 26px;">(String[]&nbsp;args)</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throws</span>&nbsp;InterruptedException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;设置线程数为10的固定线程池</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExecutorService&nbsp;exec&nbsp;=&nbsp;Executors.newFixedThreadPool(<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;i=<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;&nbsp;i&lt;<span class="hljs-number" style="color: #986801; line-height: 26px;">10</span>;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;提交任务</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exec.submit(demo);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;等待检查，只有当10个检测项全部检测完成后，才会唤醒处于等待状态的main主线程，让其继续执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latch.await();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;发射火箭</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"Fire!"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;关闭线程池</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exec.shutdown();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">再提供一个CountDownLatch 的实际应用的例子，<strong style="color: #3594F7; font-weight: bold;"><span>「</span>传送门<span>」</span></strong>：https://blog.csdn.net/feichitianxia/article/details/97814645</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;">源码分析：</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">由于CountDownLatch 内部的实现是依赖于AQS的 <strong style="color: #3594F7; font-weight: bold;"><span>「</span>共享锁（共享模式）<span>」</span></strong> 的，所以在阅读其源码前，需要对AQS的基础有一定的了解，否则源码看起来会相对困难很多；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">如果对AQS一点也不了解的话，可以先阅读下 <a href="https://blog.csdn.net/feichitianxia/article/details/106459784" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">《AQS之ReentrantLock源码解析》</a> 文章了解下AQS，这样在后面分析CountDownLatch 源码时会简单些；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>什么是共享锁、排它锁？</span><span class="suffix" style="display: none;"></span></h4><ul data-tool="mdnice编辑器" style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">共享锁：允许多个线程可以同时获取一个锁； （CountDownLatch 使用的共享锁）</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">排它锁：一个锁在同一时刻只运行一个线程拥有；（ReentrantLock 使用的排它锁）</section></li></ul><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>1、接下来主要分析CountDownLatch的这几个方法：</span><span class="suffix" style="display: none;"></span></h3><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUzMTE5MTA0NC5wbmc?x-oss-process=image/format,png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">通过上图中的CountDownLatch 几个方法深入其源码进行分析；</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>2、构造方法 new CountDownLatch(10) ：</span><span class="suffix" style="display: none;"></span></h3><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">CountDownLatch</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;count)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(count&nbsp;&lt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throw</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;IllegalArgumentException(<span class="hljs-string" style="color: #50a14f; line-height: 26px;">"count&nbsp;&lt;&nbsp;0"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;CountDownLatch内部维护了Sync内部类，内部类继承了AQS父类</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">this</span>.sync&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;Sync(count);<br>}<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>①、接下来看看 Sync 类的构造方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">Sync(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;count)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;setState()方法是AQS提供的state变量的写方法，&nbsp;state变量被volatile修饰，由于volatile的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;happen-before规则，被&nbsp;volatile&nbsp;修饰的变量单独读写操作具有原子性<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;setState(count);<br>}<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>然后在看看AQS提供的setState(int newCount) 方法 和 state变量：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;The&nbsp;synchronization&nbsp;state.<br>&nbsp;*/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">volatile</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;state;<br><br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">protected</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setState</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;newState)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;state&nbsp;=&nbsp;newState;<br>}<br></code></pre><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>3、CountDownLatch的 getCount( ) 方法：</span><span class="suffix" style="display: none;"></span></h3><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">long</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getCount</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;调用&nbsp;sync&nbsp;内部类的getCount()方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;sync.getCount();<br>}<br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>①、Sync 内部类的getCount( ) 方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getCount</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;Sync&nbsp;调用其父类AQS的&nbsp;getState()方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;getState();<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>AQS的getState(）方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;*&nbsp;The&nbsp;synchronization&nbsp;state.<br>&nbsp;*/</span><br><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">volatile</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;state;<br><br><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">protected</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">getState</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;返回state同步状态值</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;state;<br>}<br><br></code></pre><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>4、CountDownLatch 的 countDown( ) 方法：</span><span class="suffix" style="display: none;"></span></h3><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">countDown</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;调用Sync内部类的父类AQS的&nbsp;releaseShared()共享锁释放模版方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;sync.releaseShared(<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>);<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>①、AQS的 releaseShared( ) 方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">releaseShared</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;arg)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;tryReleaseShared()方法是尝试释放锁，这个方法在AQS的子类Sync进行了重写<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(tryReleaseShared(arg))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;如果tryReleaseShared()方法尝试释放锁成功，并且此时state同步状态变量值为0时，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;则执行doReleaseShared方法，将在同步队列中阻塞的线程唤醒<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doReleaseShared();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">false</span>;<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>②、CountDownLatch 的 tryReleaseShared( )方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">protected</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">tryReleaseShared</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;releases)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;for(;;)&nbsp;与&nbsp;while(true)&nbsp;一样的死循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(;;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;获取state同步变量值</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;c&nbsp;=&nbsp;getState();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;如果state同步变量值已经是0，则返回false</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(c&nbsp;==&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将state同步变量值进行减一</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;nextc&nbsp;=&nbsp;c-<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;使用AQS提供的CAS算法方法更新state变量值</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(compareAndSetState(c,&nbsp;nextc))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;如果nextc等于0，代表此时state同步变量值为0了，返回true</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>&nbsp;nextc&nbsp;==&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>③、AQS提供的 doReleaseShared( ) 方法： <font color="red">唤醒同步队列中阻塞的线程</font></span><span class="suffix" style="display: none;"></span></h4><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;"><strong style="color: #3594F7; font-weight: bold;"><span>「</span>Node节点的四种状态值请参考文章：<a href="https://blog.csdn.net/feichitianxia/article/details/106459784" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">《AQS之ReentrantLock源码解析》</a><span>」</span></strong></p><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">doReleaseShared</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(;;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;head同步队列中的队列头</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;h&nbsp;=&nbsp;head;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(h&nbsp;!=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;&amp;&amp;&nbsp;h&nbsp;!=&nbsp;tail)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;获取head节点的状态，AQS中的Node内部节点类中定义了四种状态值<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;四种状态值请参考上面&nbsp;↑&nbsp;文章<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;ws&nbsp;=&nbsp;h.waitStatus;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;SIGNAL是四中状态值之一：表示当前节点中的线程可以尝试被唤醒&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(ws&nbsp;==&nbsp;Node.SIGNAL)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将节点的状态使用CAS算法更新为0，0表示初始化状态</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(!compareAndSetWaitStatus(h,&nbsp;Node.SIGNAL,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;状态更新0失败，则进行下次循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">continue</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;状态成功更新为0后，唤醒节点中的线程，此方法具体源码可参考上面&nbsp;↑&nbsp;文章</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unparkSuccessor(h);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;如果节点状态值为0，则使用CAS方法更新节点状态值为&nbsp;Node.PROPAGATE<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;PROPAGATE&nbsp;是四中状态值之一：该状态表示可运行，只在共享模式下使用<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">else</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(ws&nbsp;==&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>&nbsp;&amp;&amp;&nbsp;!compareAndSetWaitStatus(h,&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>,&nbsp;Node.PROPAGATE))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">continue</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(h&nbsp;==&nbsp;head)&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;跳出循环</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">break</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br></code></pre><h3 data-tool="mdnice编辑器" style="padding: 0px; color: black; font-size: 17px; font-weight: bold; text-align: center; position: relative; margin-top: 20px; margin-bottom: 20px;"><span class="prefix" style="display: none;"></span><span class="content" style="border-bottom: 2px solid RGBA(79, 177, 249, .65); color: #2b2b2b; padding-bottom: 2px;"><span style="width: 30px; height: 30px; display: block; background-image: url(https://files.mdnice.com/fullstack-2.png); background-position: center; background-size: 30px; margin: auto; opacity: 1; background-repeat: no-repeat; margin-bottom: -8px;"></span>5、CountDownLatch 的 await( ) 方法：</span><span class="suffix" style="display: none;"></span></h3><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">await( ) 方法：</p><ul style="margin-top: 8px; margin-bottom: 8px; padding-left: 25px; font-size: 15px; color: #595959; list-style-type: circle;"><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">当state状态变量值不为0时，就一直将线程（main主线程）阻塞在同步队列中；</section></li><li><section style="margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; font-size: 14px; font-weight: normal; color: #595959;">当state变量值为0时，会尝试将线程唤醒，并将唤醒操作传播下去。</section></li></ul><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">await</span><span class="hljs-params" style="line-height: 26px;">()</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throws</span>&nbsp;InterruptedException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;调用Sync内部类的父类AQS的模版方法&nbsp;acquireSharedInterruptibly()方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;sync.acquireSharedInterruptibly(<span class="hljs-number" style="color: #986801; line-height: 26px;">1</span>);<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>①、AQS的模版方法 acquireSharedInterruptibly(1) 方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">public</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">acquireSharedInterruptibly</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;arg)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throws</span>&nbsp;InterruptedException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;interrupted()判断当前线程是否被中断，注意：此方法会默认清除线程的中断标志<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(Thread.interrupted())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throw</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;InterruptedException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;tryAcquireShared()尝试访问共享锁，如果state同步状态变量值不为0，则返回-1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(tryAcquireShared(arg)&nbsp;&lt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;将阻塞的线程创建Node节点，绑定节点类型为共享模式，并将创建的节点加入同步队列的队尾<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;并且当新创建的Node节点的前驱结点为head时，就会尝试唤醒下一个节点中的线程<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doAcquireSharedInterruptibly(arg);<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>②、AQS提供的 doAcquireSharedInterruptibly( ) 方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;"><span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">doAcquireSharedInterruptibly</span><span class="hljs-params" style="line-height: 26px;">(<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;arg)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throws</span>&nbsp;InterruptedException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;创建新Node节点，绑定共享模式，并将其插入到队尾</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Node&nbsp;node&nbsp;=&nbsp;addWaiter(Node.SHARED);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;failed是中断标志位</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">boolean</span>&nbsp;failed&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">for</span>&nbsp;(;;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;返回当前节点的前驱结点</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">final</span>&nbsp;Node&nbsp;p&nbsp;=&nbsp;node.predecessor();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(p&nbsp;==&nbsp;head)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;判断当前state同步变量值是否为0，不是0返回-1，是0返回1</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;r&nbsp;=&nbsp;tryAcquireShared(arg);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;如果&nbsp;r大于0，表示state变量值为0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(r&nbsp;&gt;=&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;将当前节点设置head队列头，并且尝试唤醒同步队列中阻塞的线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeadAndPropagate(node,&nbsp;r);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.next&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;help&nbsp;GC</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failed&nbsp;=&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;shouldParkAfterFailedAcquire()是对当前节点的前驱结点的状态进行判断，以及去针对各种<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;状态做出相应处理，由于文章篇幅问题，具体源码本文不做讲解；只需知道如果前驱结点p的状态为<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;SIGNAL的话，就返回true。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;parkAndCheckInterrupt()方法会使当前线程进去waiting状态，并且查看当前线程是否被中断，<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;interrupted()&nbsp;同时会将中断标志清除。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(shouldParkAfterFailedAcquire(p,&nbsp;node)&nbsp;&amp;&amp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parkAndCheckInterrupt())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">throw</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">new</span>&nbsp;InterruptedException();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(failed)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">/**<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;如果for(;;)循环中出现异常，并且failed=false没有执行的话,cancelAcquire方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;就会将当前线程的状态置为&nbsp;node.CANCELLED&nbsp;已取消状态，并且将当前节点node移出<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;同步队列。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancelAcquire(node);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br></code></pre><h4 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 18px;"><span class="prefix" style="display: none;"></span><span class="content" style="height: 16px; line-height: 16px; font-size: 16px;"><span style="background-image: url(https://files.mdnice.com/fullstack-3.png); display: inline-block; width: 16px; height: 16px; background-size: 100%; background-position: left bottom; background-repeat: no-repeat; width: 16px; height: 15px; line-height: 15px; margin-right: 6px; margin-bottom: -2px;"></span>③、AQS提供的 setHeadAndPropagate( ) 方法：</span><span class="suffix" style="display: none;"></span></h4><pre class="custom" data-tool="mdnice编辑器" style="margin-top: 10px; margin-bottom: 10px; border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="display: block; background: url(https://files.mdnice.com/point.png); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #fafafa; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;"></span><code class="hljs" style="overflow-x: auto; padding: 16px; color: #383a42; display: -webkit-box; font-family: Operator Mono, Consolas, Monaco, Menlo, monospace; font-size: 12px; -webkit-overflow-scrolling: touch; letter-spacing: 0px; padding-top: 15px; background: #fafafa; border-radius: 5px;">&nbsp;<span class="hljs-function" style="line-height: 26px;"><span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">private</span>&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">void</span>&nbsp;<span class="hljs-title" style="color: #4078f2; line-height: 26px;">setHeadAndPropagate</span><span class="hljs-params" style="line-height: 26px;">(Node&nbsp;node,&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">int</span>&nbsp;propagate)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;h&nbsp;=&nbsp;head;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;设置为队首</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHead(node);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(propagate&nbsp;&gt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>&nbsp;||&nbsp;h&nbsp;==&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;||&nbsp;h.waitStatus&nbsp;&lt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>&nbsp;||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(h&nbsp;=&nbsp;head)&nbsp;==&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;||&nbsp;h.waitStatus&nbsp;&lt;&nbsp;<span class="hljs-number" style="color: #986801; line-height: 26px;">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Node&nbsp;s&nbsp;=&nbsp;node.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;如果s节点是共享模式的，则调用doReleaseShared()方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">if</span>&nbsp;(s&nbsp;==&nbsp;<span class="hljs-keyword" style="color: #a626a4; line-height: 26px;">null</span>&nbsp;||&nbsp;s.isShared())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="color: #a0a1a7; font-style: italic; line-height: 26px;">//&nbsp;唤醒阻塞在同步队列中的线程</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doReleaseShared();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;}<br><br></code></pre><blockquote class="multiquote-1" data-tool="mdnice编辑器" style="display: block; font-size: 0.9em; overflow: auto; overflow-scrolling: touch; padding-top: 10px; padding-bottom: 10px; padding-left: 20px; padding-right: 10px; margin-bottom: 20px; margin-top: 20px; text-size-adjust: 100%; line-height: 1.55em; font-weight: 400; border-radius: 6px; color: #595959; font-style: normal; text-align: left; box-sizing: inherit; border-left: none; border: 1px solid RGBA(64, 184, 250, .4); background: RGBA(64, 184, 250, .1);"><span style="color: RGBA(64, 184, 250, .5); font-size: 34px; line-height: 1; font-weight: 700;">❝</span><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">-- END --</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">本文解析 CountDownLatch 源码已经写完了，如果大家在看的时候，有些地方没看明白的话，请务必先将这篇文章 <a href="https://blog.csdn.net/feichitianxia/article/details/106459784" target="_blank" rel="noopener" style="text-decoration: none; word-wrap: break-word; color: #40B8FA; font-weight: normal; border-bottom: 1px solid #3BAAFA;">《AQS之ReentrantLock源码解析》</a> 阅读下；</p><p style="padding-top: 8px; padding-bottom: 8px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px; margin: 0px; line-height: 26px; color: #595959;">这篇文章中简单讲解了 AQS的原理，并且着重讲解了独占模式（排它锁）的 ReentrantLock，可以先将这篇文章阅读下，再来看 CountDownLatch 就会感觉简单些，逻辑也更加清晰些。</p><span style="float: right; color: RGBA(64, 184, 250, .5);">❞</span></blockquote><h2 data-tool="mdnice编辑器" style="margin-top: 30px; margin-bottom: 15px; padding: 0px; font-weight: bold; color: black; font-size: 22px; display: block; border-bottom: 4px solid #40B8FA;"><span class="prefix" style="display: flex; width: 20px; height: 20px; background-size: 20px 20px; background-image: url(https://files.mdnice.com/fullstack-1.png); margin-bottom: -22px;"></span><span class="content" style="display: flex; color: #40B8FA; font-size: 20px; margin-left: 25px;"><font color="red">❤</font> 点赞 + 评论 + 转发 哟</span><span class="suffix" style="display: flex; box-sizing: border-box; width: 200px; height: 10px; border-top-left-radius: 20px; background: RGBA(64, 184, 250, .5); color: rgb(255, 255, 255); font-size: 16px; letter-spacing: 0.544px; justify-content: flex-end; float: right; margin-top: -10px; box-sizing: border-box !important; overflow-wrap: break-word !important;"></span></h2><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">如果本文对您有帮助的话，请挥动下您爱发财的小手点下赞呀，您的支持就是我不断创作的动力，谢谢！</p><p data-tool="mdnice编辑器" style="padding-top: 8px; padding-bottom: 8px; line-height: 26px; color: #2b2b2b; margin: 10px 0px; letter-spacing: 2px; font-size: 14px; word-spacing: 2px;">您可以微信搜索【木子雷】公众号，大量Java学习干货文章，您可以来瞧一瞧哟！</p><figure data-tool="mdnice编辑器" style="margin: 0; margin-top: 10px; margin-bottom: 10px; display: flex; flex-direction: column; justify-content: center; align-items: center;"><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20201127105439.png" alt style="max-width: 100%; border-radius: 6px; display: block; margin: 20px auto; object-fit: contain; box-shadow: 2px 4px 7px #999;"></figure></section>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS队列同步器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表反转？面试官你确定要问这个吗？</title>
      <link href="/2020/05/30/Single_linked_list_inversion/"/>
      <url>/2020/05/30/Single_linked_list_inversion/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>单链表是一种常见、重要的数据结构，并且随着时间飞逝，也衍生出了诸多针对单链表的操作算法，例如，今天本文中即将会聊到的<font color=red><strong>单链表的反转操作</strong> </font>。</p><p>下面会结合一些图片详细讲解下单链表的数据结构，以及通过三种方式（递归、双指针法、循环遍历）进行单链表的反转。</p></blockquote><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530152024.gif" style="zoom:50%;" /><h2 id="数据结构："><a href="#数据结构：" class="headerlink" title="数据结构："></a>数据结构：</h2><h4 id="1、单链表的数据结构："><a href="#1、单链表的数据结构：" class="headerlink" title="1、单链表的数据结构："></a>1、单链表的数据结构：</h4><blockquote><p>单链表是一种线性结构，它是由一个个<font color=red><strong>节点（Node）</strong>组成的</font>。并且每个节点（Node）是由一块<font color=red><strong>数据域（data）</strong></font>和一块<font color=red><strong>指针域（next）</strong></font>组成的。 &nbsp;&nbsp;&nbsp;&nbsp; </p></blockquote><p>①、节点（Node）结构图如下：</p><blockquote><ol><li><strong>节点的数据域</strong>：data数据域一般就是用来存放数据的 。（注：data域需要指定类型，只能存放指定类型的数据，不能什么东西都放，是不是呀； 那代码中是怎么实现的呢？ 使用 <strong>泛型</strong>  。）</li><li><strong>节点的指针域</strong>：next指针域一般就是存放的指向下一个节点的指针；这个指针其实是一个内存地址，因为Node节点对象是存放在JVM中的堆内存中，所以节点的next指针域中存放就是下一个节点在堆内存中的地址；而在代码中对象的内存地址是赋值给其引用变量了，所以<strong>指针域中存放的是下一个节点对象的引用变量</strong>。</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530154558.png" alt=""></p><p>②、单链表结构图如下：（<strong>下图是由三个节点构成的单链表</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530154552.png" alt=""></p><blockquote><p>若有所思，en en en . . .  . . .   好像单链表的知识在脑海中清晰了些呀；那要不我们快马加鞭，赶紧把单链表的数据结构代码弄出来，然后再思索下怎么进行反转， en en en. . . .. . .     嘿嘿！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530161055.gif" alt=""></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><h4 id="1、Node节点类："><a href="#1、Node节点类：" class="headerlink" title="1、Node节点类："></a>1、Node节点类：</h4><blockquote><p>创建Node节点类，节点类中并且额外提供了两个方法（单链表的创建方法、单链表的遍历放歌）；</p><p>注意：单链表的创建方法 createLinkedList( )：Node节点的插入方式为 <font color=red><strong>尾插法</strong></font> ， 其实还有 <strong>头插法</strong> 方式；</p><p>扩展：链表中节点的插入方式还在 <strong>HashMap</strong> 中使用到了，<strong>在 JDK 1.7 时是头插法，JDK 1.8时是尾插法</strong>；</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PACKAGE</span>_NAME: com.lyl.linklist</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Node  节点类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  单链表的组成元素：Node节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-05-30 16:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 节点的数据域</span></span><br><span class="line">    <span class="keyword">public</span> T data;</span><br><span class="line">    <span class="comment">// 节点的指针域</span></span><br><span class="line">    <span class="keyword">public</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据域值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 单链表 （尾插法）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">createLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 头节点</span></span><br><span class="line">        Node&lt;String&gt; head;</span><br><span class="line"></span><br><span class="line">        Node&lt;String&gt; n = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"111"</span>);</span><br><span class="line">        Node&lt;String&gt; n1 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"222"</span>);</span><br><span class="line">        Node&lt;String&gt; n2 = <span class="keyword">new</span> Node&lt;String&gt;(<span class="string">"333"</span>);</span><br><span class="line">        <span class="comment">// 指定头节点</span></span><br><span class="line">        head = n;</span><br><span class="line">        n.next = n1;</span><br><span class="line">        n1.next = n2;</span><br><span class="line">        <span class="comment">// 返回头结点</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">traverse</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(node.data + <span class="string">" --&gt; "</span>);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">"null"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、单链表反转："><a href="#2、单链表反转：" class="headerlink" title="2、单链表反转："></a>2、单链表反转：</h4><h5 id="①、递归实现反转："><a href="#①、递归实现反转：" class="headerlink" title="①、递归实现反转："></a>①、递归实现反转：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PACKAGE</span>_NAME: com.lyl.linklist</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReverseByRecursiveTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 使用递归实现单链表反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-05-30 17:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseByRecursiveTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 递归 实现单链表反转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head  链表的 头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回反转后的 head 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取头结点的下个节点，使用temp临时节点存储</span></span><br><span class="line">        Node temp = head.next;</span><br><span class="line">        <span class="comment">// 递归调用</span></span><br><span class="line">        Node node = reverse(head.next);</span><br><span class="line">        <span class="comment">// 将头节点的下一个节点的指针域指向头节点</span></span><br><span class="line">        temp.next = head;</span><br><span class="line">        <span class="comment">// 将头节点的指针域置为null</span></span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建单链表</span></span><br><span class="line">        Node head = Node.createLinkedList();</span><br><span class="line">        <span class="comment">// 遍历新创建的单链表</span></span><br><span class="line">        System.out.print(<span class="string">"新创建的单链表： "</span>);</span><br><span class="line">        Node.traverse(head);</span><br><span class="line">        <span class="comment">// 递归反转单链表</span></span><br><span class="line">        Node newHead = reverse(head);</span><br><span class="line">        <span class="comment">// 遍历反转后的单链表</span></span><br><span class="line">        System.out.print(<span class="string">"反转后的单链表： "</span>);</span><br><span class="line">        Node.traverse(newHead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行输出：</p><p>新创建的单链表： 111 –&gt; 222 –&gt; 333 –&gt; null<br>反转后的单链表： 333 –&gt; 222 –&gt; 111 –&gt; null</p></blockquote><p><strong>图解递归方法的调用过程：</strong></p><p>（1）、首先将头结点（data域为 111 节点）传入 reverse( ) 方法中，并将方法压入栈：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530185130.png" alt=""></p><p>（2）、当执行到  <strong>Node node = reverse(head.next);</strong>   将 data域为 222 的节点传入 reverse( ) 方法中，并将方法压入栈：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530185125.png" alt=""></p><p>（3）、当执行到  <strong>Node node = reverse(head.next);</strong>   将 data域为 333 的节点传入 reverse( ) 方法中，并将方法压入栈； 然后当执行到 <strong>if</strong> 判断时，发现 data 域为 333 的节点的 next 指针域指向的下一个节点为 null，此时方法返回当前head头结点（data域为 333 的节点）：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530184205.png" alt=""></p><p>（4）、当 <strong>reverse(333) ;</strong> 方法出栈时，此时会继续执行 <strong>reverse(222) ;</strong>   继续执行递归调用后面的代码，并且执行完后， *<em>reverse(222) *</em> 方法出栈：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530184211.png" alt=""></p><p>（5）、当 <strong>reverse(222) ;</strong> 方法出栈时，此时会继续执行 <strong>reverse(111) ;</strong>   继续执行递归调用后面的代码，并且执行完后， *<em>reverse(111) *</em> 方法出栈：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530184216.png" alt=""></p><p>（6）、当<strong>reverse(111) ** 方法出栈了，那么</strong>此时递归调用结束**， 最终堆中的单链表的结构如图：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530184221.png" alt=""></p><blockquote><p>递归调用终于写完了，这个图太费劲了，花费了太多时间了；画图所使的工具是：<strong>ProcessOn</strong> 。</p></blockquote><h5 id="②、循环遍历-辅助空间-实现反转："><a href="#②、循环遍历-辅助空间-实现反转：" class="headerlink" title="②、循环遍历+辅助空间 实现反转："></a>②、循环遍历+辅助空间 实现反转：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PACKAGE</span>_NAME: com.lyl.linklist</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReverseByTraverseTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  使用 循环遍历+辅助空间 进行单链表反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-05-30 19:11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseByTraverseTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 遍历+辅助空间 进行链表反转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回反转后的 head 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// list集合 辅助空间</span></span><br><span class="line">        List&lt;Node&gt; list = <span class="keyword">new</span> ArrayList&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = list.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            Node n = list.get(i);</span><br><span class="line">            Node n1 = list.get(i-<span class="number">1</span>);</span><br><span class="line">            n.next = n1;</span><br><span class="line">            n1.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回头结点</span></span><br><span class="line">        <span class="keyword">return</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建单链表</span></span><br><span class="line">        Node head = Node.createLinkedList();</span><br><span class="line">        <span class="comment">// 遍历新创建的单链表</span></span><br><span class="line">        System.out.print(<span class="string">"新创建的单链表： "</span>);</span><br><span class="line">        Node.traverse(head);</span><br><span class="line">        <span class="comment">// 递归反转单链表</span></span><br><span class="line">        Node newHead = reverse(head);</span><br><span class="line">        <span class="comment">// 遍历反转后的单链表</span></span><br><span class="line">        System.out.print(<span class="string">"反转后的单链表： "</span>);</span><br><span class="line">        Node.traverse(newHead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③、双指针-辅助临时节点-实现反转："><a href="#③、双指针-辅助临时节点-实现反转：" class="headerlink" title="③、双指针+辅助临时节点  实现反转："></a>③、双指针+辅助临时节点  实现反转：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PACKAGE</span>_NAME: com.lyl.linklist</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ReverseByDoublePointerTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  使用 双指针+辅助临时节点 实现单链表反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020-05-30 19:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseByDoublePointerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 双指针+辅助临时节点 进行链表反转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回反转后的 head 头结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">reverse</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前节点指针</span></span><br><span class="line">        Node current ;</span><br><span class="line">        <span class="comment">// 前一节点指针</span></span><br><span class="line">        Node previous;</span><br><span class="line">        <span class="comment">// 当前节点指针初始化指向头结点</span></span><br><span class="line">        current = head;</span><br><span class="line">        <span class="comment">// 前一节点指针初始化为 null</span></span><br><span class="line">        previous = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(current != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 辅助的临时节点, 存储当前节点的下一个节点</span></span><br><span class="line">            Node temp = current.next;</span><br><span class="line">            <span class="comment">// 当前节点的下一个节点指向了前一个节点指针指向的节点</span></span><br><span class="line">            current.next = previous;</span><br><span class="line">            <span class="comment">// 然后 前一节点指针向前移动一个节点，此时和当前节点指针都指向了当前节点</span></span><br><span class="line">            previous = current;</span><br><span class="line">            <span class="comment">// 当前节点指针也向前移动一个节点，也就是移动到了当前节点的下一个节点，就是临时节点指向的节点</span></span><br><span class="line">            current = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回头结点</span></span><br><span class="line">        <span class="keyword">return</span> previous;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建单链表</span></span><br><span class="line">        Node head = Node.createLinkedList();</span><br><span class="line">        <span class="comment">// 遍历新创建的单链表</span></span><br><span class="line">        System.out.print(<span class="string">"新创建的单链表： "</span>);</span><br><span class="line">        Node.traverse(head);</span><br><span class="line">        <span class="comment">// 递归反转单链表</span></span><br><span class="line">        Node newHead = reverse(head);</span><br><span class="line">        <span class="comment">// 遍历反转后的单链表</span></span><br><span class="line">        System.out.print(<span class="string">"反转后的单链表： "</span>);</span><br><span class="line">        Node.traverse(newHead);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530192854.gif" alt=""></p><blockquote><p>end，终于写完，本文中着重讲解了下 递归 的调用过程，因为递归一般是不太好理解的 。</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><font color=red>❤</font>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>AQS之ReentrantLock源码解析</title>
      <link href="/2020/05/24/AQS_ReentLock_source_code_analysis/"/>
      <url>/2020/05/24/AQS_ReentLock_source_code_analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Java中的同步类<strong>ReentrantLock</strong>是基于AbstractQueuedSynchronizer（简称为<strong>AQS</strong>）实现的。</p><p>今天从源码来了解下<strong>ReentrantLock</strong>中非公平锁的加锁和释放锁（<strong>ReentrantLock</strong>中支持公平锁和非公平锁，默认是非公平锁的，但可以通过创建<strong>ReentrantLock</strong>对象时传入参数指定使用公平锁）。</p><p>在了解<strong>ReentrantLock</strong>前，需要对<strong>AQS</strong>有一定的了解，否则在学习时会比较困难的，并且在通过源码学习<strong>ReentrantLock</strong>时也会穿插着讲解<strong>AQS</strong>内容。</p></blockquote><h2 id="AQS扫荡："><a href="#AQS扫荡：" class="headerlink" title="AQS扫荡："></a>AQS扫荡：</h2><h4 id="1-0、AQS中state变量"><a href="#1-0、AQS中state变量" class="headerlink" title="1.0、AQS中state变量"></a>1.0、AQS中state变量</h4><p>​        AQS中提供了一个int类型的<strong>state</strong>变量，并且<strong>state</strong>变量被<strong>volatile</strong>修饰，表示<strong>state</strong>变量的<strong>读写操作</strong>可以保证原子性；并且AQS还提供了针对<strong>state</strong>变量的读写方法，以及使用CAS算法更新<strong>state</strong>变量的方法。<font size="3" color="red"> AQS使用<strong>state</strong>变量这个状态变量来实现同步状态。</font></p><p><strong>①、源码展示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The synchronization state. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get 获取state变量值 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * set 更新state变量值 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newState  新的状态变量值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">    state = newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用CAS算法更新state变量值; 当从共享内存中读取出的state变量值与expect期望值一致的话，</span></span><br><span class="line"><span class="comment"> * 就将其更新为update值。使用CAS算法保证其操作的原子性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expect  期望值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> update  更新值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用Unsafe类的本地方法来实现CAS</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-1、state同步状态的竞争"><a href="#1-1、state同步状态的竞争" class="headerlink" title="1.1、state同步状态的竞争"></a>1.1、state同步状态的竞争</h4><p>​        多个线程同时竞争AQS的<strong>state同步状态</strong>，在同一时刻只能有一个线程获取到同步状态（获取到锁），那其它没获取到锁的线程该怎么办呢<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085104.gif" alt=""></p><blockquote><p>它们会进去到一个同步队列中，在队列中等待同步锁的释放；</p><p>这个同步队列是一个<font size="3" color="red"><strong>基于链表的双向队列</strong></font> ,  基于链表的话，就会存在<strong>Node节点</strong>，那么AQS中节点是怎么实现的呢<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085104.gif" alt=""></p></blockquote><p><strong>①、Node节点：</strong></p><p>AQS中自己实现了一个内部Node节点类，Node节点类中定义了一些属性，下面来简单说说属性的意思：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 标志在同步队列中Node节点的模式，共享模式 </span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="comment">// 标志在同步队列中Node节点的模式，独占（排他）模式 </span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// waitStatus值为1时表示该线程节点已释放（超时等），已取消的节点不会再阻塞。 </span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// waitStatus值为-1时表示当此节点的前驱结点释放锁时，然后当前节点中的线程就可以去获取锁运行 </span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL    = -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus为-2时，表示该线程在condition队列中阻塞（Condition有使用），</span></span><br><span class="line"><span class="comment">         * 当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从</span></span><br><span class="line"><span class="comment">         * 等待队列转移到同步队列中，等待获取同步锁。</span></span><br><span class="line"><span class="comment">         */</span> </span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus为-3时，与共享模式有关，在共享模式下，该状态表示可运行</span></span><br><span class="line"><span class="comment">         * （CountDownLatch中有使用）。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * waitStatus：等待状态，指的是当前Node节点中存放的线程的等待状态，</span></span><br><span class="line"><span class="comment">         * 等待状态值就是上面的四个状态值：CANCELLED、SIGNAL、CONDITION、PROPAGATE</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 因为同步队列是双向队列，那么每个节点都会有指向前一个节点的 prev 指针</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 因为同步队列是双向队列，那么每个节点也都会有指向后一个节点的 next 指针</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Node节点中存放的阻塞的线程引用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 当前节点与其next后继结点的所属模式，是SHARED共享模式，还是EXCLUSIVE独占模式，</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 注：比如说当前节点A是共享的，那么它的这个字段是shared，也就是说在这个等待队列中，</span></span><br><span class="line"><span class="comment">         * A节点的后继节点也是shared。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node nextWaiter;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取当前节点是否为共享模式</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取当前节点的 prev前驱结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">            Node p = prev;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node() &#123; &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在后面的addWaiter方法会使用到，线程竞争state同步锁失败时，会创建Node节点存放thread</span></span><br><span class="line">        Node(Thread thread, Node mode) &#123;     </span><br><span class="line">            <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123; <span class="comment">// Used by Condition</span></span><br><span class="line">            <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>②、同步队列结构图（双向队列）：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524090454.png" alt=""></p><h4 id="1-2、图解AQS原理"><a href="#1-2、图解AQS原理" class="headerlink" title="1.2、图解AQS原理"></a>1.2、图解AQS原理</h4><p>​       通过前面两点，可以了解到AQS的原理到底是什么了，总结为一句话：<font size="3" color="red">AQS使用一个Volatile的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作，通过CAS完成对State值的修改。</font></p><p> 然后再来一张图，使得理解更加深刻：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524160423.png" alt=""></p><p> 图片来源： <a href="https://www.jianshu.com/p/da9d051dcc3d" target="_blank" rel="noopener">Java技术之AQS详解</a></p><blockquote><p>好了，<strong>AQS</strong>暂时可以先了解到这里了，知道这些后，在后面了解<strong>ReentrantLock</strong>时就会变的容易些，并且后面通过源码学习<strong>ReentrantLock</strong>时，由于会使用到AQS的模版方法，所以也会讲解到AQS的内容。</p></blockquote><h2 id="剑指ReentrantLock源码："><a href="#剑指ReentrantLock源码：" class="headerlink" title="剑指ReentrantLock源码："></a>剑指<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524094904.gif" alt="">ReentrantLock源码：</h2><h4 id="2-0、ReentrantLock-vs-Synchronized"><a href="#2-0、ReentrantLock-vs-Synchronized" class="headerlink" title="2.0、ReentrantLock  vs  Synchronized"></a>2.0、ReentrantLock <font size="6" color="red"> vs </font> Synchronized</h4><p>​       在了解<strong>ReentrantLock</strong>之前，先将<strong>ReentrantLock</strong>与<strong>Synchronized</strong>进行比较下，这样可以更加了解<strong>ReentrantLock</strong>的特性，也有助于下面源码的阅读；</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524122513.png" alt=""></p><h4 id="2-1、ReentrantLock的公平锁与非公平锁"><a href="#2-1、ReentrantLock的公平锁与非公平锁" class="headerlink" title="2.1、ReentrantLock的公平锁与非公平锁"></a>2.1、ReentrantLock的公平锁与非公平锁</h4><p>创建一个<strong>ReentrantLock</strong>对象，在创建对象时，如果不指定公平锁的话，默认是非公平锁；</p><p><strong>①、简单了解下什么是公平锁，什么是非公平锁？</strong></p><blockquote><p>公平锁：按照申请同步锁的顺序来获取锁；</p><p>非公平锁：不会按照申请锁的顺序获取锁，存在锁的抢占；</p><p><font size="3" color="red">注：后面会通过源码了解下非公平锁和公平锁是怎样获取锁的。</font></p></blockquote><p><strong>②、源码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认是非公平的锁</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 构造方法默认创建了一个 NonfairSync 非公平锁对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// NonfairSync继承了Sync类，Sync类又继承了AQS类</span></span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入参数 true，指定为公平锁</span></span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 传入参数的构造方法，当fair为true时，创建一个公平锁对象，否则创建一个非公平锁对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、通过源码看下非公平锁的加锁机制：（独占模式）"><a href="#2-2、通过源码看下非公平锁的加锁机制：（独占模式）" class="headerlink" title="2.2、通过源码看下非公平锁的加锁机制：（独占模式）"></a>2.2、通过源码看下<strong>非公平锁</strong>的加锁机制：（独占模式）</h4><p>①、开始先通过一个简单流程图来看下独占模式下加锁的流程：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524152416.png" alt=""></p><p>​          图片来源：<a href="https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html" target="_blank" rel="noopener">美团技术团队</a></p><p>②、源码分析：加锁时首先使用CAS算法尝试将state状态变量设置为1，设置成功后，表示当前线程获取到了锁，然后将独占锁的拥有者设置为当前线程；如果CAS设置不成功，则进入Acquire方法进行后续处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用CAS算法尝试将state状态变量设置为1</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 设置成功后，表示当前线程获取到了锁，然后将独占锁的拥有者设置为当前线程</span></span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 进行后续处理，会涉及到重入性、创建Node节点加入到队列尾等</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③、探究下<strong>acquire(1)</strong> 方法里面是什么呢<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085104.gif" alt="">   acquire(1) 方法是AQS提供的   <strong>模版方法</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用tryAcquire()方法，让当前线程尝试获取同步锁，获取成的话，就不会执行后面的acquireQueued()</span></span><br><span class="line"><span class="comment">     * 方法了，这是由于 &amp;&amp; 逻辑运算符的特性决定的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果使用tryAcquire()方法获取同步锁失败的话，就会继续执行acquireQueued（）方法，它的作用是</span></span><br><span class="line"><span class="comment">     * 一直死循环遍历同步队列，直到使addWaiter()方法创建的节点中线程获取到锁。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果acquireQueued()返回的true，这个true不是代表成功的获取到锁，而是代表当前线程是否存在</span></span><br><span class="line"><span class="comment">     * 中断标志，如果存在的话，在获取到同步锁后，需要使用selfInterrupt()对当前线程进行中断。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1）</strong>、<strong>tryAcquire(arg)</strong> 方法源码解读：NonfairSync 非公平锁中重写了AQS的tryAcquire()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前线程</span></span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取当前state同步状态变量值，由于使用volatile修饰，单独的读写操作具有原子性</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="comment">// 如果状态值为0</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用compareAndSetState方法这个CAS算法尝试将state同步状态变量设置为1 获取同步锁</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            <span class="comment">// 然后将独占锁的拥有者设置为当前线程</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果拥有独占锁的的线程是当前线程的话,表示当前线程需要重复获取锁（重入锁）</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// 当前同步状态state变量值加1</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        <span class="comment">// 写入state同步状态变量值，由于使用volatile修饰，单独的读写操作具有原子性</span></span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）</strong>、<strong>addWaiter( Node.EXCLUSIVE )</strong> ：创建一个同步队列Node节点，同时绑定节点的模式为独占模式，并且将创建的节点插入到同步队列尾部；addWaiter( ) 方法是AQS提供方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// model参数是独占模式，默认为null；</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// 将当前同步队列的tail尾节点的地址引用赋值给pre变量</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">// 如果pre不为null，说明同步队列中存在节点</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前节点的前驱结点指向pre尾节点</span></span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// 使用CAS算法将当前节点设置为尾节点，使用CAS保证其原子性</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            <span class="comment">// 尾节点设置成功，将pre旧尾节点的后继结点指向新尾节点node</span></span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果尾节点为null，表示同步队列中还没有节点，enq（）方法将当前node节点插入到队列中</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3）</strong>、说完addWaiter( Node.EXCLUSIVE )方法，接下来说下<strong>acquireQueued（）</strong>方法，它是怎样使addWaiter()创建的节点中的线程获取到state同步锁的。（这个方法也是AQS提供的）  <img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085622.gif" alt="">    </p><p><strong>源码走起：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标志cancelAcquire()方法是否执行</span></span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 标志是否中断，默认为false不中断</span></span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取当前节点的前驱结点</span></span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果当前节点的前驱结点已经是同步队列的头结点了，说明了两点内容：</span></span><br><span class="line"><span class="comment">             * 1、其前驱结点已经获取到了同步锁了,并且锁还没释放</span></span><br><span class="line"><span class="comment">             * 2、其前驱结点已经获取到了同步锁了，但是锁已经释放了</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 然后使用tryAcquire()方法去尝试获取同步锁，如果前驱结点已经释放了锁，那么就会获取成功，</span></span><br><span class="line"><span class="comment">             * 否则同步锁获取失败，继续循环</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                <span class="comment">// 将当前节点设置为同步队列的head头结点</span></span><br><span class="line">                setHead(node);</span><br><span class="line">                <span class="comment">// 然后将当前节点的前驱结点的后继结点置为null，帮助进行垃圾回收</span></span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 返回中断的标志</span></span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * shouldParkAfterFailedAcquire()是对当前节点的前驱结点的状态进行判断，以及去针对各种</span></span><br><span class="line"><span class="comment">             * 状态做出相应处理，由于文章篇幅问题，具体源码本文不做讲解；只需知道如果前驱结点p的状态为</span></span><br><span class="line"><span class="comment">             * SIGNAL的话，就返回true。</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * parkAndCheckInterrupt()方法会使当前线程进去waiting状态，并且查看当前线程是否被中断，</span></span><br><span class="line"><span class="comment">             * interrupted() 同时会将中断标志清除。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">// 中断标志置为true</span></span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果for(;;)循环中出现异常，并且failed=false没有执行的话,cancelAcquire方法</span></span><br><span class="line"><span class="comment">             * 就会将当前线程的状态置为 node.CANCELLED 已取消状态，并且将当前节点node移出</span></span><br><span class="line"><span class="comment">             * 同步队列。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4）</strong>、最后说下 <strong>selfInterrupt()</strong> 方法， 这个方法就是将当前线程进行中断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selfInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 中断当前线程</span></span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、公平锁与非公平锁在加锁时的区别："><a href="#2-3、公平锁与非公平锁在加锁时的区别：" class="headerlink" title="2.3、公平锁与非公平锁在加锁时的区别："></a>2.3、公平锁与非公平锁在加锁时的区别：</h4><p>①、公平锁 <strong>FairSync</strong> 的加锁 <strong>lock()</strong> 加锁方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、非公平锁 <strong>NonfairSync</strong> 的加锁 <strong>lock()</strong> 加锁方法：上面讲解源码的时候有提到哟，还有印象吗，没印象的话也没关系，不要哭<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085618.gif" alt="">  ，  嘿嘿，我都准备好了<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085118.gif" alt="">。  源码奉上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 看到这，是不是发现了什么，非公平锁在此处直观看的话，发现比公平锁多了这几行代码; </span></span><br><span class="line"><span class="comment">     * 这里就是使得线程存在了一个抢占，如果当前同步队列中的head头结点中 线程A 刚好释放了同步锁，</span></span><br><span class="line"><span class="comment">     * 然后此时 线程B 正好来了，那么此时线程B就会获取到锁，而此时同步队列中head头结点的后继结点中的</span></span><br><span class="line"><span class="comment">     * 线程C 就无法获取到同步锁，只能等待线程B释放锁后，尝试获取锁了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③、除了上面那处不同之外，还有别的地方吗；别急，再看看 <strong>acquire(1)</strong>  方法是否一样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        诶呀，方法点进去都是一样的呀，可不嘛，都是调用的AQS提供的 <strong>acquire(1)</strong>  方法；但是别着急，上面在讲解非公平锁加锁时，有提到的 <strong>tryAcquire(arg)</strong> 方法在AQS的不同子孙类中都有各自的实现的。现在打开公平锁的 <strong>tryAcquire(arg)</strong>  方法看看其源码与非公平锁有什么区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过对比源码发现，公平锁比非公平锁多了这块代码： !hasQueuedPredecessors() </span></span><br><span class="line"><span class="comment">         * hasQueuedPredecessors() 是做什么呢？就是判断当前同步队列中是否存在节点，如果存在节点呢，</span></span><br><span class="line"><span class="comment">         * 就返回true，由于前面有个 ！，那么就是false，再根据 &amp;&amp; 逻辑运算符的特性，不会继续执行了;</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * tryAcquire()方法直接返回false，后面的逻辑就和非公平锁的一致了，就是创建Node节点，并将</span></span><br><span class="line"><span class="comment">         * 节点加入到同步队列尾; 公平锁：发现当前同步队列中存在节点，有线程在自己前面已经申请可锁，那</span></span><br><span class="line"><span class="comment">         * 自己就得乖乖的向后面排队去。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 友情提示：在生活中，我们也需要按照先来后到去排队，保证素质; 还有就是怕你们不排队被别人打了。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>松口气，从中午一直写到下午快四点了，先让我歇口气，快累成狗了；本文还剩下释放锁部分没写呢，歇口气，喝口水继续<img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200524085639.gif" alt="">。</p><p><font size="3" color="red">注意：ReentrantLock在释放锁的时候，并不区分<strong>公平锁和非公平锁</strong>。</font></p></blockquote><h4 id="2-4、通过源码看下释放锁机制：（独占模式）"><a href="#2-4、通过源码看下释放锁机制：（独占模式）" class="headerlink" title="2.4、通过源码看下释放锁机制：（独占模式）"></a>2.4、通过源码看下释放锁机制：（独占模式）</h4><p>①、<strong>unlock()</strong>  释放锁的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 释放锁时，需要将state同步状态变量值进行减 1，传入参数 1</span></span><br><span class="line">    sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②、<strong>release( int arg )</strong> 方法解析：（此方法是AQS提供的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// tryRelease方法：尝试释放锁，成功true，失败false</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 头结点不为空并且头结点的waitStatus不是初始化节点情况,然后唤醒此阻塞的线程</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="3" color="red">注意：这里的判断条件为什么是h != null &amp;&amp; h.waitStatus != 0？</font></p><blockquote><p>h == null Head还没初始化。初始情况下，head == null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head == null 的情况。</p><p>h != null &amp;&amp; waitStatus == 0  表明后继节点对应的线程仍在运行中，不需要唤醒。</p><p>h != null &amp;&amp; waitStatus  &lt;  0  表明后继节点可能被阻塞了，需要唤醒。</p></blockquote><p>③、然后再来看看<strong>tryRelease(arg)</strong>  方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前state状态值进行减一</span></span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="comment">// 如果当前独占锁的拥有者不是当前线程，则抛出 非法监视器状态 异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新state同步状态值</span></span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④、最后看看<strong>unparkSuccessor(Node node)</strong> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取头结点waitStatus</span></span><br><span class="line"><span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line"><span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 获取当前节点的下一个节点</span></span><br><span class="line">Node s = node.next;</span><br><span class="line"><span class="comment">// 如果下个节点是null或者下个节点被cancelled，就找到队列最开始的非cancelled状态的节点</span></span><br><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">s = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 就从尾部节点开始找，到队首，找到队列第一个waitStatus&lt;0的节点。</span></span><br><span class="line"><span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line"><span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">s = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果当前节点的后继结点不为null，则将其节点中处于阻塞状态的线程unpark唤醒</span></span><br><span class="line"><span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font size="3" color="red">注意：为什么要从后往前找第一个非Cancelled的节点呢？原因如下:</font></p><p>由于之前加锁时的addWaiter( )方法的原因；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// model参数是独占模式，默认为null；</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// 将当前同步队列的tail尾节点的地址引用赋值给pre变量</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">// 如果pre不为null，说明同步队列中存在节点</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前节点的前驱结点指向pre尾节点</span></span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// 使用CAS算法将当前节点设置为尾节点，使用CAS保证其原子性</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            <span class="comment">// 尾节点设置成功，将pre旧尾节点的后继结点指向新尾节点node</span></span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果尾节点为null，表示同步队列中还没有节点，enq（）方法将当前node节点插入到队列中</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以看到，节点入队并不是原子操作，也就是说，<font size="3" color="blue">node.prev = pred ;   compareAndSetTail( pred, node ) </font>这两个地方可以看作Tail入队的原子操作，但是此时  <font size="3" color="red">pred.next =  node; </font> 还没执行，如果这个时候执行了unparkSuccessor方法，就没办法从前往后找了，所以需要从后往前找。还有一点原因，<font size="3" color="red">在产生CANCELLED状态节点的时候，先断开的是Next指针，Prev指针并未断开</font>，因此也是必须要从后往前遍历才能够遍历完全部的Node。</p><blockquote><p>end！ 长吸一口气，终于本文算是写完了，最后再看看有没有错别字，以及排排版。</p><p>后续还会出一篇结合<strong>CountDownLatch</strong>源码学习共享锁（共享模式）的文章。</p></blockquote><table><tbody><tr><td bgcolor="#FF00FF"><font size="5" color="#fffff">谢谢大家阅读，鉴于本人水平有限，如有问题敬请提出。</font></td></tr></tbody></table><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html" target="_blank" rel="noopener">1、从ReentrantLock的实现看AQS的原理及应用</a><br><a href="https://www.jianshu.com/p/da9d051dcc3d" target="_blank" rel="noopener">2、Java技术之AQS详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AQS队列同步器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟实战排查堆内存溢出（java.lang.OutOfMemoryError Java heap space）问题</title>
      <link href="/2020/05/15/simulation_heap_OutOfMemory_screening/"/>
      <url>/2020/05/15/simulation_heap_OutOfMemory_screening/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>模拟实战中排查堆内存溢出（<font color="red"><strong>java.lang.OutOfMemoryError: Java heap space</strong></font >）的问题。<br>堆内存溢出的原因：一般都是创建了大量的对象，这些对象一直被引用着，无法被GC垃圾回收掉，最终导致堆内存被占满，没有足够的空间存放新创建的对象时，就会出现堆内存溢出问题。<br>在实际的业务场景中出现内存溢出的问题，排查起来一般是十分困难繁琐的，本文将通过结合一个简单的实例来阐述排查的具体思路和步骤。</p></blockquote><h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><blockquote><p>注意：<font color="red">在实际场景中，一般都是部署在Linux服务器中的项目报出内存溢出的问题；为了尽可能还原出实际场景，本文也是将提前编写好的可以触发内存溢出的代码并打包成可运行的Jar包，然后放到服务器中执行的。</font></p></blockquote><p><strong>1、准备可导致内存溢出的代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个Java类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutOfMemory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String test;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutOfMemory</span><span class="params">(String test)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.test = test;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟内存溢出的发生</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOOM</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;OutOfMemory&gt; list = <span class="keyword">new</span> ArrayList&lt;OutOfMemory&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 无限创建OutOfMemory对象，直至将堆空间占满，并且创建的OutOfMemory对象一直被list集合对象引用着，</span></span><br><span class="line"><span class="comment">         * 导致GC也无法回收，最终出现堆内存溢出问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list.add(<span class="keyword">new</span> OutOfMemory(<span class="string">"5656"</span>));</span><br><span class="line">        System.out.println(<span class="string">"5656"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><tbody><tr><td bgcolor="#FF00FF"><font size="4" color="#fffff">代码编写完成后，使用开发工具导出<B>可运行的Jar包</B>— （TestOOM.jar）</font></td></tr></tbody></table><br><p><strong>2、准备Linux服务器</strong></p><blockquote><p>可以直接使用centos或者Red Hat等都可以；</p></blockquote><h2 id="实战："><a href="#实战：" class="headerlink" title="实战："></a>实战：</h2><p><strong>1、将可运行的Jar包放到服务器中执行：</strong><br>①、可使用xshell、xftp工具将可运行的Jar包（Jar包叫：<font color="red"><strong>TestOOM.jar</strong></font>）放入到服务器中；<br>②、使用命令执行Jar包；命令：<br>       &nbsp;&nbsp; &nbsp; java <font color="red"> -Xms40m -Xmx70m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/tmp</font> -jar TestOOM.jar</p><p>  &nbsp;&nbsp; &nbsp; 注意：为了尽快模拟发生堆内存溢出，所以在启动Jar包时，设置了一些参数；参数解析：<br>  &nbsp;&nbsp; &nbsp; 1）、 -Xms40m   初始堆大小设置为40m<br>  &nbsp;&nbsp; &nbsp; 2）、 -Xmx70m   最大堆大小设置为70m<br>  &nbsp;&nbsp; &nbsp; 3）、 -XX:+HeapDumpOnOutOfMemoryError   出现堆内存溢出时，自动导出堆内存 dump 快照<br>  &nbsp;&nbsp; &nbsp; 4）、 -XX:HeapDumpPath=/usr/tmp   设置导出的堆内存快照的存放地址为 /usr/tmp</p><p><strong>2、执行成功后，使用JVM监控命令监控JVM的信息：</strong><br>①、jps命令：此命令是用来查询与Java相关的进程的，并输出进程号；下图就是展示上面运行的Jar包的进程号：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTExMTMxMC5wbmc?x-oss-process=image/format,png" alt=""><br>②、jmap命令：<font color="red"> jmap -heap 3324 </font>    &nbsp;此命令是查询出进程号为 3324 的JVM中堆内存信息；如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTExMTMyMy5wbmc?x-oss-process=image/format,png" alt=""></p><blockquote><p>在图中可以发现堆内存中新生代、年老代中 free 可用空间越来越小，这预示着即将会发生GC垃圾回收，从而使堆腾出更多的空间存放新创建的对象。</p></blockquote><p>③、jstat命令：使用其监控JVM的性能信息；例如：在本次排查内存溢出的问题中，会使用 jstat 命令监控 JVM的 GC垃圾回收的情况；<br>&nbsp;&nbsp; 命令：<font color="red"> jstat -gcutil 3324 1000 </font>  &nbsp;  意思是每1000毫秒查询一次进程号为3324 的JVM的GC垃圾回收的情况；如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTExMTMxOC5wbmc?x-oss-process=image/format,png" alt=""></p><blockquote><p>（1）、 YGC(堆中新生代GC)、FGC( FULL GC)为什么触发频率这么快呢？<br>答：由于堆内存空间不够用了，需要通过GC垃圾回收将一些空间进行回收，用于存放新创建的对象。</p></blockquote><blockquote><p>（ 2）、当堆内存空间不够用时，GC具体会发生什么呢？<br>答：<br>【1】、当堆中的新生代空间不够用时，会触发YGC（又称之为 Minor GC），对堆中新生代空间进行垃圾回收后，在剩余存活<br>的对象中，如果有对象的 <font color=blue> <strong>“晋升年龄达“ 到 “晋升年龄阈值” 后</strong>  </font>  ，就会将其移动到堆中老年代存储，所以每次YGC后，堆中年老代中存储的对象数量可能会增大；<br><font color=red> <strong>注意：晋升年龄：指新生代中的对象每经历一次 YGC，晋升年龄加1；</strong> </font><br><font color=red> <strong>注意：晋升年龄阈值：在Serial和ParNew GC两种回收器中，“晋升年龄阈值” 可通过参数MaxTenuringThreshold设定，默认值为15。</strong> </font><br>上面的 “晋升年龄” 来自： <a href="https://tech.meituan.com/2017/12/29/jvm-optimize.html" target="_blank" rel="noopener">从实际案例聊聊Java应用的GC优化</a></p><p>【2】、当堆的新生代即将发生YGC时，如果发现新生代中存活下来的对象中达到“晋升年龄阈值”的对象所占用的空间比堆中年老代中剩余的可用空间大的话，就会直接不进行YGC，而会直接触发FGC，FULL GC会对整个堆空间（新生代、老年代）以及方法区/永久代进行垃圾回收。<br><font color=red> <strong>注意：FULL GC 主要可以分为两步，先是对 堆中老年代进行垃圾回收（又称之为Major GC），然后再对 堆中新生代进行垃圾回收（YGC）。</strong> </font></p></blockquote><table><tbody><tr><td bgcolor="#FF00FF"><font size="4" color="#fffff">扩展：堆的结构图</font></td></tr></tbody></table><div align=center><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTExMTQwNS5wbmc?x-oss-process=image/format,png" alt=""></div></p><p><strong>3、出现内存溢出后，会自动生成快照，然后分析堆内存快照：</strong></p><p>①、使用XFTP等工具将服务器中的快照文件导出，堆内存快照文件是以<font color="red"> hprof </font>为后缀的文件；导出快照文件后，可以通过JDK自带的<font color="red">  jvisualvm.exe  </font>分析工具打开进行分析。</p><blockquote><p>jvisualvm.exe 是在哪里呢？（以 windows 系统为例）<br>它是在<font color="red">JDK的安装目录中的bin目录下的</font>。</p></blockquote><p>如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTExMTM1NC5wbmc?x-oss-process=image/format,png" alt=""><br>②、使用 jvisualvm.exe 导入快照文件，如图：<br>（1）、<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTE0NDMwMi5wbmc?x-oss-process=image/format,png" alt=""><br>（2）、<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTE0NDMxNi5wbmc?x-oss-process=image/format,png" alt=""><br>（3）、<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUxNTE0NDMzNS5wbmc?x-oss-process=image/format,png" alt="">     </p><blockquote><p>通过分析堆内存快照得到的结论：<br>通过第（3）张图，可以发现堆内存中有一个实例对象的占比为 99.9%，可以确定是由于这个实例对象大量创建导致堆内存的溢出；<br>说到这，可以回过头去看下我们自己编写的可以触发堆内存溢出的小程序，发现正是由于在 <font color="red"> while(true) </font>死循环 中无线创建 OutOfMemory对象，导致堆内存空间被耗尽。</p></blockquote><blockquote><p><b><font color="blue"> 结语：</font></b><br>通过上面的实战小例子，我们可以大体了解到在出现堆内存溢出时的排查步骤，但是在实际的场景中，这种情况可能会更加的复杂多变；<br>比如说，上面的那个小例子在出现的堆内存溢出时自动生成的堆内存快照文件大小就达到了100多m，如果在实际的场景中，这个可能是非常巨大的，这时可能就会发生快照分析工具无法导入堆内存快照。所以说，我们需要在平时通过不断的学习，才能在未来出现问题时，能尽快定位问题并解决问题；程序员不光是能编写好代码，还需要有解决问题的能力。</p></blockquote><br><table><tr><td bgcolor=#FF00FF><font size = 4px>谢谢大家阅读，鉴于本人水平有限，如有问题敬请提出。</font></td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 实战问题排查 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Java实现简单的监控系统</title>
      <link href="/2020/05/05/Java_impl_monitor_system/"/>
      <url>/2020/05/05/Java_impl_monitor_system/</url>
      
        <content type="html"><![CDATA[<p><br><table><tbody><tr><td bgcolor="#FF00FF"><font size="5" color="#fffff">本文只是简单介绍了下监控系统实现的思路，具体还需根据自己需求实现。</font></td></tr></tbody></table><br></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>目前存在一个后台服务系统，此时需要配套一个监控系统，对这个后台服务系统进行监控。下面会涉及到两个系统，后台服务系统（这是已经存在的系统），监控系统（此次需要进行开发的系统）。<font color=red>注意：后面统一将后台服务系统称作服务系统</font>。</p></blockquote><h2 id="具体需求："><a href="#具体需求：" class="headerlink" title="具体需求："></a>具体需求：</h2><p>1、监控服务系统的运行状态，服务系统是否存活，采用模拟数据进行访问接口，如果已down则需要发送告警邮件；</p><p>2、监控服务系统的所有接口是否正常运行，采用模拟数据进行访问接口，如果有问题需要发送告警邮件，邮件内容是模拟访问接口返回的响应；（注：后台服务系统中自定义了相关响应状态码和对应的响应描述）</p><p>3、监控部署了服务系统的服务器的磁盘、CPU、内存的使用情况，会提前设置好使用阀值，如果超过阀值，则要发送告警邮件；</p><p>4、数据采集功能：采集每日服务系统的总访问量、日最大并发量，记录入库，后期做图表展示；</p><p>5、除了上面几个需求外，监控系统还需要具备一些配置页面，用来配置一些监控系统使用的参数：<br>   ①、添加报警邮件配置参数页面，用于配置报警邮件的发送人、收件人等参数；<br>   ②、添加服务器使用阀值的配置参数页面，页面中可以设置服务器（部署后台服务系统的服务器）的磁盘、CPU、内存使用阀值，超过 阀值时需要进行报警；<br>   ③、添加服务器配置页面，这些服务器就是部署了服务系统的机器，它们的ip地址及端口号参数；</p>   <br><blockquote><p>注意：知道了大概的需求后，还要结合服务系统的实际部署方案进行构思具体的开发；<br>   前提：服务系统的部署是以集群（集群：就是将后台服务系统部署在多态服务器中，然后使用Nginx或F5进行请求的转发和负载均衡）的形式进行部署的。</p></blockquote><h2 id="开发构思："><a href="#开发构思：" class="headerlink" title="开发构思："></a>开发构思：</h2><table><tbody><tr><td bgcolor="#03FEED"><font size="5" color="#fffff">定时任务、报警邮件发送所使用工具：</font></td></tr></tbody></table>1、监控系统首先需要实时监控的，所以说会需要定时任务，定时任务使用Quartz来实现。<p>2、发送告警邮件可以使用Hutool这个工具包中的邮件工具类来实现，非常简单方便。</p><table><tbody><tr><td bgcolor="#03FEED"><font size="5" color="#fffff">在服务系统中添加一个filter请求过滤器，这个过滤器主要作用：</font></td></tr></tbody></table>3、服务系统改造：<br>   ①、统计服务系统日总访问量，将每日的日总访问量数据放到redis中，redis存储的key为：当前服务器ip地址+当前日期；每当来一个 请求，就将redis中存储的数据加一；<p>   ②、统计实时的日最大并发访问量也是在该过滤器中，并且将最大并发访问量也是存在redis中，key为：当前服务器ip地址+ “max” + 当前日期；服务系统每来一个请求，就将redis中存储的数据加一，请求处理完成就将redis中存储的数据再减一；</p><table><tbody><tr><td bgcolor="#03FEED"><font size="5" color="#fffff">监控系统中的定时任务：</font></td></tr></tbody></table><p>4、监控系统中的定时任务：<br>   ①、<a href="https://blog.csdn.net/feichitianxia/article/details/104056510" target="_blank" rel="noopener">获取服务器的cpu、内存、磁盘使用情况可以使用shell脚本获取</a>，然后Java操作shell脚本执行并获取到当前服务器的磁盘、CPU、内存的使用率，然后与配置页面中提前配置的使用阀值进行比较，大于阀值的话就需要发送报警邮件。（定时任务，每隔30分钟执行一次）</p><p>   ②、使用定时任务监控后台服务系统是否存活，以及监控所有接口是否正常，根据响应状态码判断出现问题进行报警邮件发送。（定时任务，每隔5分钟执行一次）</p><p>   ③、使用定时任务统计每日最大并发访问量，因为服务系统过滤器中已经统计了服务系统集群中每个节点实时的日最大访问量并存在了redis中，而此时需要一个定时任务将集群的总日最大访问量进行汇总，并存入redis中，此时key为：”max”+当前日期，后面定时任务在每次执行时，都需要先将集群的总日最大并发访问量进行汇总后，与上次 定时任务的统计的日最大并发访问量进行对比，如果比上次统计的大，则将redis中存储的集群总日最大并发访问量更新为当前的；这时操作redis需要至少两步，先读取，然后判断大小，如果大还会去更新，<font color=red>为了保证操作的原子性，需要使用Lua脚本</font>；（定时任务，每隔5秒执行一次，即使这样的话，统计的最大访问量也可能不是准确的，但是也可作为参考）</p><p><font color=red>   <strong>Lua脚本伪代码：</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* lua 脚本：</span></span><br><span class="line"><span class="comment"> * 1、判断key是否存在，key不存在，则新增key-value，value默认为0；</span></span><br><span class="line"><span class="comment"> * 2、如果key存在，则取出value，然后与输入参数进行比较，输入参数大的话就将key的value值更新为输入参数值，否则不进行任何操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String luaScript = <span class="string">"local flag = redis.call('exists',KEYS[1])\n"</span></span><br><span class="line">        + <span class="string">"if (flag == 0) then\n"</span></span><br><span class="line">        +     <span class="string">"redis.call('set', KEYS[1], 1)\n"</span></span><br><span class="line">        + <span class="string">"else \n"</span></span><br><span class="line">        +     <span class="string">"if tonumber(redis.call('get', KEYS[1])) &lt; tonumber(ARGV[1]) then\n"</span></span><br><span class="line">        +         <span class="string">"redis.call('set', KEYS[1], ARGV[1])\n"</span></span><br><span class="line">        +     <span class="string">"end\n"</span></span><br><span class="line">        + <span class="string">"end"</span>;</span><br></pre></td></tr></table></figure><p>   ④、使用定时任务将每台服务器在redis中对应的每日总访问量取出汇总，存入数据库中，以及日最大并发访问量入库。（定时任务，每天的凌晨一分时执行，是统计前一天的总访问量）</p><h2 id="开发构思解析："><a href="#开发构思解析：" class="headerlink" title="开发构思解析："></a>开发构思解析：</h2><p>1、为什么使用redis存放总访问量以及最大访问量呢？因为服务系统是以集群的形式部署的，所以需要统计集群中所有节点的访问量，将其存入redis这种第三方的地方是比较方便的，注意，存在redis中的这些访问量数据需要设置过期时间的，否则redis中数据会导致越来越多，占用内存；</p><p>2、由于使用到了shell脚本获取服务器的磁盘、CPU、内存的使用率，那么集群中的每台服务器都需要存放、运行提前写好的shell脚本，那么也是需要在集群中每台服务器中也要部署    监控系统的；监控系统在部署了集群后，为了保证同一时刻只有一台监控系统运行着定时任务，所以在每个定时任务运行前先设置分布式锁，使用redis设置，设置分布式锁失败的话，就说明集群中有监控系统在执行了，防止定时任务重复执行以及重复数据统计。</p><p>3、在监控系统中配置页面配置的各种参数，是存入在数据库中，集群中所以监控系统连接同一个数据库，当在系统启动时使用监听器从数据库中加载进来的；那么当如果在运行阶段更新了配置参数怎么办呢，因为监控系统是部署的集群，怎么提醒集群中的监控系统去数据库中重新加载新配置数据呢？还是使用redis，key随便，value为时间戳，当集群中的所有监控系统在初始加载配置参数时，会在各自本地设置一个时间戳，redis中也设置了相同的时间戳，当在配置页面修改配置参数时，需要更新时间戳，那么监控系统在使用配置参数时，会对比一个redis中存储的时间戳和本地的时间戳是否一致，不一致说明配置参数更新了，需要到数据库重新加载读取参数。</p><h2 id="开发中遇到的问题："><a href="#开发中遇到的问题：" class="headerlink" title="开发中遇到的问题："></a>开发中遇到的问题：</h2><p>1、<a href="https://blog.csdn.net/feichitianxia/article/details/104071943" target="_blank" rel="noopener">使用Hutool这个工具包中的邮件工具类发送报警邮件出现了一个小问题</a>，邮件配置参数重新去数据库中读取加载了，但是这个工具类使用到的参数还是原来的旧参数，这里是由于工具类中的默认使用的是全局session，所以导致新配置参数不生效；</p><p>2、在多台服务器进行部署服务系统时，监控系统也跟随进行部署多台，那么在数据采集的定时任务由于设置了redis分布式锁，所以不会导致定时任务重复进行采集；但是由于多台服务器的系统时间不一致导致了在每台服务器上部署的监控系统的定时任务会重复执行，就会导致数据库中日最大并发访问量、日总访问量的重复数据产生。即使使用了分布式锁也没有用了。所以在定时任务统计数据入库操作前需要加上校验，校验是否已经存在了这条数据即可。</p><br><table><tbody><tr><td bgcolor="#FF00FF"><font size="5" color="#fffff">谢谢大家阅读，鉴于本人水平有限，如有问题敬请提出。</font></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工作所遇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊Java中的锁，这也是面试时不可避免的 &quot; 锁 &quot; 事！</title>
      <link href="/2020/05/03/chat_java_lock_things/"/>
      <url>/2020/05/03/chat_java_lock_things/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。</p></blockquote><h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDUwMzE2MjEwNS5wbmc?x-oss-process=image/format,png" alt=""></p><table><tbody><tr><td bgcolor="#FFA500"><font size="5" color="#fffff">这些只是简单的概念，具体可以根据源码学习！</font></td></tr></tbody></table><br><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>1、<a href="https://mp.weixin.qq.com/s?__biz=MjM5NjQ5MTI5OA==&mid=2651749434&idx=3&sn=5ffa63ad47fe166f2f1a9f604ed10091&chksm=bd12a5778a652c61509d9e718ab086ff27ad8768586ea9b38c3dcf9e017a8e49bcae3df9bcc8&scene=38#wechat_redirect" target="_blank" rel="noopener"> 美团技术团队 ：【基本功】不可不说的Java“锁”事 </a></p>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经典面试题（一）、静态代码块、静态属性、构造方法的执行顺序</title>
      <link href="/2020/04/16/written_test_topic_static_construction_run_squence/"/>
      <url>/2020/04/16/written_test_topic_static_construction_run_squence/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>在面试时，下面这道题应该经常遇到；那大家看看这道题中运行Test4中main方法后，控制台的输出内容的顺序是什么样的呀？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test3 static start;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test3 gouzao start;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类Test4的静态属性类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"test5 static start;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test5 gouazao start;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> <span class="keyword">extends</span> <span class="title">Test3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Test5 t5 = <span class="keyword">new</span> Test5();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"test4 static start;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//super();</span></span><br><span class="line">        System.out.println(<span class="string">"test4 gouzao start;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// test方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test4 t4 = <span class="keyword">new</span> Test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那我们运行上面子类Test4中的main方法，看看输出内容的顺序是怎样的？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main方法运行结果</span></span><br><span class="line"></span><br><span class="line">test3 <span class="keyword">static</span> start;</span><br><span class="line">test5 <span class="keyword">static</span> start;</span><br><span class="line">test5 gouazao start;</span><br><span class="line">test4 <span class="keyword">static</span> start;</span><br><span class="line">test3 gouzao start;</span><br><span class="line">test4 gouzao start;</span><br></pre></td></tr></table></figure><blockquote><p>大家得出的输出结果与上面的结果一样吗；不一样的话，也别桑心呀，我来带大家去一步步的解析这道题，让大家在面试的时候不在这道题上跌倒。</p></blockquote><h2 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h2><table><tr><td bgcolor=##03FEED><font size = 3px>首先，大家需要知道几个知识点：</font></td></tr></table><font size = 2px>1、static 代码块的执行、static 属性的初始化都是在类加载的时候进行的；<br><br><p>2、<font size = 2px>在 new 对象时，需要先进行类加载，如果当前类有父类的话，先进行父类的类加载，再进行当前类的类加载。</font></p><p>３、<font size = 2px>类中的静态代码框的执行、静态属性初始化的执行是根据在类中书写的顺序来的；例如：<strong>Test4中的 t5 静态属性就是比静态代码框先执行的。</strong>  </font></p><p>４、<font size = 2px>在 new 对象时，在类加载完后，就该执行构造方法了，如果当前类有父类的话，就需要先执行父类的构造方法。在这里，你需要知道一个在构造方法中使用到 <strong>super();</strong> 方法，它就是进行父类构造方法的调用执行的，但是在无参构造方法中无需自己手动显示调用，JVM会在编译时将其加入进去；</font></p><br><table><tr><td bgcolor=##03FEED><font size = 3px>根据上面的知识点，解析上面的面试题</font></td></tr></table><font size = 2px>1、在 Test4 中执行 main 方法时，首先需要进行 Test4 的类加载；<br><br>2、但是由于 Test4 有父类 Test3 ，所以先进行 Test3 的类加载；<br><br>3、在执行 Test3 的类加载时，会执行静态代码框，输出 <b><font color=red>①" test3 static start; "</font></b><br><br>4、进行完父类的类加载后，执行自己 Test4 的类加载，在进行类加载时，首先执行静态属性 t5 的初始化；<br><br>5、进行 t5 初始化时，是进行的 new 对象，所以需要进行 Test5 的类加载，在进行类加载时，执行静态代码框，输出 <b><font color=red>②" test5 static start; "；</font></b><br><br>6、进行完 Test5 的类加载后，就是执行 Test5 的构造方法来完成 t5 静态属性的初始化，输出 <b><font color=red>③" test5 gouazao start; " ；</font></b><br><br>7、t5 静态属性初始化完成后，需要执行静态代码框，输出 <b><font color=red>④"test4 static start;" ；</font></b><br><br>8、此时 Test4 的类加载完成，此时需要执行构造方法创建对象，但是在执行 Test4 的构造方法时，内部会被JVM内置  super();，它会先去调用父类的构造方法执行，所以会现输出<b><font color=red> ⑤" test3 gouzao start; " </font></b>；最后才输出<b><font color=red> ⑥" test4 gouzao start; "</font></b>；</font><br><br><table><tr><td bgcolor=#FF00FF><font size = 3px>谢谢大家阅读，鉴于本人水平有限，如有问题敬请提出。</font></td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用滑动窗口算法查找字符串中不包含重复字符的最长子串</title>
      <link href="/2020/03/26/find_max_children_string/"/>
      <url>/2020/03/26/find_max_children_string/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>使用滑动窗口算法查找字符串中不包含重复字符的最长子串。</p></blockquote><h2 id="代码奉上："><a href="#代码奉上：" class="headerlink" title="代码奉上："></a>代码奉上：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化一个测试用的字符串</span></span><br><span class="line">String str = <span class="string">"asdfgrsefkkclgtdxdwee"</span>;</span><br><span class="line"> </span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n = str.length();</span><br><span class="line">Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (!set.contains(str.charAt(j))) &#123;</span><br><span class="line"><span class="keyword">char</span> ss = str.charAt(j++);</span><br><span class="line">set.add(ss);</span><br><span class="line">sb.append(ss);</span><br><span class="line">max = max &gt; j - i ? max : j - i;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">map.put(sb.length(), sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map.put(sb.length(), sb.toString());</span><br><span class="line">set.remove(str.charAt(i++));</span><br><span class="line">sb.delete(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"最大子串的长度："</span> + max);</span><br><span class="line">System.out.println(<span class="string">"最大子串："</span> + map.get(max));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java实现LRU缓存算法</title>
      <link href="/2020/03/20/Java_impl_LRU/"/>
      <url>/2020/03/20/Java_impl_LRU/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>什么是LRU算法：LRU是Least Recently Used的缩写，即最近最久未使用，是一种操作系统中常用的页面置换算法。</p></blockquote><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><p>知道了什么是LRU后，我们再来聊下它的使用场景；在工作中，对于Redis我们一定是比较熟悉的，它是一个内存数据库；因为它是内存数据库，并且内存的空间是有限的，如果Redis中数据量很大的话，内存就可能被占满，但是此时如果还有数据存入Redis的话，那该怎么办呢？这就是由Redis的的内存淘汰策略所决定的。</p><p>LRU最近最久未使用算法就是Redis的内存淘汰策略之一。 </p><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前缓存的容量为2</span></span><br><span class="line">LRUCache cache = <span class="keyword">new</span> LRUCache( <span class="number">2</span> );</span><br><span class="line"> </span><br><span class="line">cache.put(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">cache.put(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回  1</span></span><br><span class="line">cache.put(<span class="number">3</span>, <span class="number">3</span>);    <span class="comment">// 该操作会使得密钥 2 作废</span></span><br><span class="line">cache.get(<span class="number">2</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.put(<span class="number">4</span>, <span class="number">4</span>);    <span class="comment">// 该操作会使得密钥 1 作废</span></span><br><span class="line">cache.get(<span class="number">1</span>);       <span class="comment">// 返回 -1 (未找到)</span></span><br><span class="line">cache.get(<span class="number">3</span>);       <span class="comment">// 返回  3</span></span><br><span class="line">cache.get(<span class="number">4</span>);       <span class="comment">// 返回  4</span></span><br></pre></td></tr></table></figure><h2 id="设计LRU算法的数据结构："><a href="#设计LRU算法的数据结构：" class="headerlink" title="设计LRU算法的数据结构："></a>设计LRU算法的数据结构：</h2><p>1、要求：<br>①、首先支持查询数据get和写入数据put；<br>②、满足时间复杂度为O(1)；</p><p>2、思路：<br>由题目中要求的O(1)时间复杂度想到缓存可以想到用一个map来存储key、value结点，最近最久未使用到的（缓存数据）放到最后，最新访问的（缓存数据）放到最前面，可以考虑用双向链表来实现，这样，这个map的key对应的是缓存的Key, value对应的是双向链表的一个节点，即链表的节点同时存在map的value中。</p><p>这样，当新插入一个节点时，它应该在这个双向链表的头结点处，同时把这个节点的key和这个节点put到map中保留下来。当LRU缓存链表容量达到最大又要插入新节点时，把链表的尾节点删除掉，同时在map中移除该节点对应的key。</p><p><strong>双向链表中节点的数据结构：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedListNode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String key;</span><br><span class="line">Object value;</span><br><span class="line"><span class="comment">// 头指针</span></span><br><span class="line">DoubleLinkedListNode pre;</span><br><span class="line"><span class="comment">// 尾指针</span></span><br><span class="line">DoubleLinkedListNode next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedListNode</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>由此可以抽象出LRU缓存算法的数据结构：双向链表+HashMap。</strong></p><p>数据结构逻辑图如下所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDMyMDEzNTkwNi5wbmc?x-oss-process=image/format,png" alt=""></p><h2 id="代码奉上："><a href="#代码奉上：" class="headerlink" title="代码奉上："></a>代码奉上：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String, DoubleLinkedListNode&gt; map = <span class="keyword">new</span> HashMap&lt;String, DoubleLinkedListNode&gt;();</span><br><span class="line"><span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">private</span> DoubleLinkedListNode head;</span><br><span class="line"><span class="comment">// 尾节点</span></span><br><span class="line"><span class="keyword">private</span> DoubleLinkedListNode tail;</span><br><span class="line"><span class="comment">// 双向链表的容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"><span class="comment">// 双向链表中节点的数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 将节点设置为头结点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(DoubleLinkedListNode node)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 节点的尾指针执行头结点</span></span><br><span class="line">node.next = head;</span><br><span class="line"><span class="comment">// 节点的头指针置为空</span></span><br><span class="line">node.pre = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 将头结点的头指针执行节点</span></span><br><span class="line">head.pre = node;</span><br><span class="line">&#125;</span><br><span class="line">head = node;</span><br><span class="line"><span class="keyword">if</span> (tail == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果双向链表中还没有节点时，头结点和尾节点都是当前节点</span></span><br><span class="line">tail = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:将双向链表中的节点移除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeNode</span><span class="params">(DoubleLinkedListNode node)</span> </span>&#123;</span><br><span class="line">DoubleLinkedListNode cur = node;</span><br><span class="line">DoubleLinkedListNode pre = cur.pre;</span><br><span class="line">DoubleLinkedListNode post = cur.next;</span><br><span class="line"><span class="comment">// 如果当前节点没有头指针的话，说明它是链表的头结点</span></span><br><span class="line"><span class="keyword">if</span> (pre != <span class="keyword">null</span>) &#123;</span><br><span class="line">pre.next = post;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head = post;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果当前节点没有尾指针的话，说明当前节点是尾节点</span></span><br><span class="line"><span class="keyword">if</span> (post != <span class="keyword">null</span>) &#123;</span><br><span class="line">post.pre = pre;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tail = pre;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:从缓存Cache中get</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用hashmap进行查询，时间复杂度为O(1)，如果进行链表查询，需要遍历链表，时间复杂度为O(n)</span></span><br><span class="line"><span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">DoubleLinkedListNode node = map.get(key);</span><br><span class="line"><span class="comment">// 将查询出的节点从链表中移除</span></span><br><span class="line">removeNode(node);</span><br><span class="line"><span class="comment">// 将查询出的节点设置为头结点</span></span><br><span class="line">setHead(node);</span><br><span class="line"><span class="keyword">return</span> node.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缓存中没有要查询的内容</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:将key-value存储set到缓存Cache中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">DoubleLinkedListNode node = map.get(key);</span><br><span class="line">node.value = value;</span><br><span class="line">removeNode(node);</span><br><span class="line">setHead(node);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果缓存中没有词key-value</span></span><br><span class="line"><span class="comment">// 创建一个新的节点</span></span><br><span class="line">DoubleLinkedListNode newNode = <span class="keyword">new</span> DoubleLinkedListNode(key, value);</span><br><span class="line"><span class="comment">// 如果链表中的节点数小于链表的初始容量（还不需要进行数据置换）则直接将新节点设置为头结点</span></span><br><span class="line"><span class="keyword">if</span> (size &lt; capacity) &#123;</span><br><span class="line">setHead(newNode);</span><br><span class="line"><span class="comment">// 将新节点放入hashmap中，用于提高查找速度</span></span><br><span class="line">map.put(key, newNode);</span><br><span class="line">size++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 缓存(双向链表)满了需要将"最近醉酒未使用"的节点(尾节点)删除，腾出新空间存放新节点</span></span><br><span class="line"><span class="comment">// 首先将map中的尾节点删除</span></span><br><span class="line">map.remove(tail.key);</span><br><span class="line"><span class="comment">// 移除尾节点并重新置顶尾节点的头指针指向的节点为新尾节点</span></span><br><span class="line">removeNode(tail);</span><br><span class="line"><span class="comment">// 将新节点设置为头节点</span></span><br><span class="line">setHead(newNode);</span><br><span class="line"><span class="comment">// 将新节点放入到map中</span></span><br><span class="line">map.put(key, newNode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020年3月20日 下午1:39:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"双向链表的容量为6"</span>);</span><br><span class="line">LRUCache lc = <span class="keyword">new</span> LRUCache(<span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 向缓存中插入set数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">lc.set(<span class="string">"test"</span> + i, <span class="string">"test"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 遍历缓存中的数据，从左到右，数据越不经常使用</span></span><br><span class="line">System.out.println(<span class="string">"第一次遍历双向链表：(从头结点遍历到尾节点)"</span>);</span><br><span class="line">DoubleLinkedListNode node = lc.head;</span><br><span class="line"><span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(node.key + <span class="string">"  "</span>);</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用get查询缓存中数据</span></span><br><span class="line">lc.get(<span class="string">"test2"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 再次遍历缓存中的数据，从左到右，数据越不经常使用,并且此次发现刚刚操作的数据节点位于链表的头结点了。</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"get查询 test2节点后 ，第二次遍历双向链表："</span>);</span><br><span class="line">DoubleLinkedListNode node1 = lc.head;</span><br><span class="line"><span class="keyword">while</span> (node1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(node1.key + <span class="string">"  "</span>);</span><br><span class="line">node1 = node1.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 再次向缓存中插入数据，发现缓存链表已经满了，需要将尾节点移除</span></span><br><span class="line">lc.set(<span class="string">"sucess"</span>, <span class="string">"sucess"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 再次遍历缓存中的数据，从左到右，数据越不经常使用,并且此次发现刚刚set操作时由于链表满了， 就将尾节点test0</span></span><br><span class="line"><span class="comment"> * 移除了，并且将新节点置为链表的头结点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.out.println();</span><br><span class="line">System.out.println(<span class="string">"put插入sucess节点后，第三次遍历双向链表："</span>);</span><br><span class="line">DoubleLinkedListNode node2 = lc.head;</span><br><span class="line"><span class="keyword">while</span> (node2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(node2.key + <span class="string">"  "</span>);</span><br><span class="line">node2 = node2.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果展示："><a href="#运行结果展示：" class="headerlink" title="运行结果展示："></a>运行结果展示：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">双向链表容量为<span class="number">6</span></span><br><span class="line">第一次遍历双向链表：(从头结点遍历到尾节点)</span><br><span class="line">test5  test4  test3  test2  test1  test0  </span><br><span class="line"></span><br><span class="line">get查询 test2节点后 ，第二次遍历双向链表：</span><br><span class="line">test2  test5  test4  test3  test1  test0  </span><br><span class="line"></span><br><span class="line">put插入sucess节点后，第三次遍历双向链表：</span><br><span class="line">sucess  test2  test5  test4  test3  test1</span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>1、<a href="https://blog.csdn.net/m0_37907797/article/details/104277209" target="_blank" rel="noopener">记一次阿里面试，我挂在了 最熟悉不过的LRU 缓存算法设计上。。。。。</a><br>2、 <a href="https://blog.csdn.net/qq_37372007/article/details/88418224" target="_blank" rel="noopener">【LeetCode】146. LRU缓存机制</a><br>3、<a href="https://www.cnblogs.com/springfor/p/3869393.html" target="_blank" rel="noopener">LRU Cache leetcode java</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java使用Trie树算法实现敏感词替过滤、根据关键词自动联想</title>
      <link href="/2020/03/18/Java_Impl_Trie/"/>
      <url>/2020/03/18/Java_Impl_Trie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Trie树也称为 <span style="color:red"> 字典树、单词查找树 </span>，最大的特点就是共享字符串的公共前缀来达到节省空间的目的了。<br>然后可以根据它的公共前缀的特性来实现敏感词过滤、自动联想等功能。</p></blockquote><h2 id="抽象出trie树的数据结构："><a href="#抽象出trie树的数据结构：" class="headerlink" title="抽象出trie树的数据结构："></a>抽象出trie树的数据结构：</h2><p>1、首先来看下trie树的结构图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDMxODE0NTkwOS5wbmc?x-oss-process=image/format,png" alt=""><br><strong>从上图可以归纳出Trie树的基本性质：</strong><br>①根节点不包含字符，除根节点外的每一个子节点都包含一个字符。<br>②从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。<br>③每个节点的所有子节点包含的字符互不相同。<br>④从第一字符开始有连续重复的字符只占用一个节点，比如上面的to，和ten，中重复的单词t只占用了一个节点</p><p><strong>从上面归纳出的基本性质可以抽象出节点的class属性：</strong><br>1、是否为叶子节点的标志位  <span style="color:blue"><strong>isWord</strong></span> ；<br>2、既能存储此节点的值也能存储其所有的子节点的 <span style="color:blue"><strong>children</strong></span> 数据结构HashMap；</p><h2 id="代码奉上："><a href="#代码奉上：" class="headerlink" title="代码奉上："></a>代码奉上：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.trie;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: trie树的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"><span class="comment">// 节点是否为叶子节点的标志；true：叶子节点，false：非叶子节点（用于子节点的节点）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isWord;</span><br><span class="line"><span class="comment">// 当前节点拥有的孩子节点，使用hashmap进行存储，在查找子节点时的时间复杂度为O(1)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;Character, Node&gt; children;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> isWord)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isWord = isWord;</span><br><span class="line"><span class="keyword">this</span>.children = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// trie树的根节点</span></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"><span class="comment">// trie树中拥有多少分枝（多少个敏感词）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = <span class="keyword">new</span> Node();</span><br><span class="line"><span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 返回trie树中分枝树（敏感词树）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 向trie树中添加分枝/敏感词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> *            添加的敏感词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBranchesInTrie</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 设置当前节点为根节点</span></span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : words) &#123;</span><br><span class="line"><span class="comment">// 判断当前节点的子节点中是否存在字符c</span></span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(c)) &#123;</span><br><span class="line"><span class="comment">// 如果不存在则将其添加进行子节点中</span></span><br><span class="line">cur.children.put(c, <span class="keyword">new</span> Node());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前节点进行变换，变换为新插入到节点 c</span></span><br><span class="line">cur = cur.children.get(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分枝添加完成后，将分枝中的最后一个节点设置为叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (!cur.isWord) &#123;</span><br><span class="line">cur.isWord = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 分枝数（敏感词数）加1</span></span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断trie树中是否存在某分枝/敏感词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : words) &#123;</span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(c)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.children.get(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果存在并且遍历到trie树中某个分支最后一个节点了，那此节点就是叶子节点，直接返回true</span></span><br><span class="line"><span class="keyword">return</span> cur.isWord;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 如果一段话中有trie树中存储的敏感词则需将其进行替换为 **; 例如：尼玛的，替换为 **的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> *            一段话，如果有敏感词需要被替换的词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sensitiveWordReplace</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"敏感词替换前："</span> + word);</span><br><span class="line"> </span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line"><span class="comment">// 需要被替换的敏感词</span></span><br><span class="line">StringBuilder oldTemp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 需要替换成的星号</span></span><br><span class="line">StringBuilder starTemp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : words) &#123;</span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(c)) &#123;</span><br><span class="line">    <span class="comment">// 如果当前字符是空格、换行符、tab键的话</span></span><br><span class="line">                <span class="keyword">if</span> (Character.isWhitespace(c) &amp;&amp; oldTemp.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    oldTemp.append(c);</span><br><span class="line">                    starTemp.append(<span class="string">"*"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">// 如果当前节点的孩子节点中没有此单词则直接跳过此循环，进入下次循环</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cur.isWord) &#123;</span><br><span class="line"><span class="comment">// 拼接上word和trie树都有的字符</span></span><br><span class="line">oldTemp.append(c);</span><br><span class="line">starTemp.append(<span class="string">"*"</span>);</span><br><span class="line">cur = cur.children.get(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur.isWord) &#123;</span><br><span class="line"><span class="comment">// 进行敏感词替换</span></span><br><span class="line">word = word.replaceAll(oldTemp.toString(), starTemp.toString());</span><br><span class="line"><span class="comment">// 清空StringBuilder中内容</span></span><br><span class="line">oldTemp.delete(<span class="number">0</span>, oldTemp.length());</span><br><span class="line">starTemp.delete(<span class="number">0</span>, starTemp.length());</span><br><span class="line"><span class="comment">// 查找一个敏感词并替换后，需要重新从根节点进行遍历，所以当前节点指向root</span></span><br><span class="line">cur = root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"敏感词替换后："</span> + word);</span><br><span class="line"><span class="keyword">return</span> word;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 存放trie树中查询到的联想词</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用trie的公共前缀特性，可以实现关键词自动联想</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixMatching</span><span class="params">(String word, Node root)</span> </span>&#123;</span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">str.append(word);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(words[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">"无关联词！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.children.get(words[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs(str, cur);</span><br><span class="line">System.out.println(<span class="string">"[ "</span> + word + <span class="string">" ]在trie树中的联想词："</span> + Arrays.toString(list.toArray()));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 节点遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> *            需要查找的词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment"> *            开始遍历的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(StringBuilder word, Node root)</span> </span>&#123;</span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">if</span> (cur.isWord) &#123;</span><br><span class="line">list.add(word.toString());</span><br><span class="line"><span class="keyword">if</span> (cur.children.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Character s : cur.children.keySet()) &#123;</span><br><span class="line">word.append(s);</span><br><span class="line"><span class="comment">// 递归调用</span></span><br><span class="line">dfs(word, cur.children.get(s));</span><br><span class="line">word.delete(word.length() - <span class="number">1</span>, word.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Trie t = <span class="keyword">new</span> Trie();</span><br><span class="line"><span class="comment">// 插入敏感词</span></span><br><span class="line">t.addBranchesInTrie(<span class="string">"麻痹"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"尼玛的"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"狗日的"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 插入联想词</span></span><br><span class="line">t.addBranchesInTrie(<span class="string">"联想云科技"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"联盟"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"联和利泰扩招了"</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"trie树中分枝的个数："</span> + t.size);</span><br><span class="line"> </span><br><span class="line">String word = <span class="string">"尼玛的"</span>;</span><br><span class="line">System.out.println(<span class="string">"Trie树中是否存在[ "</span> + word + <span class="string">" ]敏感词: "</span> + t.contains(word));</span><br><span class="line"><span class="comment">// 敏感词替换测试</span></span><br><span class="line">t.sensitiveWordReplace(<span class="string">"衮，尼玛的傻子，你麻痹的，你各狗日的，早晚揍死你。"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// trie树实现联想测试</span></span><br><span class="line">t.prefixMatching(<span class="string">"联"</span>, t.root);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码运行输出："><a href="#代码运行输出：" class="headerlink" title="代码运行输出："></a>代码运行输出：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trie树中分枝的个数：<span class="number">6</span></span><br><span class="line">Trie树中是否存在[ 尼玛的 ]敏感词: <span class="keyword">true</span></span><br><span class="line">敏感词替换前：衮，尼玛的傻子，你麻痹的，你各狗日的，早晚揍死你。</span><br><span class="line">敏感词替换后：衮，***傻子，你**的，你各***，早晚揍死你。</span><br><span class="line">[ 联 ]在trie树中的联想词：[联想云科技, 联和利泰扩招了, 联盟]</span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>1、<a href="https://blog.csdn.net/m0_37907797/article/details/103272967" target="_blank" rel="noopener">【图解算法面试】记一次面试：说说游戏中的敏感词过滤是如何实现的？</a><br>2、 <a href="https://blog.csdn.net/u013309870/article/details/71081393?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">前缀树（Trie）原理及Java实现</a><br>3、<a href="https://blog.csdn.net/Nino_sama/article/details/100981325?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Trie树（字典树/前缀树）Java实现</a><br>4、<a href="https://www.wmathor.com/index.php/archives/1185/" target="_blank" rel="noopener">Trie 树实现搜索引擎自动联想 </a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的位运算符</title>
      <link href="/2020/02/29/Java_run_operator/"/>
      <url>/2020/02/29/Java_run_operator/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>位运算符比一般的算术运算符速度要</strong>快，而且可以实现一些算术运算符不能实现的功能。如果要开发高效率程序，位运算符是必不可少的 。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;位运算符用来对二进制位进行操作，包括：按位与（&amp;）、按位或（|）、按位异或（^）、按位取反（~）、按位左移（&lt;&lt;）、按位右移（&gt;&gt;）、按位无符号右移（&gt;&gt;&gt;）。</p></blockquote><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p><strong>例子：指定 A = 60（0011 1100）; B = 13 （0000 1101）</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9JbWFnZS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy93ZWlodW8ucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy95aWh1by5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9mYW4ucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy96dW95aS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy95b3V5aS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9ub3lvdXlpLnBuZw?x-oss-process=image/format,png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大工具让你飞起，就问你它香不香！嘿嘿......</title>
      <link href="/2020/02/28/six_tool_fly/"/>
      <url>/2020/02/28/six_tool_fly/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>十大工具让你工作更加顺畅，生活更加甜蜜，快来瞅瞅并收藏哟！括弧 <strong>(收藏不看系列不也挺香的呀，嘿嘿…..)</strong> </p></blockquote><h2 id="工具展示："><a href="#工具展示：" class="headerlink" title="工具展示："></a>工具展示：</h2><h4 id="1-印象笔记"><a href="#1-印象笔记" class="headerlink" title="1. 印象笔记"></a>1. 印象笔记</h4><p>这是一个记笔记的软件，肥肠好用，我从大学开始一直用到现在，现在推荐给大家；</p><p>注册的免费用户可以同时在两个终端进行登录，本人平时在笔记本、手机同时登录着，如果需要查询笔记看，可以拿起手机来就查询，你说它香不香，嘿嘿。</p><p>如果大家感觉同时两个终端登录还不够的话，例如有的大佬，需要在自己的台式机、mac本、平板、手机都同时登陆的话，那咱花钱升级账户，咱不差钱呢，哼！<br>[更多功能大家自己去探索哟。] &nbsp;&nbsp; 网址：<a href="https://www.yinxiang.com/" target="_blank" rel="noopener">https://www.yinxiang.com/</a></p><p><strong>上图：</strong> PC端软件长这个样，手机端大家可以自己去下载瞅瞅，反正挺香的！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy95aW54aWFuZy5wbmc?x-oss-process=image/format,png" alt=""></p><h4 id="2-Beyond-Compare-4"><a href="#2-Beyond-Compare-4" class="headerlink" title="2. Beyond Compare 4"></a>2. Beyond Compare 4</h4><p>Beyond Compare 4 主要用途是对比两个文件夹或者文件，并将差异以颜色标示。<br>其实它也可以用来进行比较两个版本不同的项目（指同一个项目，但是版本号不同）， 将其快速进行代码同步。</p><p>注：此软件有30天试用期的，大家可以在网上找些破解教程，很多的。</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">http://www.scootersoftware.com/download.php</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9iZXlvbmQucG5n?x-oss-process=image/format,png" alt=""></p><h4 id="3-JMeter"><a href="#3-JMeter" class="headerlink" title="3. JMeter"></a>3. JMeter</h4><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具，用于对软件做压力测试。</p><p>JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能；完全的可移植性和100% 纯java。</p><p>之前自己写了个监控系统，需要监控服务器的使用情况，后面就是使用的 JMeter 压服务器来得到监控数据的。括弧（后面会写一篇文章：java实现监控系统，敬请期待哟！）</p><p>最后再附上一份JMeter 的详细使用教程：<a href="https://www.cnblogs.com/testwjr/p/9156705.html" target="_blank" rel="noopener">https://www.cnblogs.com/testwjr/p/9156705.html</a>  </p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9qbWV0ZXIucG5n?x-oss-process=image/format,png" alt=""></p><h4 id="4-阿里巴巴矢量图标"><a href="#4-阿里巴巴矢量图标" class="headerlink" title="4. 阿里巴巴矢量图标"></a>4. 阿里巴巴矢量图标</h4><p>Iconfont-阿里巴巴矢量图标：国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能。</p><p>这对于前端攻城狮来说是非常棒的，并且对于我们全栈攻城狮也是不可或缺的。因为开发软件时经常会需要一些图标，如果自己制作的话耗时耗力；在知道了矢量图标库后，自己就可以直接去里面找符合自己心意的，省时省力，你说它不香吗，嘿嘿。</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9pY29uMS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9pY29uMi5wbmc?x-oss-process=image/format,png" alt=""></p><p>例如，本人的<a href="https://leishen6.github.io/">个人博客</a>中有很多图标就是从其中找的，我感觉挺香的呀！嘿嘿……  </p><p><strong>来来上图：</strong> (图中画圈的都是啊，大家看看香不香。)：</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200606143018.png" alt=""></p><h4 id="5-Markdown编辑器：Typora"><a href="#5-Markdown编辑器：Typora" class="headerlink" title="5. Markdown编辑器：Typora"></a>5. Markdown编辑器：Typora</h4><p>上面刚刚提到了搭建的个人博客，那我们就趁热打铁来聊聊写博客所用的工具。博客搭建好了，那么就需要写博文了呀，并且现在国内知名的博客网站（例如：<a href="https://segmentfault.com/u/muzilei_5e72d30d2c9fb" target="_blank" rel="noopener">思否</a>、<a href="https://juejin.im/user/5c67b8046fb9a049a7125a58/posts" target="_blank" rel="noopener">掘金</a>、<a href="https://blog.csdn.net/feichitianxia" target="_blank" rel="noopener">CSDN</a>  等) 都支持Markdown语法的，那使用其写完博客后就可以一键发布到多个网站中了，这是不是就属于<strong>《 一次编写，到处发布》</strong> ，嘿嘿 . . . . . . . ，想想就高兴 ！</p><p>接下来就主要介绍下 <strong>Typora</strong> 编辑器工具啦！ 它真的是太太太太太 . . . . . 好用了，不仅上手容易，而且支持的功能很多，下面简单介绍它提供的功能：</p><p>①、支持 Markdown语法 </p><p>②、支持导出各种格式的文件（例如：PDF、HTML、Word文档、图片等）</p><p>③、原生支持数学公式编辑</p><p>④、等等 . . . . . . . . . . . （更多功能等待大家去挖掘咯！）</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a></p><p><strong>上图：</strong> Windows 版是这样婶的</p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200606152453.png" alt=""></p><h4 id="6-漂亮的代码模版：Carbon"><a href="#6-漂亮的代码模版：Carbon" class="headerlink" title="6. 漂亮的代码模版：Carbon"></a>6. 漂亮的代码模版：Carbon</h4><p>说到了写博客，那博文中不可避免的就需要展示一些代码，那怎样才能使代码展示起来更加牛X呢，别犹豫，就使用 <strong>Carbon</strong>  ，你绝对不会后悔，使用了Carbon后，你的博文绝对会吸引很多读者，博文浏览量就飕飕的飙起来啦！哈哈，开玩笑呀，虽说实际效果可能没我说的那么神，但是你来试试的话，就会能感受到实际的威能啦。</p><p><strong>注意了：这个是需要导出为图片的。</strong></p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://carbon.now.sh/" target="_blank" rel="noopener">https://carbon.now.sh/</a></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200606151842.png" alt=""></p><p><strong>再来提供一张在博客中使用效果图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200531191044.png" alt=""></p><h4 id="7-表情包在线制作模板大全"><a href="#7-表情包在线制作模板大全" class="headerlink" title="7. 表情包在线制作模板大全"></a>7. 表情包在线制作模板大全</h4><p>表情包，这个东西我想每个人的手机中都存有不收吧，嘿嘿 . . . .   没事时老司机斗斗图，还有在和妹子聊天时，不时的发个表情包活跃下聊天气氛 。这表情包最主要的作用就是简单明了，越看越想乐，活跃气氛之利器呀。</p><p>所以，在写博客时，表情包也不可或缺的，它可以使我们的文章看起来不那么枯燥，提高读者的阅读兴趣；反之，如果全文都是文字，那一看起来就头大了，都没有继续读下去的心情了，那 . . . 不就糟糕了吗。</p><p>平时在写博文时，去哪里找自己想要的表情包呢？ 别着急呀，我们可以去  <a href="https://www.52doutu.cn/maker/1/?order=timedown" target="_blank" rel="noopener">斗图表情包在线制作</a>  ，里面不仅已经存在了大量现成的表情包，也可以自己在线制作所需的表情包。</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://www.52doutu.cn/maker/1/?order=timedown" target="_blank" rel="noopener">https://www.52doutu.cn/maker/1/?order=timedown</a></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200606155023.png" alt=""></p><h4 id="8-比特虫-在线制作ico图标"><a href="#8-比特虫-在线制作ico图标" class="headerlink" title="8. 比特虫 在线制作ico图标"></a>8. 比特虫 在线制作ico图标</h4><p>接下来，再介绍一个肥肠棒的 <strong>在线制作ico图标</strong> 的网站 <strong>“比特虫”</strong>，它可将<strong>png、jpg</strong>等后缀的图片转为<strong>ico</strong>的图标。注意：在进行转化前选好图标的尺寸哟。大家可以去试试，我感觉挺香的，嘿嘿！</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="http://www.bitbug.net/" target="_blank" rel="noopener">http://www.bitbug.net/</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9iaXRjaG9uZy5wbmc?x-oss-process=image/format,png" alt=""></p><h4 id="9-processon-在线画图工具"><a href="#9-processon-在线画图工具" class="headerlink" title="9. processon 在线画图工具"></a>9. processon 在线画图工具</h4><p>processon 这个在线画图工具在我上大学时就使用的，我感觉它也是非常棒的，大家先瞅瞅它的官网；</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://www.processon.com/" target="_blank" rel="noopener">https://www.processon.com/</a></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9wcm9jZXNzT24ucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>在上学时，在<strong>Java实现爬虫</strong>的项目中使用 <strong>processon</strong> 画的流程图等，大家来瞅瞅。</p></blockquote><p><strong>先上第一张图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9jcmF3bGVyX2ltZzEucG5n?x-oss-process=image/format,png" alt=""></p><p><strong>来来第二张图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9jcmF3bGVyX2ltZzIucG5n?x-oss-process=image/format,png" alt=""></p><blockquote><p>现在写博客后，博文中的一些图大多数也是使用 <strong>processon</strong>  来画的，例如：这篇 <a href="https://segmentfault.com/a/1190000022791475" target="_blank" rel="noopener">单链表反转？面试官你确定要问这个吗？</a>  文章中的图片。</p></blockquote><p><strong>上图：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200530184205.png" alt=""></p><h4 id="10-思维导图工具：XMind"><a href="#10-思维导图工具：XMind" class="headerlink" title="10. 思维导图工具：XMind"></a>10. 思维导图工具：XMind</h4><p>思维导图，可以帮助我们更加好的梳理知识，可以通过思维导图快速记忆及回顾知识，让我们的大脑可以如同电脑一样，所有知识入脑即不丢失的呀，嘿嘿 . . . . . . . </p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://www.xmind.cn/" target="_blank" rel="noopener">https://www.xmind.cn/</a></p><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200606161834.png" alt=""></p><blockquote><p>再来一张我自己画的思维导图，嘿嘿嘿  . . . . . . . . . . . . </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/leishen6/ImgHosting/MuZiLei_blog_img/20200503162105.png" alt=""></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><blockquote><p>暂时就这些了，如果以后再遇到更好的工具时，会立即分享给大家，使我们大家工作顺畅，生活甜蜜！嘿嘿……..</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么数据脱敏及其实现方式</title>
      <link href="/2020/02/25/data_desensitization/"/>
      <url>/2020/02/25/data_desensitization/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据脱敏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高并发核心技术-幂等实现方案</title>
      <link href="/2020/02/25/power_etc/"/>
      <url>/2020/02/25/power_etc/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>柔性事务与传统事务</title>
      <link href="/2020/02/25/flexible_transaction/"/>
      <url>/2020/02/25/flexible_transaction/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库分库分表策略，如何分库，如何分表？</title>
      <link href="/2020/02/24/DB_Sharding_Strategy/"/>
      <url>/2020/02/24/DB_Sharding_Strategy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全网最全redis学习脑图</title>
      <link href="/2020/02/21/redis_learn_mind_map/"/>
      <url>/2020/02/21/redis_learn_mind_map/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>本文为<span style="color:#2BFA05;"><strong>转载文章</strong></span>，转自一个<a href="https://blog.csdn.net/qq_35190492/category_9606008.html" target="_blank" rel="noopener">大佬</a>。分享一个全网最全的redis学习脑图。</p></blockquote><h2 id="redis脑图："><a href="#redis脑图：" class="headerlink" title="redis脑图："></a>redis脑图：</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9SZWRpcyVFNSVBRCVBNiVFNCVCOSVBMCVFOCU4NCU5MSVFNSU5QiVCRS5qcGc?x-oss-process=image/format,png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 非关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现使用 _DESede_ 对称加密的 加解密工具类</title>
      <link href="/2020/02/18/java_imp_DESede_%20util/"/>
      <url>/2020/02/18/java_imp_DESede_%20util/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Java实现 “DESede” 对称加密；</p></blockquote><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><blockquote><p>在代码运行前，需要提前将一个依赖导入到项目中 pom.xml 中，使用这个依赖中的base64进行编解码；</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- base64编码使用 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESedeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密钥算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ALGORITHM = <span class="string">"DESede"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密/解密算法 / 工作模式 / 填充方式</span></span><br><span class="line"><span class="comment"> * Java 6支持PKCS5Padding填充方式</span></span><br><span class="line"><span class="comment"> * Bouncy Castle支持PKCS7Padding填充方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_ALGORITHM = <span class="string">"DESede/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 生成密钥, 返回168位的密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//实例化密钥生成器</span></span><br><span class="line">KeyGenerator kg = KeyGenerator.getInstance(KEY_ALGORITHM);</span><br><span class="line"><span class="comment">//DESede 要求密钥长度为 112位或168位</span></span><br><span class="line">kg.init(<span class="number">168</span>);</span><br><span class="line"><span class="comment">//生成密钥</span></span><br><span class="line">SecretKey secretKey = kg.generateKey();</span><br><span class="line"><span class="comment">//获得密钥的字符串形式</span></span><br><span class="line"><span class="keyword">return</span> Base64.encodeBase64String(secretKey.getEncoded());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: DES进行加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source 待加密的原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key  加密时使用的 密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>   返回经过base64编码的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String source, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] sourceBytes = source.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = Base64.decodeBase64(key);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE,<span class="keyword">new</span> SecretKeySpec(keyBytes, KEY_ALGORITHM));</span><br><span class="line">    <span class="keyword">byte</span>[] decrypted = cipher.doFinal(sourceBytes);</span><br><span class="line">    <span class="keyword">return</span> Base64.encodeBase64String(decrypted);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:  DES解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptStr  DES加密后的再经过base64编码的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密使用的密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回 utf-8 编码的明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptStr, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] sourceBytes = Base64.decodeBase64(encryptStr);</span><br><span class="line"><span class="keyword">byte</span>[] keyBytes = Base64.decodeBase64(key);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE,<span class="keyword">new</span> SecretKeySpec(keyBytes, KEY_ALGORITHM));</span><br><span class="line">    <span class="keyword">byte</span>[] decoded = cipher.doFinal(sourceBytes);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(decoded, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 生成秘钥</span></span><br><span class="line">        String key = generateKey();</span><br><span class="line">        System.out.println(<span class="string">"秘钥："</span>+key);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        String encryptStr = encrypt(<span class="string">"hello"</span>, key);</span><br><span class="line">        System.out.println(<span class="string">"密文："</span>+ encryptStr);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        String resource = decrypt(encryptStr, key);</span><br><span class="line">        System.out.println(<span class="string">"明文："</span>+ resource);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"校验："</span>+ <span class="string">"hello"</span>.equals(resource));</span><br><span class="line">        </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 amcharts.js 实现立体柱状图</title>
      <link href="/2020/02/15/imp_histogram_byAmcharts/"/>
      <url>/2020/02/15/imp_histogram_byAmcharts/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p> 本文章将使用<span style="color:red;"> <strong>amcharts.js</strong> </span>实现立体柱状图，以下代码中的js库是直接引入网络中的js文件，所以代码拷贝下来是可以直接运行的。</p></blockquote><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDE5MTIxODE0MTYyNjUzOC5wbmc?x-oss-process=image/format,png" alt=""></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;立体柱状图&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 立体柱状图 --&gt;</span><br><span class="line">&lt;script src="https://www.amcharts.com/lib/3/amcharts.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src="https://www.amcharts.com/lib/3/serial.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">     &lt;div id=<span class="string">"car3"</span> style=<span class="string">"text-align:center;width:440px;height:180px;"</span>&gt;</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;      </span><br><span class="line"> <span class="keyword">var</span> chartData = [&#123; country: <span class="string">"订单未确定"</span>, visits: <span class="number">50</span> , <span class="string">"color"</span>: <span class="string">"#067ADD"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单已确定"</span>, visits: <span class="number">166</span> , <span class="string">"color"</span>: <span class="string">"#FA0606"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单已处理"</span>, visits: <span class="number">26</span>  , <span class="string">"color"</span>: <span class="string">"#14EF06"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单完成"</span>, visits: <span class="number">80</span> , <span class="string">"color"</span>: <span class="string">"#F802BC"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单已发货"</span>, visits: <span class="number">56</span> , <span class="string">"color"</span>: <span class="string">"#0FFBF9"</span>&#125;,</span><br><span class="line">   ];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> chart = <span class="keyword">new</span> AmCharts.AmSerialChart();</span><br><span class="line"> chart.dataProvider = chartData;</span><br><span class="line"> chart.categoryField = <span class="string">"country"</span>;<span class="comment">//获取"chartData"中的文本内容</span></span><br><span class="line"> chart.color = <span class="string">"#4C4CFD"</span>; <span class="comment">//标题颜色（x、y轴的字体颜色）</span></span><br><span class="line"> chart.startDuration = <span class="number">2</span>;  <span class="comment">//动画特效 延迟时间 秒  </span></span><br><span class="line"> chart.columnWidth = <span class="number">0.4</span>; <span class="comment">//柱状图宽度</span></span><br><span class="line"> chart.depth3D = <span class="number">8</span>;<span class="comment">//3D厚度</span></span><br><span class="line"> chart.angle = <span class="number">30</span>;</span><br><span class="line"> chart.depth3D = <span class="number">15</span>;<span class="comment">//控制列的深度和角度</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> categoryAxis = chart.categoryAxis;</span><br><span class="line"> categoryAxis.gridColor = <span class="string">"#067ADD"</span>; <span class="comment">//网格线颜色</span></span><br><span class="line"> categoryAxis.axisColor = <span class="string">"#067ADD"</span>;  <span class="comment">//横坐标轴颜色</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> valueAxis = <span class="keyword">new</span> AmCharts.ValueAxis();  <span class="comment">//纵坐标轴</span></span><br><span class="line"> valueAxis.axisColor = <span class="string">"#067ADD"</span>;  <span class="comment">//纵坐标轴轴线的颜色</span></span><br><span class="line"> chart.addValueAxis(valueAxis);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> graph = <span class="keyword">new</span> AmCharts.AmGraph();</span><br><span class="line"> graph.valueField = <span class="string">"visits"</span> ; <span class="comment">//获取"chartData"中的数量</span></span><br><span class="line"> graph.colorField = <span class="string">"color"</span>;<span class="comment">//获取"chartData"中的配置颜色</span></span><br><span class="line"> <span class="comment">//graph.lineColor = "#067ADD";//柱状图的颜色,这里是全部设置成为统一 #067ADD 颜色</span></span><br><span class="line"> <span class="comment">//graph.topRadius = 1;   //设置为椭圆柱体,默认是长方形柱体</span></span><br><span class="line"> graph.lineAlpha = <span class="number">0.1</span>;</span><br><span class="line"> graph.fillAlphas = <span class="number">0.85</span>;</span><br><span class="line"> graph.type = <span class="string">"column"</span>;<span class="comment">//柱形，也可是设置为 line 折线图等</span></span><br><span class="line"> chart.addGraph(graph);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> graph.fillAlphas = <span class="number">1</span>;<span class="comment">//填充柱形图的颜色</span></span><br><span class="line"> graph.balloonText = <span class="string">"&lt;b&gt;[[category]]: [[value]] 单&lt;/b&gt;"</span>;<span class="comment">//鼠标悬浮时展示数据的格式</span></span><br><span class="line"> </span><br><span class="line"> chart.write(<span class="string">'car3'</span>); <span class="comment">//将js写入到div容器中</span></span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试手写HashMap，手撕HashMap</title>
      <link href="/2020/02/12/interview_Implement_HashMap/"/>
      <url>/2020/02/12/interview_Implement_HashMap/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>现在面试时，面试官经常会问到HashMap，简单点就会问下HashMap的一些关键知识点，困难些的可能会当场让你手写一个HashMap，考察下你对HashMap底层原理的了解深度；所以，今天特别手写了一个简单的HashMap，只实现了<span style="color:red;"> put、get、containsKey、keySet </span>方法的 HashMap，来帮助我们理解HashMap的底层设计原理。<br>本文参考：<a href="https://blog.csdn.net/huangshulang1234/article/details/79713303" target="_blank" rel="noopener">手写实现一个HashMap</a></p></blockquote><h2 id="手撕HashMap："><a href="#手撕HashMap：" class="headerlink" title="手撕HashMap："></a>手撕HashMap：</h2><h4 id="1-首先定义接口："><a href="#1-首先定义接口：" class="headerlink" title="1. 首先定义接口："></a>1. 首先定义接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Title</span>: MyMap </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义map接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午3:56:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 插入键值对方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午3:59:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:根据key获取value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午3:59:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断key键是否存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k  key键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午4:07:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(K k)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取map集合中所有的key，并放入set集合中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午4:24:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt;  <span class="title">keySet</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------内部接口 Entry（存放key-value）---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Enter </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 定义内部接口 Entry，存放键值对的Entery接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午4:00:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取key方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午4:02:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:获取value方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午4:02:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-接口实现类："><a href="#2-接口实现类：" class="headerlink" title="2. 接口实现类："></a>2. 接口实现类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Title</span>: MyHashMap </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:   MyMap接口的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午4:04:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(value=&#123;<span class="string">"unchecked"</span>,<span class="string">"rawtypes"</span>,<span class="string">"hiding"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">MyMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entry数组的默认初始化长度为16；通过位移运算向左移动四位，得到二进制码 "00010000",转换为十进制是16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负载因子默认为0.75f；负载因子是用来标志当使用容量占总容量的75%时，就需要扩充容量了，</span></span><br><span class="line"><span class="comment"> * 扩充Entry数组的长度为原来的两倍，并且重新对所存储的key-value键值对进行散列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可设置的初始容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> defaultInitSize;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可设置的负载因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> defaultLoadFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前已存入的元素的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> entryUseSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放key-value键值对对象的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry&lt;K, V&gt;[] table = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造，数组初始大小为16，负载因子大小为0.75f</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">MyHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有参构造，自己设置数组初始大小和负载因子大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultInitialCapacity  数组初始大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultLoadFactor2    负载因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">(<span class="keyword">int</span> defaultInitialCapacity, <span class="keyword">float</span> defaultLoadFactor2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断初始容量参数是否合法</span></span><br><span class="line"><span class="keyword">if</span> (defaultInitialCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//抛出非法参数异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"输入的初始容量参数是非法的  ："</span>+defaultInitialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断负载因子参数是否合法，Float.isNaN()方法是判断数据是否符合 0.0f/0.0f</span></span><br><span class="line"><span class="keyword">if</span> (defaultLoadFactor2 &lt; <span class="number">0</span> || Float.isNaN(defaultLoadFactor2)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"输入的负载因子参数是非法的  ："</span>+defaultLoadFactor2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.defaultInitSize = defaultInitialCapacity;</span><br><span class="line"><span class="keyword">this</span>.defaultLoadFactor = defaultLoadFactor2;</span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line">table = <span class="keyword">new</span> Entry[<span class="keyword">this</span>.defaultInitSize];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 集合中的put方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如是更新则返回key的旧value值，如是插入新的key-value则返回null</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午6:29:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">V oldValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//是否需要扩容？</span></span><br><span class="line"><span class="comment">//扩容完毕后一定会需要重新进行散列</span></span><br><span class="line"><span class="keyword">if</span> (entryUseSize &gt;= defaultInitSize * defaultLoadFactor) &#123;</span><br><span class="line"><span class="comment">//扩容并重新散列,扩容为原来的两倍</span></span><br><span class="line">resize(<span class="number">2</span> * defaultInitSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据key获取的HASH值、数组长度减1，两者做'与'运算，计算出数组中的位置</span></span><br><span class="line"><span class="keyword">int</span> index = hash(k) &amp; (defaultInitSize -<span class="number">1</span>);</span><br><span class="line"><span class="comment">//如果数组中此下标位置没有元素的话，就直接放到此位置上</span></span><br><span class="line"><span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">table[index] = <span class="keyword">new</span> Entry(k, v, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//总存入元素数量+1</span></span><br><span class="line">++entryUseSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//遍历数组下边的链表</span></span><br><span class="line">Entry&lt;K,V&gt; entry = table[index];</span><br><span class="line">Entry&lt;K,V&gt; e = entry;</span><br><span class="line"><span class="keyword">while</span>(e != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (k == e.getKey() || k.equals(e.getKey())) &#123;</span><br><span class="line">oldValue = e.getValue();</span><br><span class="line"><span class="comment">//key已存在，直接更新value</span></span><br><span class="line">e.value = v;</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数组此下标位置上链表的下个元素</span></span><br><span class="line">e = e.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JDK1.7中的链表头插法，直接占据数组下标位置</span></span><br><span class="line">    table[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(k, v, entry);</span><br><span class="line">    <span class="comment">//总存入元素数量+1</span></span><br><span class="line">    ++entryUseSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 根据key获取value值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午6:34:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过hash函数和数组元素容量做  【与】运算得到数组下标</span></span><br><span class="line"><span class="keyword">int</span> index = hash(k) &amp; (defaultInitSize -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//获取到数组下标位置元素</span></span><br><span class="line">Entry&lt;K, V&gt; entry = table[index];</span><br><span class="line">Entry&lt;K, V&gt; e = entry;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (k.equals(e.getKey())) &#123;</span><br><span class="line"><span class="keyword">return</span> e.getValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数组下标位置对应链表中的下一个元素</span></span><br><span class="line">e = e.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (entry != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:扩容并重新将元素进行散列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i  扩容后的大小</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午5:06:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">Entry&lt;K,V&gt;[] newTable = <span class="keyword">new</span> Entry[size];</span><br><span class="line"><span class="comment">//改变数组的初始大小</span></span><br><span class="line">defaultInitSize = size ;</span><br><span class="line"><span class="comment">//将已存放键值对数量置为0</span></span><br><span class="line">entryUseSize = <span class="number">0</span> ;</span><br><span class="line"><span class="comment">//将已存的元算根据最新的数组的大小进行散列</span></span><br><span class="line">rehash(newTable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重新进行散列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newTable</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午5:10:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(Entry&lt;K, V&gt;[] newTable)</span></span>&#123;</span><br><span class="line">List&lt;Entry&lt;K, V&gt;&gt; entryList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Entry&lt;K, V&gt; entry : table)&#123;</span><br><span class="line"><span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//将原来数组中的元素放到list集合中</span></span><br><span class="line">entryList.add(entry);</span><br><span class="line"><span class="comment">//如果此数组下标的位置存在链表的话，需要遍历下列表，将列表中的键值对数据取出来放到集合中</span></span><br><span class="line">entry = entry.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (entry != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将旧的数组引用覆盖，让引用指向堆中新开辟的数组</span></span><br><span class="line"><span class="keyword">if</span> (newTable.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">table = newTable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所谓重新的散列hash，就是将元素重新放入到扩容后的集合中</span></span><br><span class="line"><span class="keyword">for</span>(Entry&lt;K, V&gt; entry : entryList)&#123;</span><br><span class="line"><span class="comment">//重新put</span></span><br><span class="line">put(entry.getKey(), entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 根据key获取hashcod码值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午5:52:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断是否存在此key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k  key键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午4:52:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = hash(k) &amp; (defaultInitSize -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//获取到数组下标位置元素</span></span><br><span class="line">Entry&lt;K, V&gt; entry = table[index];</span><br><span class="line">Entry&lt;K, V&gt; e = entry;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (k.equals(e.getKey())) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数组下标位置对应链表中的下一个元素</span></span><br><span class="line">e = e.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取map集合所有的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午5:52:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (entryUseSize == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;K&gt; entrySet = <span class="keyword">new</span> HashSet&lt;K&gt;();</span><br><span class="line"><span class="keyword">for</span>(Entry&lt;K, V&gt; entry : table)&#123;</span><br><span class="line"><span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//将原来数组中的元素的key放到set集合中</span></span><br><span class="line">entrySet.add(entry.getKey());</span><br><span class="line"><span class="comment">//如果此数组下标的位置存在链表的话，需要遍历下列表，将列表中元素的key取出来放到集合中</span></span><br><span class="line">entry = entry.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (entry != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> entrySet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------内部类 Entry（存放key-value）----------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Entry </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现了key-value简直对接口的java类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午6:12:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">MyMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对对象的key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> K key;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对对象的value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span>  V value;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对对象指向下一个键值对对象的指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无参构造</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">Entry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(K key, V value, Entry&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-测试方法："><a href="#3-测试方法：" class="headerlink" title="3. 测试方法："></a>3. 测试方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: TestMyMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午6:49:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyMap</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:单元测试</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午7:07:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyMap&lt;String, String&gt; map = <span class="keyword">new</span> MyHashMap&lt;&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">//插入键值对</span></span><br><span class="line">map.put(<span class="string">"key"</span> + i, <span class="string">"value"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"key"</span> + i + <span class="string">",value is："</span> + map.get(<span class="string">"key"</span> + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据key获取value</span></span><br><span class="line">System.out.println(<span class="string">"\n"</span>+<span class="string">"此key：key88 的value是   "</span>+map.get(<span class="string">"key88"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断key是否存在</span></span><br><span class="line">    System.out.println(map.containsKey(<span class="string">"key885"</span>)+<span class="string">"   此key：key885 不存在！"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取map集合中所有的key</span></span><br><span class="line">    System.out.println(Arrays.toString(map.keySet().toArray()));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    MyMap&lt;String, String&gt; mapOther = <span class="keyword">new</span> MyHashMap&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; keySet = mapOther.keySet();</span><br><span class="line">    <span class="comment">//获取map集合中所有的key</span></span><br><span class="line">    System.out.println((keySet == <span class="keyword">null</span>)?<span class="keyword">null</span>:Arrays.toString(mapOther.keySet().toArray()));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo+Zookeeper vs Spring Cloud 之间的比较</title>
      <link href="/2020/02/12/Dubbo_Zookeeper%20_vs_SpringCloud/"/>
      <url>/2020/02/12/Dubbo_Zookeeper%20_vs_SpringCloud/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>目前学习了下Dubbo 和  Spring Cloud，并且在简单学习后，总结了下这两者之间简单的区别；如果以后有需要搭建分布式系统的需求，可以根据这两者之间的区别，再根据当前公司的业务等情况选择最为合适的来搭建自己的分布式系统。</p></blockquote><h2 id="Dubbo-Zookeeper-vs-Spring-Cloud："><a href="#Dubbo-Zookeeper-vs-Spring-Cloud：" class="headerlink" title="Dubbo+Zookeeper   vs   Spring Cloud："></a>Dubbo+Zookeeper   <span style="color:red;"><strong>vs</strong></span>   Spring Cloud：</h2><table><thead><tr><th>框架比较的方面</th><th>Dubbo+Zookeeper</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>性能方面</td><td>Dubbo是阿里巴巴开源的顶级项目，以前是用于阿里巴巴的分布式服务治理框架,其性能毋庸置疑一定是很强的，它适合一些比较大的公司用的分布式服务治理框架。（注：2017年之前阿里巴巴没有对其进行更新维护，但是2017年Dubbo项目官网宣布重新对其进行更新维护，并且在2018年Dubbo项目正式进入了Apache孵化器）</td><td>Spring Cloud是最近才兴起的一个分布式服务框架，现在它的社区十分的火爆，代码的更新迭代十分的快；它一般适合于中小型企业，并且性能比Dubbo低一些；</td></tr><tr><td>具有的特点</td><td>Dubbo有良好的连通性、健壮性、伸缩性、升级性。结合Dubbo可以相对于单体系统提升系统整体的扩展性。<br> Dubbo提供了多种协议给用户选择， 如dubbo、hessian、rmi 。 并可为每个服务指定不同的传输协议，粒度可以细化到方法， 不同服务在性能上适用不同协议进行传输，比如大数据用短连接协议，小数据大并发用长连接协议。</td><td>Spring Cloud来源于Spring，质量、稳定性、持续性都可以得到保证。<br>Spirng Cloud天然支持Spring Boot，更加便于业务落地。<br>Spring Cloud是Java领域最适合做微服务的框架。<br>相比于其它框架,Spring Cloud对微服务周边环境的支持力度最大。</td></tr><tr><td>方便性</td><td>Dubbo使用起来不太方便，由于许多组件其本身不支持，所以我们在搭建架构环境时，需要集成一些其他的开源组件，集成时会遇到种种的困难，并且在以后的项目维护和升级也不方便。<br>Dubbo服务调用的方式是RPC，服务提供方与调用方接口依赖方式太强：我们需要将调用的抽象接口依赖到消费者项目中才能调用服务，这会导致在以后的开发、测试、版本管理上很麻烦。</td><td>pringCloud自身的组件可以搭建成一个完整的微服务架构，并且搭建起来稍微简单一些；<br>SpringCloud调用的方式是REST，REST接口相比RPC更为轻量化，服务提供方和调用方的依赖只是依靠一纸契约，不存在代码级别的强依赖，当然REST接口也有缺点，很容易导致定义文档与实际实现不一致导致服务集成时的问题。</td></tr><tr><td>灵活性</td><td>由于dubbo许多组件都是集成的第三方，所以dubbo组件之间的自由度很高，dubbo更加的灵活。</td><td>SpringCloud自身支持了组件，各个组件之间的关联关系已经配置好了，所以它的灵活度不是很好，如果想要用第三方组件代替其中的一个组件的话会有一些困难。</td></tr><tr><td>服务注册中心</td><td>Zookeeper保证<span style="color:red;">C(一致性)P(分区容错性)</span>。<br>当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。</td><td>Eureka保证<span style="color:red;">A(可用性)P(分区容错性)</span>。<br>Eureka各个节点都是平等的，几个节点挂掉不会影响正常工作。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)</td></tr><tr><td>代码开发角度</td><td>Dubbo常与Spring、zookeeper结合，而且实现只是通过xml来配置服务地址、名称、端口，代码的侵入性是很小的，可以说几乎没有代码入侵。</td><td>Spring Cloud，由于它的实现需要类注解等，所以多少具有一定代码侵入。</td></tr></tbody></table><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>总的来说这两个搭建分布式系统的框架各有各的好处，在选择时要根据自己的需求等情况综合做选择；<br> 但是Eureka作为单纯的服务注册中心来说感觉要比Zookeeper更加<span style="color:red;">“<strong>专业</strong>”</span>，因为注册服务更重要的是高可用性，可以接受短期内达不到一致性的状况。</p><p> <span style="color:red;"><strong>注：</strong></span>可能此文章中表格内容看起来不太舒服，你还可以参考我在CSDN中的<a href="https://blog.csdn.net/feichitianxia/article/details/92682828" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 集群分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现 “ 将数字金额转为大写中文金额 ”</title>
      <link href="/2020/02/09/Java_imp_chinease_monery/"/>
      <url>/2020/02/09/Java_imp_chinease_monery/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>输入数字金额参数，运行程序得到其对应的大写中文金额；例如：输入— 12.56，输出— 12.56:壹拾贰元伍角陆分；重点来了：<span style="color:red;"><strong><em>本人亲测有效</em></strong></span>。</p></blockquote><h2 id="奉上代码："><a href="#奉上代码：" class="headerlink" title="奉上代码："></a>奉上代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Title</span>: ConvertUpMoney </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  将数字金额转为大写汉字金额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年6月18日 下午10:52:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertUpMoney</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大写数字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NUMBERS = &#123;<span class="string">"零"</span>,<span class="string">"壹"</span>,<span class="string">"贰"</span>,<span class="string">"叁"</span>,<span class="string">"肆"</span>,<span class="string">"伍"</span>,<span class="string">"陆"</span>,<span class="string">"柒"</span>,<span class="string">"捌"</span>,<span class="string">"玖"</span>&#125;;</span><br><span class="line"><span class="comment">// 整数部分的单位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] IUNIT = &#123;<span class="string">"元"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>,<span class="string">"万"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>,<span class="string">"亿"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>,<span class="string">"万"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>&#125;;</span><br><span class="line">    <span class="comment">//小数部分的单位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DUNIT = &#123;<span class="string">"角"</span>,<span class="string">"分"</span>,<span class="string">"厘"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转成中文的大写金额</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toChinese</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断输入的金额字符串是否符合要求</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(str) || !str.matches(<span class="string">"(-)?[\\d]*(.)?[\\d]*"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"抱歉，请输入数字！"</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"0"</span>.equals(str) || <span class="string">"0.00"</span>.equals(str) || <span class="string">"0.0"</span>.equals(str)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"零元"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在负号"-"</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(str.startsWith(<span class="string">"-"</span>))&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">str = str.replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str = str.replaceAll(<span class="string">","</span>, <span class="string">""</span>);<span class="comment">//去掉","</span></span><br><span class="line">String integerStr;<span class="comment">//整数部分数字</span></span><br><span class="line">String decimalStr;<span class="comment">//小数部分数字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：分离整数部分和小数部分</span></span><br><span class="line"><span class="keyword">if</span>(str.indexOf(<span class="string">"."</span>)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">integerStr = str.substring(<span class="number">0</span>,str.indexOf(<span class="string">"."</span>));</span><br><span class="line">decimalStr = str.substring(str.indexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str.indexOf(<span class="string">"."</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">integerStr = <span class="string">""</span>;</span><br><span class="line">decimalStr = str.substring(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">integerStr = str;</span><br><span class="line">decimalStr = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//beyond超出计算能力，直接返回</span></span><br><span class="line"><span class="keyword">if</span>(integerStr.length()&gt;IUNIT.length) &#123;</span><br><span class="line">System.out.println(str+<span class="string">"：超出计算能力"</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] integers = toIntArray(integerStr);<span class="comment">//整数部分数字</span></span><br><span class="line"><span class="comment">//判断整数部分是否存在输入012的情况</span></span><br><span class="line"><span class="keyword">if</span> (integers.length&gt;<span class="number">1</span> &amp;&amp; integers[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"抱歉，请输入数字！"</span>);</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">str = <span class="string">"-"</span>+str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> isWan = isWan5(integerStr);<span class="comment">//设置万单位</span></span><br><span class="line"><span class="keyword">int</span>[] decimals = toIntArray(decimalStr);<span class="comment">//小数部分数字</span></span><br><span class="line">String result = getChineseInteger(integers,isWan)+getChineseDecimal(decimals);<span class="comment">//返回最终的大写金额</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"负"</span>+result;<span class="comment">//如果是负数，加上"负"</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串转为int数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toIntArray(String number) &#123;</span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[number.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;number.length();i++) &#123;</span><br><span class="line">array[i] = Integer.parseInt(number.substring(i,i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将整数部分转为大写的金额</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChineseInteger</span><span class="params">(<span class="keyword">int</span>[] integers,<span class="keyword">boolean</span> isWan)</span> </span>&#123;</span><br><span class="line">StringBuffer chineseInteger = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">int</span> length = integers.length;</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">1</span> &amp;&amp; integers[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">String key = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(integers[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>((length - i) == <span class="number">13</span>)<span class="comment">//万（亿）</span></span><br><span class="line">key = IUNIT[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((length - i) == <span class="number">9</span>) &#123;<span class="comment">//亿</span></span><br><span class="line">key = IUNIT[<span class="number">8</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((length - i) == <span class="number">5</span> &amp;&amp; isWan) &#123;<span class="comment">//万</span></span><br><span class="line">key = IUNIT[<span class="number">4</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((length - i) == <span class="number">1</span>) &#123;<span class="comment">//元</span></span><br><span class="line">key = IUNIT[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((length - i)&gt;<span class="number">1</span> &amp;&amp; integers[i+<span class="number">1</span>]!=<span class="number">0</span>) &#123;</span><br><span class="line">key += NUMBERS[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">chineseInteger.append(integers[i]==<span class="number">0</span>?key:(NUMBERS[integers[i]]+IUNIT[length - i -<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chineseInteger.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将小数部分转为大写的金额</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getChineseDecimal</span><span class="params">(<span class="keyword">int</span>[] decimals)</span> </span>&#123;</span><br><span class="line">StringBuffer chineseDecimal = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;decimals.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">chineseDecimal.append(decimals[i]==<span class="number">0</span>?<span class="string">""</span>:(NUMBERS[decimals[i]]+DUNIT[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chineseDecimal.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断当前整数部分是否已经是达到【万】</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isWan5</span><span class="params">(String integerStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = integerStr.length();</span><br><span class="line"><span class="keyword">if</span>(length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">String subInteger = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(length &gt; <span class="number">8</span>) &#123;</span><br><span class="line">subInteger = integerStr.substring(length- <span class="number">8</span>,length -<span class="number">4</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">subInteger = integerStr.substring(<span class="number">0</span>,length - <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(subInteger) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String number = <span class="string">"12.56"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"1234567890563886.123"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"1600"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"156,0"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"-156,0"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"0.12"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"0.0"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"01.12"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"0125"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"-0125"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"sdw5655"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">null</span>+<span class="string">": "</span>+ConvertUpMoney.toChinese(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加个彩蛋："><a href="#加个彩蛋：" class="headerlink" title="加个彩蛋："></a>加个彩蛋：</h2><blockquote><p>本人在平时的学习中，还看到了一个十分有用的工具包，这个工具包中含有一个类型转换的方法，可以实现“ 金额的大小写 ”，但是这个工具包也有一些局限，“ 转换为大写只能精确到分（<span style="color:red;"><strong>小数点儿后两位</strong></span>），之后的数字会被忽略 ”；这个工具包叫“ <span style="color:red;"><strong>Hutool</strong></span> ”，学习地址：<a href="https://www.hutool.cn/docs/#/core/类型转换/类型转换工具类-Convert" target="_blank" rel="noopener">https://www.hutool.cn/docs/#/core/类型转换/类型转换工具类-Convert</a>  。</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒汉式单例模式为什么要进行二次判空</title>
      <link href="/2020/02/08/singleton_twoIfNull_reason/"/>
      <url>/2020/02/08/singleton_twoIfNull_reason/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>在本文中会使用代码进行展示懒汉单例模式为什么需要进行二次判空；代码中使用到 <span style="color:red;"><strong>CountDownLatch 倒计时器</strong></span>，不清楚CountDownLatch 使用的请参考此文<a href="https://www.jianshu.com/p/f17692e9114f" target="_blank" rel="noopener">“倒计时器：CountDownLatch”</a> 。</p></blockquote><h2 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h2><h5 id="1、懒汉式单例模式类"><a href="#1、懒汉式单例模式类" class="headerlink" title="1、懒汉式单例模式类"></a>1、懒汉式单例模式类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用volatile禁止指令重排序</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton sin = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">// 标识有几个线程获取到了锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">// 标识系统中到底生成了几个实例</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将构造器的修饰符设置为"private"，可以防止在外部进行new实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取实例对象的方法，公共的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 第一次判空。</span></span><br><span class="line"><span class="keyword">if</span> (sin == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 第二次判空。</span></span><br><span class="line"><span class="keyword">if</span> (sin == <span class="keyword">null</span>) &#123;</span><br><span class="line">sin = <span class="keyword">new</span> Singleton();</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、多线程并发调用单例模式的测试类"><a href="#2、多线程并发调用单例模式的测试类" class="headerlink" title="2、多线程并发调用单例模式的测试类"></a>2、多线程并发调用单例模式的测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个倒计树器,初始倒计数为10</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadTest demo = <span class="keyword">new</span> ThreadTest();</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//实例对象生成</span></span><br><span class="line">Singleton.getInstance();</span><br><span class="line"><span class="comment">//输出当前线程的名称</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//计数器进行减一</span></span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//创建一个长度为10的定长线程池</span></span><br><span class="line">ExecutorService exec = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">            exec.submit(demo);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待检查,阻塞main主线程,只有当CountDownLatch倒计数器为0时才会唤醒阻塞的main主线程</span></span><br><span class="line">        latch.await();  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启的10个线程中几个线程获取到了锁</span></span><br><span class="line">System.out.println(<span class="string">"共有 ( "</span> + Singleton.i + <span class="string">" ) 个线程获取到对象锁"</span>);</span><br><span class="line"><span class="comment">// 最终生成了几个Singleton实例</span></span><br><span class="line">System.out.println(<span class="string">"最终生成了( "</span> + Singleton.j + <span class="string">" )个Singleton实例对象"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        exec.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行上面的mian方法，会得到以下的一种输出结果-存在多种输出结果"><a href="#运行上面的mian方法，会得到以下的一种输出结果-存在多种输出结果" class="headerlink" title="运行上面的mian方法，会得到以下的一种输出结果(存在多种输出结果)"></a>运行上面的mian方法，会得到以下的一种输出结果(存在多种输出结果)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">7</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">6</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">9</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">10</span></span><br><span class="line">共有 ( <span class="number">2</span> ) 个线程获取到对象锁</span><br><span class="line">最终生成了( <span class="number">1</span> )个Singleton实例对象</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p> 从运行结果可以看出，如果不进行第二次判空的话，那么在<span style="color:red;">竟锁池(锁池)</span>中如果还有活跃的线程在等待获取的锁的话，在锁释放后就会再次竞争获取锁，获取的锁的线程进入”就绪状态”，当cpu分配其”时间片”后进行线程的调度，从而线程进入”运行中状态”，并会去执行同步的代码块，如果在没加如二次判空的话，就会导致系统中存在多个实例，而在进行判空后，即使你获取到了锁，但在执行同步代码块时也会直接跳过。</p><p>竟锁池(锁池)的概念：<a href="https://blog.csdn.net/qq_22498277/article/details/82184419" target="_blank" rel="noopener">Java中的锁池和等待池</a></p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本查询服务器的cpu、内存、磁盘的使用率</title>
      <link href="/2020/02/07/search_cpu_memery_disk_byShell/"/>
      <url>/2020/02/07/search_cpu_memery_disk_byShell/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>使用shell脚本查询服务器的cpu、内存、磁盘的使用率；如果需要对此脚本进行理解的话，请首先熟悉下<a href="https://blog.csdn.net/feichitianxia/article/details/103088793" target="_blank" rel="noopener">linux的基本命令和管道符的知识</a>。</p></blockquote><h2 id="脚本献上："><a href="#脚本献上：" class="headerlink" title="脚本献上："></a>脚本献上：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#计算cpu使用率, -n number：指定在结束前应该产生的最大迭代次数或帧数,一般迭代次数越大，获取到的cpu使用率越准确; 本脚本中是迭代了5次，"-n5" </span></span><br><span class="line">cpu=`top <span class="literal">-b</span> <span class="literal">-n5</span> | fgrep <span class="string">"Cpu(s)"</span> | tail <span class="literal">-1</span> | awk <span class="operator">-F</span><span class="string">'id,'</span> <span class="string">'&#123;split($1, vs, ","); v=vs[length(vs)]; sub(/\s+/, "", v);sub(/\s+/, "", v); printf "%d", 100-v;&#125;'</span>`</span><br><span class="line">echo <span class="variable">$cpu</span><span class="string">'%'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#统计内存使用率</span></span><br><span class="line">mem_used_persent=`free <span class="literal">-m</span> | awk <span class="operator">-F</span> <span class="string">'[ :]+'</span> <span class="string">'NR==2&#123;printf "%d", ($3)/$2*100&#125;'</span>`</span><br><span class="line"><span class="comment"># -e参数是使 "\n"换行符生效进行输出换行的</span></span><br><span class="line">echo <span class="literal">-e</span> <span class="variable">$mem_used_persent</span><span class="string">'%\n'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#统计磁盘使用情况，df -P参数可以防止打印输出的内容换行</span></span><br><span class="line">df <span class="literal">-THP</span> | awk <span class="operator">-F</span> <span class="string">'[ ]+'</span> <span class="string">'NR!=1&#123;print $1","$6&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p>12%<br>37%</p><p>/dev/mapper/vg_minghui-lv_root,25%<br>tmpfs,1%<br>/dev/sda1,10%<br>/dev/sr0,100%</p><p>前两行的内容：12% - cpu的使用率， 37% - 内存的使用率；</p><p>后面四行的内容：每个磁盘分区的使用率，磁盘分区名称和其使用率之间用英文逗号隔开。</p><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><blockquote><p>在脚本编写好，且运行前，可以先使用命令<font color=red>  bash &nbsp;  -n  &nbsp;  *.sh  </font> 判断下脚本是否存在语法错误，如果存在语法错误的话，再使用命令 <font color=red> bash  &nbsp; -x   &nbsp; *.sh  </font> 一步步执行脚本看下到底哪个地方存在语法错误。</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo测试</title>
      <link href="/2020/01/19/HelloWorld/"/>
      <url>/2020/01/19/HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>测试：Hello ，欢迎来到java的海洋。</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
