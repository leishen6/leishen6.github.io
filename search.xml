<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java使用Trie树算法实现敏感词替过滤、根据关键词自动联想</title>
      <link href="/2020/03/18/Java_Impl_Trie/"/>
      <url>/2020/03/18/Java_Impl_Trie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Trie树也称为字典树、单词查找树，最大的特点就是共享字符串的公共前缀来达到节省空间的目的了。<br>然后可以根据它的公共前缀的特性来实现敏感词过滤、自动联想等功能。</p></blockquote><h2 id="抽象出trie树的数据结构："><a href="#抽象出trie树的数据结构：" class="headerlink" title="抽象出trie树的数据结构："></a>抽象出trie树的数据结构：</h2><p>1、首先来看下trie树的结构图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDIwMDMxODE0NTkwOS5wbmc?x-oss-process=image/format,png" alt=""><br><strong>从上图可以归纳出Trie树的基本性质：</strong><br>①根节点不包含字符，除根节点外的每一个子节点都包含一个字符。<br>②从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。<br>③每个节点的所有子节点包含的字符互不相同。<br>④从第一字符开始有连续重复的字符只占用一个节点，比如上面的to，和ten，中重复的单词t只占用了一个节点</p><p><strong>从上面归纳出的基本性质可以抽象出节点的class属性：</strong><br>1、是否为叶子节点的标志位  <span style="color:blue"><strong>isWord</strong></span> ；<br>2、既能存储此节点的值也能存储其所有的子节点的 <span style="color:blue"><strong>children</strong></span> 数据结构HashMap；</p><h2 id="代码奉上："><a href="#代码奉上：" class="headerlink" title="代码奉上："></a>代码奉上：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lyl.trie;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Node</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: trie树的节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"><span class="comment">// 节点是否为叶子节点的标志；true：叶子节点，false：非叶子节点（用于子节点的节点）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> isWord;</span><br><span class="line"><span class="comment">// 当前节点拥有的孩子节点，使用hashmap进行存储，在查找子节点时的时间复杂度为O(1)</span></span><br><span class="line"><span class="keyword">public</span> HashMap&lt;Character, Node&gt; children;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">boolean</span> isWord)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isWord = isWord;</span><br><span class="line"><span class="keyword">this</span>.children = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// trie树的根节点</span></span><br><span class="line"><span class="keyword">private</span> Node root;</span><br><span class="line"><span class="comment">// trie树中拥有多少分枝（多少个敏感词）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.root = <span class="keyword">new</span> Node();</span><br><span class="line"><span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 返回trie树中分枝树（敏感词树）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 向trie树中添加分枝/敏感词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> *            添加的敏感词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBranchesInTrie</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 设置当前节点为根节点</span></span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : words) &#123;</span><br><span class="line"><span class="comment">// 判断当前节点的子节点中是否存在字符c</span></span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(c)) &#123;</span><br><span class="line"><span class="comment">// 如果不存在则将其添加进行子节点中</span></span><br><span class="line">cur.children.put(c, <span class="keyword">new</span> Node());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前节点进行变换，变换为新插入到节点 c</span></span><br><span class="line">cur = cur.children.get(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分枝添加完成后，将分枝中的最后一个节点设置为叶子节点</span></span><br><span class="line"><span class="keyword">if</span> (!cur.isWord) &#123;</span><br><span class="line">cur.isWord = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 分枝数（敏感词数）加1</span></span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断trie树中是否存在某分枝/敏感词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : words) &#123;</span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(c)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.children.get(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果存在并且遍历到trie树中某个分支最后一个节点了，那此节点就是叶子节点，直接返回true</span></span><br><span class="line"><span class="keyword">return</span> cur.isWord;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 如果一段话中有trie树中存储的敏感词则需将其进行替换为 **; 例如：尼玛的，替换为 **的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> *            一段话，如果有敏感词需要被替换的词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sensitiveWordReplace</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"敏感词替换前："</span> + word);</span><br><span class="line"> </span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line"><span class="comment">// 需要被替换的敏感词</span></span><br><span class="line">StringBuilder oldTemp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 需要替换成的星号</span></span><br><span class="line">StringBuilder starTemp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : words) &#123;</span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(c)) &#123;</span><br><span class="line"><span class="comment">// 如果当前节点的孩子节点中没有此单词则直接跳过此循环，进入下次循环</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cur.isWord) &#123;</span><br><span class="line"><span class="comment">// 拼接上word和trie树都有的字符</span></span><br><span class="line">oldTemp.append(c);</span><br><span class="line">starTemp.append(<span class="string">"*"</span>);</span><br><span class="line">cur = cur.children.get(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cur.isWord) &#123;</span><br><span class="line"><span class="comment">// 进行敏感词替换</span></span><br><span class="line">word = word.replaceAll(oldTemp.toString(), starTemp.toString());</span><br><span class="line"><span class="comment">// 清空StringBuilder中内容</span></span><br><span class="line">oldTemp.delete(<span class="number">0</span>, oldTemp.length());</span><br><span class="line">starTemp.delete(<span class="number">0</span>, starTemp.length());</span><br><span class="line"><span class="comment">// 查找一个敏感词并替换后，需要重新从根节点进行遍历，所以当前节点指向root</span></span><br><span class="line">cur = root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"敏感词替换后："</span> + word);</span><br><span class="line"><span class="keyword">return</span> word;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 存放trie树中查询到的联想词</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 利用trie的公共前缀特性，可以实现关键词自动联想</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prefixMatching</span><span class="params">(String word, Node root)</span> </span>&#123;</span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">char</span>[] words = word.toCharArray();</span><br><span class="line">StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">str.append(word);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; words.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!cur.children.containsKey(words[i])) &#123;</span><br><span class="line">System.out.println(<span class="string">"无关联词！"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur.children.get(words[i]);</span><br><span class="line">&#125;</span><br><span class="line">dfs(str, cur);</span><br><span class="line">System.out.println(<span class="string">"[ "</span> + word + <span class="string">" ]在trie树中的联想词："</span> + Arrays.toString(list.toArray()));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 节点遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment"> *            需要查找的词</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment"> *            开始遍历的根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(StringBuilder word, Node root)</span> </span>&#123;</span><br><span class="line">Node cur = root;</span><br><span class="line"><span class="keyword">if</span> (cur.isWord) &#123;</span><br><span class="line">list.add(word.toString());</span><br><span class="line"><span class="keyword">if</span> (cur.children.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Character s : cur.children.keySet()) &#123;</span><br><span class="line">word.append(s);</span><br><span class="line"><span class="comment">// 递归调用</span></span><br><span class="line">dfs(word, cur.children.get(s));</span><br><span class="line">word.delete(word.length() - <span class="number">1</span>, word.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Trie t = <span class="keyword">new</span> Trie();</span><br><span class="line"><span class="comment">// 插入敏感词</span></span><br><span class="line">t.addBranchesInTrie(<span class="string">"麻痹"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"尼玛的"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"狗日的"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 插入联想词</span></span><br><span class="line">t.addBranchesInTrie(<span class="string">"联想云科技"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"联盟"</span>);</span><br><span class="line">t.addBranchesInTrie(<span class="string">"联和利泰扩招了"</span>);</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">"trie树中分枝的个数："</span> + t.size);</span><br><span class="line"> </span><br><span class="line">String word = <span class="string">"尼玛的"</span>;</span><br><span class="line">System.out.println(<span class="string">"Trie树中是否存在[ "</span> + word + <span class="string">" ]敏感词: "</span> + t.contains(word));</span><br><span class="line"><span class="comment">// 敏感词替换测试</span></span><br><span class="line">t.sensitiveWordReplace(<span class="string">"衮，尼玛的傻子，你麻痹的，你各狗日的，早晚揍死你。"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// trie树实现联想测试</span></span><br><span class="line">t.prefixMatching(<span class="string">"联"</span>, t.root);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码运行输出："><a href="#代码运行输出：" class="headerlink" title="代码运行输出："></a>代码运行输出：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">trie树中分枝的个数：<span class="number">6</span></span><br><span class="line">Trie树中是否存在[ 尼玛的 ]敏感词: <span class="keyword">true</span></span><br><span class="line">敏感词替换前：衮，尼玛的傻子，你麻痹的，你各狗日的，早晚揍死你。</span><br><span class="line">敏感词替换后：衮，***傻子，你**的，你各***，早晚揍死你。</span><br><span class="line">[ 联 ]在trie树中的联想词：[联想云科技, 联和利泰扩招了, 联盟]</span><br></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p>1、<a href="https://blog.csdn.net/m0_37907797/article/details/103272967" target="_blank" rel="noopener">【图解算法面试】记一次面试：说说游戏中的敏感词过滤是如何实现的？</a><br>2、 <a href="https://blog.csdn.net/u013309870/article/details/71081393?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">前缀树（Trie）原理及Java实现</a><br>3、<a href="https://blog.csdn.net/Nino_sama/article/details/100981325?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">Trie树（字典树/前缀树）Java实现</a><br>4、<a href="https://www.wmathor.com/index.php/archives/1185/" target="_blank" rel="noopener">Trie 树实现搜索引擎自动联想 </a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构+算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中三目运算符的复杂使用方法</title>
      <link href="/2020/03/06/three_eys_complexUse/"/>
      <url>/2020/03/06/three_eys_complexUse/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Java中三目运算符的复杂用法，让程序看起来更加简洁，但是代码易读性会降低。大家根据实际情况使用哟！</p></blockquote><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: ThreeEyeTest </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 好,你来了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>`s blog: https://leishen6.github.io/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeEyeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 三目运算符的简单使用</span></span><br><span class="line">    String simple = i==<span class="number">10</span>?<span class="string">"true"</span>:<span class="string">"false"</span>;</span><br><span class="line">    System.out.println(simple);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 三木运算符的复杂使用</span></span><br><span class="line">    String complex = i==<span class="number">1</span>?<span class="string">"a1"</span>:(i==<span class="number">2</span>?<span class="string">"a2"</span>:(i==<span class="number">3</span>?<span class="string">"a3"</span>:(i==<span class="number">10</span>?<span class="string">"a4"</span>:<span class="string">"a5"</span>)));</span><br><span class="line">    </span><br><span class="line">    System.out.println(complex);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>end</strong>—————————————————–</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三目运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的位运算符</title>
      <link href="/2020/02/29/Java_run_operator/"/>
      <url>/2020/02/29/Java_run_operator/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>位运算符比一般的算术运算符速度要</strong>快，而且可以实现一些算术运算符不能实现的功能。如果要开发高效率程序，位运算符是必不可少的 。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;位运算符用来对二进制位进行操作，包括：按位与（&amp;）、按位或（|）、按位异或（^）、按位取反（~）、按位左移（&lt;&lt;）、按位右移（&gt;&gt;）、按位无符号右移（&gt;&gt;&gt;）。</p></blockquote><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p><strong>例子：指定 A = 60（0011 1100）; B = 13 （0000 1101）</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9JbWFnZS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy93ZWlodW8ucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy95aWh1by5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9mYW4ucG5n?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy96dW95aS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy95b3V5aS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9ub3lvdXlpLnBuZw?x-oss-process=image/format,png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六大工具让你飞起，就问你它香不香！嘿嘿......</title>
      <link href="/2020/02/28/six_tool_fly/"/>
      <url>/2020/02/28/six_tool_fly/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>六大工具让你工作更加顺畅，生活更加甜蜜，快来瞅瞅并收藏哟！括弧(收藏不看系列不也挺香的呀，嘿嘿…..)</p></blockquote><h2 id="工具展示："><a href="#工具展示：" class="headerlink" title="工具展示："></a>工具展示：</h2><h5 id="1-印象笔记"><a href="#1-印象笔记" class="headerlink" title="1. 印象笔记"></a>1. 印象笔记</h5><p>这是一个记笔记的软件，肥肠好用，我从大学开始一直用到现在，现在推荐给大家；</p><p>注册的免费用户可以同时在两个终端进行登录，本人平时在笔记本、手机同时登录着，如果需要查询笔记看，可以拿起手机来就查询，你说它香不香，嘿嘿。</p><p>如果大家感觉同时两个终端登录还不够的话，例如有的大佬，需要在自己的台式机、mac本、平板、手机都同时登陆的话，那咱花钱升级账户，咱不差钱呢，哼！<br>[更多功能大家自己去探索哟。] &nbsp;&nbsp; 网址：<a href="https://www.yinxiang.com/" target="_blank" rel="noopener">https://www.yinxiang.com/</a></p><p><strong>上图：</strong> PC端软件长这个样，手机端大家可以自己去下载瞅瞅，反正挺香的！<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy95aW54aWFuZy5wbmc?x-oss-process=image/format,png" alt=""></p><h5 id="2-Beyond-Compare-4"><a href="#2-Beyond-Compare-4" class="headerlink" title="2. Beyond Compare 4"></a>2. Beyond Compare 4</h5><p>Beyond Compare 4 主要用途是对比两个文件夹或者文件，并将差异以颜色标示。<br>其实它也可以用来进行比较两个版本不同的项目（指同一个项目，但是版本号不同）， 将其快速进行代码同步。</p><p>注：此软件有30天试用期的，大家可以在网上找些破解教程，很多的。</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="http://www.scootersoftware.com/download.php" target="_blank" rel="noopener">http://www.scootersoftware.com/download.php</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9iZXlvbmQucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="3-JMeter"><a href="#3-JMeter" class="headerlink" title="3. JMeter"></a>3. JMeter</h5><p>Apache JMeter是Apache组织开发的基于Java的压力测试工具，用于对软件做压力测试。</p><p>JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能；完全的可移植性和100% 纯java。</p><p>之前自己写了个监控系统，需要监控服务器的使用情况，后面就是使用的 JMeter 压服务器来得到监控数据的。括弧（后面会写一篇文章：java实现监控系统，敬请期待哟！）</p><p>最后再附上一份JMeter 的详细使用教程：<a href="https://www.cnblogs.com/testwjr/p/9156705.html" target="_blank" rel="noopener">https://www.cnblogs.com/testwjr/p/9156705.html</a>  </p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9qbWV0ZXIucG5n?x-oss-process=image/format,png" alt=""></p><h5 id="4-阿里巴巴矢量图标"><a href="#4-阿里巴巴矢量图标" class="headerlink" title="4. 阿里巴巴矢量图标"></a>4. 阿里巴巴矢量图标</h5><p>Iconfont-阿里巴巴矢量图标：国内功能很强大且图标内容很丰富的矢量图标库,提供矢量图标下载、在线存储、格式转换等功能。</p><p>这对于前端攻城狮来说是非常棒的，并且对于我们全栈攻城狮也是不可或缺的。因为开发软件时经常会需要一些图标，如果自己制作的话耗时耗力；在知道了矢量图标库后，自己就可以直接去里面找符合自己心意的，省时省力，你说它不香吗，嘿嘿。</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">https://www.iconfont.cn/</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9pY29uMS5wbmc?x-oss-process=image/format,png" alt=""><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9pY29uMi5wbmc?x-oss-process=image/format,png" alt=""></p><p>例如，本人的<a href="https://leishen6.github.io/">个人博客</a>中有很多图标就是从其中找的，我感觉挺香的呀！嘿嘿……  </p><p><strong>来来上图：</strong> (图中画圈的都是啊，大家看看香不香。)：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9ibG9nLnBuZw?x-oss-process=image/format,png" alt=""></p><h5 id="5-比特虫-在线制作ico图标"><a href="#5-比特虫-在线制作ico图标" class="headerlink" title="5. 比特虫 在线制作ico图标"></a>5. 比特虫 在线制作ico图标</h5><p>接下来，再介绍一个肥肠棒的<strong>在线制作ico图标</strong>的网站”<strong>比特虫</strong>“，它可将png、jpg等后缀的图片转为ico的图标。注意：在进行转化前选好图标的尺寸哟。大家可以去试试，我感觉挺香的，嘿嘿！</p><p>[更多功能大家自己去探索哟。]&nbsp;&nbsp; 网址：<a href="http://www.bitbug.net/" target="_blank" rel="noopener">http://www.bitbug.net/</a></p><p><strong>上图：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9iaXRjaG9uZy5wbmc?x-oss-process=image/format,png" alt=""></p><h5 id="6-processon-在线画图工具"><a href="#6-processon-在线画图工具" class="headerlink" title="6. processon 在线画图工具"></a>6. processon 在线画图工具</h5><p>processon 这个在线画图工具在我上大学时就使用的，我感觉它也是非常棒的，大家先瞅瞅它的官网；<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9wcm9jZXNzT24ucG5n?x-oss-process=image/format,png" alt=""><br>上大学时，在<strong>Java实现爬虫</strong>的项目中使用 <strong>processon</strong> 画的流程图等，给大家瞅瞅，看看可以吗？</p><p><strong>先上第一张图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9jcmF3bGVyX2ltZzEucG5n?x-oss-process=image/format,png" alt=""></p><p><strong>来来第二张图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9jcmF3bGVyX2ltZzIucG5n?x-oss-process=image/format,png" alt=""></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><blockquote><p>暂时就这些了，如果以后再遇到更好的工具时，会立即分享给大家，使我们大家工作顺畅，生活甜蜜！嘿嘿…..</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么数据脱敏及其实现方式</title>
      <link href="/2020/02/25/data_desensitization/"/>
      <url>/2020/02/25/data_desensitization/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据脱敏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高并发核心技术-幂等实现方案</title>
      <link href="/2020/02/25/power_etc/"/>
      <url>/2020/02/25/power_etc/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>柔性事务与传统事务</title>
      <link href="/2020/02/25/flexible_transaction/"/>
      <url>/2020/02/25/flexible_transaction/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库分库分表策略，如何分库，如何分表？</title>
      <link href="/2020/02/24/DB_Sharding_Strategy/"/>
      <url>/2020/02/24/DB_Sharding_Strategy/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全网最全redis学习脑图</title>
      <link href="/2020/02/21/redis_learn_mind_map/"/>
      <url>/2020/02/21/redis_learn_mind_map/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>本文为<span style="color:#2BFA05;"><strong>转载文章</strong></span>，转自一个<a href="https://blog.csdn.net/qq_35190492/category_9606008.html" target="_blank" rel="noopener">大佬</a>。分享一个全网最全的redis学习脑图。</p></blockquote><h2 id="redis脑图："><a href="#redis脑图：" class="headerlink" title="redis脑图："></a>redis脑图：</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy9SZWRpcyVFNSVBRCVBNiVFNCVCOSVBMCVFOCU4NCU5MSVFNSU5QiVCRS5qcGc?x-oss-process=image/format,png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 非关系数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现使用 _DESede_ 对称加密的 加解密工具类</title>
      <link href="/2020/02/18/java_imp_DESede_%20util/"/>
      <url>/2020/02/18/java_imp_DESede_%20util/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>Java实现 “DESede” 对称加密；</p></blockquote><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><blockquote><p>在代码运行前，需要提前将一个依赖导入到项目中 pom.xml 中，使用这个依赖中的base64进行编解码；</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- base64编码使用 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;commons-codec&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-codec&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DESedeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 密钥算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ALGORITHM = <span class="string">"DESede"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密/解密算法 / 工作模式 / 填充方式</span></span><br><span class="line"><span class="comment"> * Java 6支持PKCS5Padding填充方式</span></span><br><span class="line"><span class="comment"> * Bouncy Castle支持PKCS7Padding填充方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIPHER_ALGORITHM = <span class="string">"DESede/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 生成密钥, 返回168位的密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//实例化密钥生成器</span></span><br><span class="line">KeyGenerator kg = KeyGenerator.getInstance(KEY_ALGORITHM);</span><br><span class="line"><span class="comment">//DESede 要求密钥长度为 112位或168位</span></span><br><span class="line">kg.init(<span class="number">168</span>);</span><br><span class="line"><span class="comment">//生成密钥</span></span><br><span class="line">SecretKey secretKey = kg.generateKey();</span><br><span class="line"><span class="comment">//获得密钥的字符串形式</span></span><br><span class="line"><span class="keyword">return</span> Base64.encodeBase64String(secretKey.getEncoded());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: DES进行加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source 待加密的原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key  加密时使用的 密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>   返回经过base64编码的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String source, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] sourceBytes = source.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = Base64.decodeBase64(key);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.ENCRYPT_MODE,<span class="keyword">new</span> SecretKeySpec(keyBytes, KEY_ALGORITHM));</span><br><span class="line">    <span class="keyword">byte</span>[] decrypted = cipher.doFinal(sourceBytes);</span><br><span class="line">    <span class="keyword">return</span> Base64.encodeBase64String(decrypted);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:  DES解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptStr  DES加密后的再经过base64编码的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  加密使用的密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回 utf-8 编码的明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String encryptStr, String key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] sourceBytes = Base64.decodeBase64(encryptStr);</span><br><span class="line"><span class="keyword">byte</span>[] keyBytes = Base64.decodeBase64(key);</span><br><span class="line">    Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);</span><br><span class="line">    cipher.init(Cipher.DECRYPT_MODE,<span class="keyword">new</span> SecretKeySpec(keyBytes, KEY_ALGORITHM));</span><br><span class="line">    <span class="keyword">byte</span>[] decoded = cipher.doFinal(sourceBytes);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(decoded, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 生成秘钥</span></span><br><span class="line">        String key = generateKey();</span><br><span class="line">        System.out.println(<span class="string">"秘钥："</span>+key);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        String encryptStr = encrypt(<span class="string">"hello"</span>, key);</span><br><span class="line">        System.out.println(<span class="string">"密文："</span>+ encryptStr);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        String resource = decrypt(encryptStr, key);</span><br><span class="line">        System.out.println(<span class="string">"明文："</span>+ resource);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"校验："</span>+ <span class="string">"hello"</span>.equals(resource));</span><br><span class="line">        </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 加密算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 amcharts.js 实现立体柱状图</title>
      <link href="/2020/02/15/imp_histogram_byAmcharts/"/>
      <url>/2020/02/15/imp_histogram_byAmcharts/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p> 本文章将使用<span style="color:red;"> <strong>amcharts.js</strong> </span>实现立体柱状图，以下代码中的js库是直接引入网络中的js文件，所以代码拷贝下来是可以直接运行的。</p></blockquote><h2 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL2xlaXNoZW42L0ltZ0hvc3RpbmcvTXVaaUxlaV9ibG9nX2ltZy8yMDE5MTIxODE0MTYyNjUzOC5wbmc?x-oss-process=image/format,png" alt=""></p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;立体柱状图&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 立体柱状图 --&gt;</span><br><span class="line">&lt;script src="https://www.amcharts.com/lib/3/amcharts.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src="https://www.amcharts.com/lib/3/serial.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">     &lt;div id=<span class="string">"car3"</span> style=<span class="string">"text-align:center;width:440px;height:180px;"</span>&gt;</span><br><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;      </span><br><span class="line"> <span class="keyword">var</span> chartData = [&#123; country: <span class="string">"订单未确定"</span>, visits: <span class="number">50</span> , <span class="string">"color"</span>: <span class="string">"#067ADD"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单已确定"</span>, visits: <span class="number">166</span> , <span class="string">"color"</span>: <span class="string">"#FA0606"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单已处理"</span>, visits: <span class="number">26</span>  , <span class="string">"color"</span>: <span class="string">"#14EF06"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单完成"</span>, visits: <span class="number">80</span> , <span class="string">"color"</span>: <span class="string">"#F802BC"</span>&#125;,</span><br><span class="line"> &#123; country: <span class="string">"订单已发货"</span>, visits: <span class="number">56</span> , <span class="string">"color"</span>: <span class="string">"#0FFBF9"</span>&#125;,</span><br><span class="line">   ];</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> chart = <span class="keyword">new</span> AmCharts.AmSerialChart();</span><br><span class="line"> chart.dataProvider = chartData;</span><br><span class="line"> chart.categoryField = <span class="string">"country"</span>;<span class="comment">//获取"chartData"中的文本内容</span></span><br><span class="line"> chart.color = <span class="string">"#4C4CFD"</span>; <span class="comment">//标题颜色（x、y轴的字体颜色）</span></span><br><span class="line"> chart.startDuration = <span class="number">2</span>;  <span class="comment">//动画特效 延迟时间 秒  </span></span><br><span class="line"> chart.columnWidth = <span class="number">0.4</span>; <span class="comment">//柱状图宽度</span></span><br><span class="line"> chart.depth3D = <span class="number">8</span>;<span class="comment">//3D厚度</span></span><br><span class="line"> chart.angle = <span class="number">30</span>;</span><br><span class="line"> chart.depth3D = <span class="number">15</span>;<span class="comment">//控制列的深度和角度</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> categoryAxis = chart.categoryAxis;</span><br><span class="line"> categoryAxis.gridColor = <span class="string">"#067ADD"</span>; <span class="comment">//网格线颜色</span></span><br><span class="line"> categoryAxis.axisColor = <span class="string">"#067ADD"</span>;  <span class="comment">//横坐标轴颜色</span></span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> valueAxis = <span class="keyword">new</span> AmCharts.ValueAxis();  <span class="comment">//纵坐标轴</span></span><br><span class="line"> valueAxis.axisColor = <span class="string">"#067ADD"</span>;  <span class="comment">//纵坐标轴轴线的颜色</span></span><br><span class="line"> chart.addValueAxis(valueAxis);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">var</span> graph = <span class="keyword">new</span> AmCharts.AmGraph();</span><br><span class="line"> graph.valueField = <span class="string">"visits"</span> ; <span class="comment">//获取"chartData"中的数量</span></span><br><span class="line"> graph.colorField = <span class="string">"color"</span>;<span class="comment">//获取"chartData"中的配置颜色</span></span><br><span class="line"> <span class="comment">//graph.lineColor = "#067ADD";//柱状图的颜色,这里是全部设置成为统一 #067ADD 颜色</span></span><br><span class="line"> <span class="comment">//graph.topRadius = 1;   //设置为椭圆柱体,默认是长方形柱体</span></span><br><span class="line"> graph.lineAlpha = <span class="number">0.1</span>;</span><br><span class="line"> graph.fillAlphas = <span class="number">0.85</span>;</span><br><span class="line"> graph.type = <span class="string">"column"</span>;<span class="comment">//柱形，也可是设置为 line 折线图等</span></span><br><span class="line"> chart.addGraph(graph);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> graph.fillAlphas = <span class="number">1</span>;<span class="comment">//填充柱形图的颜色</span></span><br><span class="line"> graph.balloonText = <span class="string">"&lt;b&gt;[[category]]: [[value]] 单&lt;/b&gt;"</span>;<span class="comment">//鼠标悬浮时展示数据的格式</span></span><br><span class="line"> </span><br><span class="line"> chart.write(<span class="string">'car3'</span>); <span class="comment">//将js写入到div容器中</span></span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试手写HashMap，手撕HashMap</title>
      <link href="/2020/02/12/interview_Implement_HashMap/"/>
      <url>/2020/02/12/interview_Implement_HashMap/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>现在面试时，面试官经常会问到HashMap，简单点就会问下HashMap的一些关键知识点，困难些的可能会当场让你手写一个HashMap，考察下你对HashMap底层原理的了解深度；所以，今天特别手写了一个简单的HashMap，只实现了<span style="color:red;"> put、get、containsKey、keySet </span>方法的 HashMap，来帮助我们理解HashMap的底层设计原理。<br>本文参考：<a href="https://blog.csdn.net/huangshulang1234/article/details/79713303" target="_blank" rel="noopener">手写实现一个HashMap</a></p></blockquote><h2 id="手撕HashMap："><a href="#手撕HashMap：" class="headerlink" title="手撕HashMap："></a>手撕HashMap：</h2><h4 id="1-首先定义接口："><a href="#1-首先定义接口：" class="headerlink" title="1. 首先定义接口："></a>1. 首先定义接口：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Title</span>: MyMap </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义map接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午3:56:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 插入键值对方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午3:59:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k,V v)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:根据key获取value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午3:59:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断key键是否存在</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k  key键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午4:07:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(K k)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取map集合中所有的key，并放入set集合中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午4:24:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt;  <span class="title">keySet</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------内部接口 Entry（存放key-value）---------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Enter </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 定义内部接口 Entry，存放键值对的Entery接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午4:00:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取key方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午4:02:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:获取value方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午4:02:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-接口实现类："><a href="#2-接口实现类：" class="headerlink" title="2. 接口实现类："></a>2. 接口实现类：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Title</span>: MyHashMap </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:   MyMap接口的实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午4:04:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(value=&#123;<span class="string">"unchecked"</span>,<span class="string">"rawtypes"</span>,<span class="string">"hiding"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">MyMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entry数组的默认初始化长度为16；通过位移运算向左移动四位，得到二进制码 "00010000",转换为十进制是16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负载因子默认为0.75f；负载因子是用来标志当使用容量占总容量的75%时，就需要扩充容量了，</span></span><br><span class="line"><span class="comment"> * 扩充Entry数组的长度为原来的两倍，并且重新对所存储的key-value键值对进行散列。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可设置的初始容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> defaultInitSize;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 可设置的负载因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> defaultLoadFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前已存入的元素的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> entryUseSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存放key-value键值对对象的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry&lt;K, V&gt;[] table = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造，数组初始大小为16，负载因子大小为0.75f</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">MyHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有参构造，自己设置数组初始大小和负载因子大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultInitialCapacity  数组初始大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultLoadFactor2    负载因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyHashMap</span><span class="params">(<span class="keyword">int</span> defaultInitialCapacity, <span class="keyword">float</span> defaultLoadFactor2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断初始容量参数是否合法</span></span><br><span class="line"><span class="keyword">if</span> (defaultInitialCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//抛出非法参数异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"输入的初始容量参数是非法的  ："</span>+defaultInitialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断负载因子参数是否合法，Float.isNaN()方法是判断数据是否符合 0.0f/0.0f</span></span><br><span class="line"><span class="keyword">if</span> (defaultLoadFactor2 &lt; <span class="number">0</span> || Float.isNaN(defaultLoadFactor2)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"输入的负载因子参数是非法的  ："</span>+defaultLoadFactor2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.defaultInitSize = defaultInitialCapacity;</span><br><span class="line"><span class="keyword">this</span>.defaultLoadFactor = defaultLoadFactor2;</span><br><span class="line"><span class="comment">//初始化数组</span></span><br><span class="line">table = <span class="keyword">new</span> Entry[<span class="keyword">this</span>.defaultInitSize];</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 集合中的put方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> v</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如是更新则返回key的旧value值，如是插入新的key-value则返回null</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午6:29:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K k, V v)</span> </span>&#123;</span><br><span class="line">V oldValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//是否需要扩容？</span></span><br><span class="line"><span class="comment">//扩容完毕后一定会需要重新进行散列</span></span><br><span class="line"><span class="keyword">if</span> (entryUseSize &gt;= defaultInitSize * defaultLoadFactor) &#123;</span><br><span class="line"><span class="comment">//扩容并重新散列,扩容为原来的两倍</span></span><br><span class="line">resize(<span class="number">2</span> * defaultInitSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据key获取的HASH值、数组长度减1，两者做'与'运算，计算出数组中的位置</span></span><br><span class="line"><span class="keyword">int</span> index = hash(k) &amp; (defaultInitSize -<span class="number">1</span>);</span><br><span class="line"><span class="comment">//如果数组中此下标位置没有元素的话，就直接放到此位置上</span></span><br><span class="line"><span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">table[index] = <span class="keyword">new</span> Entry(k, v, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//总存入元素数量+1</span></span><br><span class="line">++entryUseSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//遍历数组下边的链表</span></span><br><span class="line">Entry&lt;K,V&gt; entry = table[index];</span><br><span class="line">Entry&lt;K,V&gt; e = entry;</span><br><span class="line"><span class="keyword">while</span>(e != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (k == e.getKey() || k.equals(e.getKey())) &#123;</span><br><span class="line">oldValue = e.getValue();</span><br><span class="line"><span class="comment">//key已存在，直接更新value</span></span><br><span class="line">e.value = v;</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数组此下标位置上链表的下个元素</span></span><br><span class="line">e = e.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JDK1.7中的链表头插法，直接占据数组下标位置</span></span><br><span class="line">    table[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(k, v, entry);</span><br><span class="line">    <span class="comment">//总存入元素数量+1</span></span><br><span class="line">    ++entryUseSize;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 根据key获取value值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午6:34:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过hash函数和数组元素容量做  【与】运算得到数组下标</span></span><br><span class="line"><span class="keyword">int</span> index = hash(k) &amp; (defaultInitSize -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//获取到数组下标位置元素</span></span><br><span class="line">Entry&lt;K, V&gt; entry = table[index];</span><br><span class="line">Entry&lt;K, V&gt; e = entry;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (k.equals(e.getKey())) &#123;</span><br><span class="line"><span class="keyword">return</span> e.getValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数组下标位置对应链表中的下一个元素</span></span><br><span class="line">e = e.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (entry != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:扩容并重新将元素进行散列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i  扩容后的大小</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午5:06:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line">Entry&lt;K,V&gt;[] newTable = <span class="keyword">new</span> Entry[size];</span><br><span class="line"><span class="comment">//改变数组的初始大小</span></span><br><span class="line">defaultInitSize = size ;</span><br><span class="line"><span class="comment">//将已存放键值对数量置为0</span></span><br><span class="line">entryUseSize = <span class="number">0</span> ;</span><br><span class="line"><span class="comment">//将已存的元算根据最新的数组的大小进行散列</span></span><br><span class="line">rehash(newTable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重新进行散列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newTable</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午5:10:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(Entry&lt;K, V&gt;[] newTable)</span></span>&#123;</span><br><span class="line">List&lt;Entry&lt;K, V&gt;&gt; entryList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(Entry&lt;K, V&gt; entry : table)&#123;</span><br><span class="line"><span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//将原来数组中的元素放到list集合中</span></span><br><span class="line">entryList.add(entry);</span><br><span class="line"><span class="comment">//如果此数组下标的位置存在链表的话，需要遍历下列表，将列表中的键值对数据取出来放到集合中</span></span><br><span class="line">entry = entry.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (entry != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将旧的数组引用覆盖，让引用指向堆中新开辟的数组</span></span><br><span class="line"><span class="keyword">if</span> (newTable.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">table = newTable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所谓重新的散列hash，就是将元素重新放入到扩容后的集合中</span></span><br><span class="line"><span class="keyword">for</span>(Entry&lt;K, V&gt; entry : entryList)&#123;</span><br><span class="line"><span class="comment">//重新put</span></span><br><span class="line">put(entry.getKey(), entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 根据key获取hashcod码值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月13日 下午5:52:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(K key)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 判断是否存在此key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k  key键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午4:52:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(K k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = hash(k) &amp; (defaultInitSize -<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (table[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//获取到数组下标位置元素</span></span><br><span class="line">Entry&lt;K, V&gt; entry = table[index];</span><br><span class="line">Entry&lt;K, V&gt; e = entry;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (k.equals(e.getKey())) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数组下标位置对应链表中的下一个元素</span></span><br><span class="line">e = e.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 获取map集合所有的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午5:52:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (entryUseSize == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Set&lt;K&gt; entrySet = <span class="keyword">new</span> HashSet&lt;K&gt;();</span><br><span class="line"><span class="keyword">for</span>(Entry&lt;K, V&gt; entry : table)&#123;</span><br><span class="line"><span class="keyword">if</span> (entry != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="comment">//将原来数组中的元素的key放到set集合中</span></span><br><span class="line">entrySet.add(entry.getKey());</span><br><span class="line"><span class="comment">//如果此数组下标的位置存在链表的话，需要遍历下列表，将列表中元素的key取出来放到集合中</span></span><br><span class="line">entry = entry.next;</span><br><span class="line">&#125; <span class="keyword">while</span> (entry != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> entrySet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------------------内部类 Entry（存放key-value）----------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: Entry </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 实现了key-value简直对接口的java类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午6:12:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">MyMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对对象的key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> K key;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对对象的value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span>  V value;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 键值对对象指向下一个键值对对象的指针</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Entry&lt;K, V&gt; next;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无参构造</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">Entry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(K key, V value, Entry&lt;K, V&gt; next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.key = key;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-测试方法："><a href="#3-测试方法：" class="headerlink" title="3. 测试方法："></a>3. 测试方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: TestMyMap</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年7月13日 下午6:49:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyMap</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:单元测试</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *<span class="doctag">@date</span>: 2019年7月23日 下午7:07:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MyMap&lt;String, String&gt; map = <span class="keyword">new</span> MyHashMap&lt;&gt;();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="comment">//插入键值对</span></span><br><span class="line">map.put(<span class="string">"key"</span> + i, <span class="string">"value"</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">System.out.println(<span class="string">"key"</span> + i + <span class="string">",value is："</span> + map.get(<span class="string">"key"</span> + i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据key获取value</span></span><br><span class="line">System.out.println(<span class="string">"\n"</span>+<span class="string">"此key：key88 的value是   "</span>+map.get(<span class="string">"key88"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断key是否存在</span></span><br><span class="line">    System.out.println(map.containsKey(<span class="string">"key885"</span>)+<span class="string">"   此key：key885 不存在！"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取map集合中所有的key</span></span><br><span class="line">    System.out.println(Arrays.toString(map.keySet().toArray()));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    MyMap&lt;String, String&gt; mapOther = <span class="keyword">new</span> MyHashMap&lt;&gt;();</span><br><span class="line">    Set&lt;String&gt; keySet = mapOther.keySet();</span><br><span class="line">    <span class="comment">//获取map集合中所有的key</span></span><br><span class="line">    System.out.println((keySet == <span class="keyword">null</span>)?<span class="keyword">null</span>:Arrays.toString(mapOther.keySet().toArray()));</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo+Zookeeper vs Spring Cloud 之间的比较</title>
      <link href="/2020/02/12/Dubbo_Zookeeper%20_vs_SpringCloud/"/>
      <url>/2020/02/12/Dubbo_Zookeeper%20_vs_SpringCloud/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>目前学习了下Dubbo 和  Spring Cloud，并且在简单学习后，总结了下这两者之间简单的区别；如果以后有需要搭建分布式系统的需求，可以根据这两者之间的区别，再根据当前公司的业务等情况选择最为合适的来搭建自己的分布式系统。</p></blockquote><h2 id="Dubbo-Zookeeper-vs-Spring-Cloud："><a href="#Dubbo-Zookeeper-vs-Spring-Cloud：" class="headerlink" title="Dubbo+Zookeeper   vs   Spring Cloud："></a>Dubbo+Zookeeper   <span style="color:red;"><strong>vs</strong></span>   Spring Cloud：</h2><table><thead><tr><th>框架比较的方面</th><th>Dubbo+Zookeeper</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>性能方面</td><td>Dubbo是阿里巴巴开源的顶级项目，以前是用于阿里巴巴的分布式服务治理框架,其性能毋庸置疑一定是很强的，它适合一些比较大的公司用的分布式服务治理框架。（注：2017年之前阿里巴巴没有对其进行更新维护，但是2017年Dubbo项目官网宣布重新对其进行更新维护，并且在2018年Dubbo项目正式进入了Apache孵化器）</td><td>Spring Cloud是最近才兴起的一个分布式服务框架，现在它的社区十分的火爆，代码的更新迭代十分的快；它一般适合于中小型企业，并且性能比Dubbo低一些；</td></tr><tr><td>具有的特点</td><td>Dubbo有良好的连通性、健壮性、伸缩性、升级性。结合Dubbo可以相对于单体系统提升系统整体的扩展性。<br> Dubbo提供了多种协议给用户选择， 如dubbo、hessian、rmi 。 并可为每个服务指定不同的传输协议，粒度可以细化到方法， 不同服务在性能上适用不同协议进行传输，比如大数据用短连接协议，小数据大并发用长连接协议。</td><td>Spring Cloud来源于Spring，质量、稳定性、持续性都可以得到保证。<br>Spirng Cloud天然支持Spring Boot，更加便于业务落地。<br>Spring Cloud是Java领域最适合做微服务的框架。<br>相比于其它框架,Spring Cloud对微服务周边环境的支持力度最大。</td></tr><tr><td>方便性</td><td>Dubbo使用起来不太方便，由于许多组件其本身不支持，所以我们在搭建架构环境时，需要集成一些其他的开源组件，集成时会遇到种种的困难，并且在以后的项目维护和升级也不方便。<br>Dubbo服务调用的方式是RPC，服务提供方与调用方接口依赖方式太强：我们需要将调用的抽象接口依赖到消费者项目中才能调用服务，这会导致在以后的开发、测试、版本管理上很麻烦。</td><td>pringCloud自身的组件可以搭建成一个完整的微服务架构，并且搭建起来稍微简单一些；<br>SpringCloud调用的方式是REST，REST接口相比RPC更为轻量化，服务提供方和调用方的依赖只是依靠一纸契约，不存在代码级别的强依赖，当然REST接口也有缺点，很容易导致定义文档与实际实现不一致导致服务集成时的问题。</td></tr><tr><td>灵活性</td><td>由于dubbo许多组件都是集成的第三方，所以dubbo组件之间的自由度很高，dubbo更加的灵活。</td><td>SpringCloud自身支持了组件，各个组件之间的关联关系已经配置好了，所以它的灵活度不是很好，如果想要用第三方组件代替其中的一个组件的话会有一些困难。</td></tr><tr><td>服务注册中心</td><td>Zookeeper保证<span style="color:red;">C(一致性)P(分区容错性)</span>。<br>当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30 ~ 120s, 且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。</td><td>Eureka保证<span style="color:red;">A(可用性)P(分区容错性)</span>。<br>Eureka各个节点都是平等的，几个节点挂掉不会影响正常工作。而Eureka的客户端在向某个Eureka注册或时如果发现连接失败，则会自动切换至其它节点，只要有一台Eureka还在，就能保证注册服务可用(保证可用性)，只不过查到的信息可能不是最新的(不保证强一致性)</td></tr><tr><td>代码开发角度</td><td>Dubbo常与Spring、zookeeper结合，而且实现只是通过xml来配置服务地址、名称、端口，代码的侵入性是很小的，可以说几乎没有代码入侵。</td><td>Spring Cloud，由于它的实现需要类注解等，所以多少具有一定代码侵入。</td></tr></tbody></table><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>总的来说这两个搭建分布式系统的框架各有各的好处，在选择时要根据自己的需求等情况综合做选择；<br> 但是Eureka作为单纯的服务注册中心来说感觉要比Zookeeper更加<span style="color:red;">“<strong>专业</strong>”</span>，因为注册服务更重要的是高可用性，可以接受短期内达不到一致性的状况。</p><p> <span style="color:red;"><strong>注：</strong></span>可能此文章中表格内容看起来不太舒服，你还可以参考我在CSDN中的<a href="https://blog.csdn.net/feichitianxia/article/details/92682828" target="_blank" rel="noopener">这篇文章</a>。</p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 集群分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Zookeeper </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现 “ 将数字金额转为大写中文金额 ”</title>
      <link href="/2020/02/09/Java_imp_chinease_monery/"/>
      <url>/2020/02/09/Java_imp_chinease_monery/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>输入数字金额参数，运行程序得到其对应的大写中文金额；例如：输入— 12.56，输出— 12.56:壹拾贰元伍角陆分；重点来了：<span style="color:red;"><strong><em>本人亲测有效</em></strong></span>。</p></blockquote><h2 id="奉上代码："><a href="#奉上代码：" class="headerlink" title="奉上代码："></a>奉上代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@Title</span>: ConvertUpMoney </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:  将数字金额转为大写汉字金额</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2019年6月18日 下午10:52:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertUpMoney</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大写数字</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NUMBERS = &#123;<span class="string">"零"</span>,<span class="string">"壹"</span>,<span class="string">"贰"</span>,<span class="string">"叁"</span>,<span class="string">"肆"</span>,<span class="string">"伍"</span>,<span class="string">"陆"</span>,<span class="string">"柒"</span>,<span class="string">"捌"</span>,<span class="string">"玖"</span>&#125;;</span><br><span class="line"><span class="comment">// 整数部分的单位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] IUNIT = &#123;<span class="string">"元"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>,<span class="string">"万"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>,<span class="string">"亿"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>,<span class="string">"万"</span>,<span class="string">"拾"</span>,<span class="string">"佰"</span>,<span class="string">"仟"</span>&#125;;</span><br><span class="line">    <span class="comment">//小数部分的单位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] DUNIT = &#123;<span class="string">"角"</span>,<span class="string">"分"</span>,<span class="string">"厘"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转成中文的大写金额</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toChinese</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断输入的金额字符串是否符合要求</span></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(str) || !str.matches(<span class="string">"(-)?[\\d]*(.)?[\\d]*"</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">"抱歉，请输入数字！"</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"0"</span>.equals(str) || <span class="string">"0.00"</span>.equals(str) || <span class="string">"0.0"</span>.equals(str)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"零元"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在负号"-"</span></span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span>(str.startsWith(<span class="string">"-"</span>))&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">str = str.replaceAll(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">str = str.replaceAll(<span class="string">","</span>, <span class="string">""</span>);<span class="comment">//去掉","</span></span><br><span class="line">String integerStr;<span class="comment">//整数部分数字</span></span><br><span class="line">String decimalStr;<span class="comment">//小数部分数字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化：分离整数部分和小数部分</span></span><br><span class="line"><span class="keyword">if</span>(str.indexOf(<span class="string">"."</span>)&gt;<span class="number">0</span>) &#123;</span><br><span class="line">integerStr = str.substring(<span class="number">0</span>,str.indexOf(<span class="string">"."</span>));</span><br><span class="line">decimalStr = str.substring(str.indexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(str.indexOf(<span class="string">"."</span>)==<span class="number">0</span>) &#123;</span><br><span class="line">integerStr = <span class="string">""</span>;</span><br><span class="line">decimalStr = str.substring(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">integerStr = str;</span><br><span class="line">decimalStr = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//beyond超出计算能力，直接返回</span></span><br><span class="line"><span class="keyword">if</span>(integerStr.length()&gt;IUNIT.length) &#123;</span><br><span class="line">System.out.println(str+<span class="string">"：超出计算能力"</span>);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] integers = toIntArray(integerStr);<span class="comment">//整数部分数字</span></span><br><span class="line"><span class="comment">//判断整数部分是否存在输入012的情况</span></span><br><span class="line"><span class="keyword">if</span> (integers.length&gt;<span class="number">1</span> &amp;&amp; integers[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"抱歉，请输入数字！"</span>);</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">str = <span class="string">"-"</span>+str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> isWan = isWan5(integerStr);<span class="comment">//设置万单位</span></span><br><span class="line"><span class="keyword">int</span>[] decimals = toIntArray(decimalStr);<span class="comment">//小数部分数字</span></span><br><span class="line">String result = getChineseInteger(integers,isWan)+getChineseDecimal(decimals);<span class="comment">//返回最终的大写金额</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"负"</span>+result;<span class="comment">//如果是负数，加上"负"</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串转为int数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] toIntArray(String number) &#123;</span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[number.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;number.length();i++) &#123;</span><br><span class="line">array[i] = Integer.parseInt(number.substring(i,i+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将整数部分转为大写的金额</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChineseInteger</span><span class="params">(<span class="keyword">int</span>[] integers,<span class="keyword">boolean</span> isWan)</span> </span>&#123;</span><br><span class="line">StringBuffer chineseInteger = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">int</span> length = integers.length;</span><br><span class="line"><span class="keyword">if</span> (length == <span class="number">1</span> &amp;&amp; integers[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">String key = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(integers[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>((length - i) == <span class="number">13</span>)<span class="comment">//万（亿）</span></span><br><span class="line">key = IUNIT[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((length - i) == <span class="number">9</span>) &#123;<span class="comment">//亿</span></span><br><span class="line">key = IUNIT[<span class="number">8</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((length - i) == <span class="number">5</span> &amp;&amp; isWan) &#123;<span class="comment">//万</span></span><br><span class="line">key = IUNIT[<span class="number">4</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((length - i) == <span class="number">1</span>) &#123;<span class="comment">//元</span></span><br><span class="line">key = IUNIT[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((length - i)&gt;<span class="number">1</span> &amp;&amp; integers[i+<span class="number">1</span>]!=<span class="number">0</span>) &#123;</span><br><span class="line">key += NUMBERS[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">chineseInteger.append(integers[i]==<span class="number">0</span>?key:(NUMBERS[integers[i]]+IUNIT[length - i -<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chineseInteger.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将小数部分转为大写的金额</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getChineseDecimal</span><span class="params">(<span class="keyword">int</span>[] decimals)</span> </span>&#123;</span><br><span class="line">StringBuffer chineseDecimal = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;decimals.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">chineseDecimal.append(decimals[i]==<span class="number">0</span>?<span class="string">""</span>:(NUMBERS[decimals[i]]+DUNIT[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chineseDecimal.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断当前整数部分是否已经是达到【万】</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isWan5</span><span class="params">(String integerStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> length = integerStr.length();</span><br><span class="line"><span class="keyword">if</span>(length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">String subInteger = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span>(length &gt; <span class="number">8</span>) &#123;</span><br><span class="line">subInteger = integerStr.substring(length- <span class="number">8</span>,length -<span class="number">4</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">subInteger = integerStr.substring(<span class="number">0</span>,length - <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(subInteger) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String number = <span class="string">"12.56"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"1234567890563886.123"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"1600"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"156,0"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"-156,0"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"0.12"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"0.0"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"01.12"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"0125"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"-0125"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">number = <span class="string">"sdw5655"</span>;</span><br><span class="line">System.out.println(number+<span class="string">": "</span>+ConvertUpMoney.toChinese(number));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">null</span>+<span class="string">": "</span>+ConvertUpMoney.toChinese(<span class="keyword">null</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加个彩蛋："><a href="#加个彩蛋：" class="headerlink" title="加个彩蛋："></a>加个彩蛋：</h2><blockquote><p>本人在平时的学习中，还看到了一个十分有用的工具包，这个工具包中含有一个类型转换的方法，可以实现“ 金额的大小写 ”，但是这个工具包也有一些局限，“ 转换为大写只能精确到分（<span style="color:red;"><strong>小数点儿后两位</strong></span>），之后的数字会被忽略 ”；这个工具包叫“ <span style="color:red;"><strong>Hutool</strong></span> ”，学习地址：<a href="https://www.hutool.cn/docs/#/core/类型转换/类型转换工具类-Convert" target="_blank" rel="noopener">https://www.hutool.cn/docs/#/core/类型转换/类型转换工具类-Convert</a>  。</p></blockquote><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><blockquote><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>懒汉式单例模式为什么要进行二次判空</title>
      <link href="/2020/02/08/singleton_twoIfNull_reason/"/>
      <url>/2020/02/08/singleton_twoIfNull_reason/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>在本文中会使用代码进行展示懒汉单例模式为什么需要进行二次判空；代码中使用到 <span style="color:red;"><strong>CountDownLatch 倒计时器</strong></span>，不清楚CountDownLatch 使用的请参考此文<a href="https://www.jianshu.com/p/f17692e9114f" target="_blank" rel="noopener">“倒计时器：CountDownLatch”</a> 。</p></blockquote><h2 id="代码展示："><a href="#代码展示：" class="headerlink" title="代码展示："></a>代码展示：</h2><h5 id="1、懒汉式单例模式类"><a href="#1、懒汉式单例模式类" class="headerlink" title="1、懒汉式单例模式类"></a>1、懒汉式单例模式类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用volatile禁止指令重排序</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton sin = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;<span class="comment">// 标识有几个线程获取到了锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">// 标识系统中到底生成了几个实例</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将构造器的修饰符设置为"private"，可以防止在外部进行new实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取实例对象的方法，公共的方法。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 第一次判空。</span></span><br><span class="line"><span class="keyword">if</span> (sin == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 加锁</span></span><br><span class="line"><span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 第二次判空。</span></span><br><span class="line"><span class="keyword">if</span> (sin == <span class="keyword">null</span>) &#123;</span><br><span class="line">sin = <span class="keyword">new</span> Singleton();</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、多线程并发调用单例模式的测试类"><a href="#2、多线程并发调用单例模式的测试类" class="headerlink" title="2、多线程并发调用单例模式的测试类"></a>2、多线程并发调用单例模式的测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个倒计树器,初始倒计数为10</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadTest demo = <span class="keyword">new</span> ThreadTest();</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//实例对象生成</span></span><br><span class="line">Singleton.getInstance();</span><br><span class="line"><span class="comment">//输出当前线程的名称</span></span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//计数器进行减一</span></span><br><span class="line">latch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"><span class="comment">//创建一个长度为10的定长线程池</span></span><br><span class="line">ExecutorService exec = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">            exec.submit(demo);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待检查,阻塞main主线程,只有当CountDownLatch倒计数器为0时才会唤醒阻塞的main主线程</span></span><br><span class="line">        latch.await();  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开启的10个线程中几个线程获取到了锁</span></span><br><span class="line">System.out.println(<span class="string">"共有 ( "</span> + Singleton.i + <span class="string">" ) 个线程获取到对象锁"</span>);</span><br><span class="line"><span class="comment">// 最终生成了几个Singleton实例</span></span><br><span class="line">System.out.println(<span class="string">"最终生成了( "</span> + Singleton.j + <span class="string">" )个Singleton实例对象"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        exec.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行上面的mian方法，会得到以下的一种输出结果-存在多种输出结果"><a href="#运行上面的mian方法，会得到以下的一种输出结果-存在多种输出结果" class="headerlink" title="运行上面的mian方法，会得到以下的一种输出结果(存在多种输出结果)"></a>运行上面的mian方法，会得到以下的一种输出结果(存在多种输出结果)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">7</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">6</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">9</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">10</span></span><br><span class="line">共有 ( <span class="number">2</span> ) 个线程获取到对象锁</span><br><span class="line">最终生成了( <span class="number">1</span> )个Singleton实例对象</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p> 从运行结果可以看出，如果不进行第二次判空的话，那么在<span style="color:red;">竟锁池(锁池)</span>中如果还有活跃的线程在等待获取的锁的话，在锁释放后就会再次竞争获取锁，获取的锁的线程进入”就绪状态”，当cpu分配其”时间片”后进行线程的调度，从而线程进入”运行中状态”，并会去执行同步的代码块，如果在没加如二次判空的话，就会导致系统中存在多个实例，而在进行判空后，即使你获取到了锁，但在执行同步代码块时也会直接跳过。</p><pre><code>竟锁池(锁池)的概念：[“倒计时器：CountDownLatch”](https://blog.csdn.net/qq_22498277/article/details/82184419)</code></pre><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本查询服务器的cpu、内存、磁盘的使用率</title>
      <link href="/2020/02/07/search_cpu_memery_disk_byShell/"/>
      <url>/2020/02/07/search_cpu_memery_disk_byShell/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><blockquote><p>使用shell脚本查询服务器的cpu、内存、磁盘的使用率；如果需要对此脚本进行理解的话，请首先熟悉下<a href="https://blog.csdn.net/feichitianxia/article/details/103088793" target="_blank" rel="noopener">linux的基本命令和管道符的知识</a>。</p></blockquote><h2 id="脚本献上："><a href="#脚本献上：" class="headerlink" title="脚本献上："></a>脚本献上：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">#计算cpu使用率, -n number：指定在结束前应该产生的最大迭代次数或帧数,一般迭代次数越大，获取到的cpu使用率越准确; 本脚本中是迭代了5次，"-n5" </span></span><br><span class="line">cpu=`top <span class="literal">-b</span> <span class="literal">-n5</span> | fgrep <span class="string">"Cpu(s)"</span> | tail <span class="literal">-1</span> | awk <span class="operator">-F</span><span class="string">'id,'</span> <span class="string">'&#123;split($1, vs, ","); v=vs[length(vs)]; sub(/\s+/, "", v);sub(/\s+/, "", v); printf "%d", 100-v;&#125;'</span>`</span><br><span class="line">echo <span class="variable">$cpu</span><span class="string">'%'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#统计内存使用率</span></span><br><span class="line">mem_used_persent=`free <span class="literal">-m</span> | awk <span class="operator">-F</span> <span class="string">'[ :]+'</span> <span class="string">'NR==2&#123;printf "%d", ($3)/$2*100&#125;'</span>`</span><br><span class="line"><span class="comment"># -e参数是使 "\n"换行符生效进行输出换行的</span></span><br><span class="line">echo <span class="literal">-e</span> <span class="variable">$mem_used_persent</span><span class="string">'%\n'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#统计磁盘使用情况，df -P参数可以防止打印输出的内容换行</span></span><br><span class="line">df <span class="literal">-THP</span> | awk <span class="operator">-F</span> <span class="string">'[ ]+'</span> <span class="string">'NR!=1&#123;print $1","$6&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h2><p>12%<br>37%</p><p>/dev/mapper/vg_minghui-lv_root,25%<br>tmpfs,1%<br>/dev/sda1,10%<br>/dev/sr0,100%</p><p>前两行的内容：12% - cpu的使用率， 37% - 内存的使用率；</p><p>后面四行的内容：每个磁盘分区的使用率，磁盘分区名称和其使用率之间用英文逗号隔开。</p><h2 id="❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ"><a href="#❤不要忘记留下你学习的足迹-点赞-收藏-评论-嘿嘿ヾ" class="headerlink" title="❤不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ"></a><span style="color:red;">❤</span>不要忘记留下你学习的足迹 [点赞 + 收藏 + 评论]嘿嘿ヾ</h2><p>一切看文章不点赞都是“耍流氓”，嘿嘿ヾ(◍°∇°◍)ﾉﾞ！开个玩笑，动一动你的小手，点赞就完事了，你每个人出一份力量(点赞 + 评论)就会让更多的学习者加入进来！非常感谢！￣ω￣=</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo测试</title>
      <link href="/2020/01/19/HelloWorld/"/>
      <url>/2020/01/19/HelloWorld/</url>
      
        <content type="html"><![CDATA[<p>测试：Hello ，欢迎来到java的海洋。</p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
